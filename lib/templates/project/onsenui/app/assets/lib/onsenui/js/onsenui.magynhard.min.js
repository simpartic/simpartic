/* onsenui v2.100.2 - 2024-04-10 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).ons=e()}(this,function(){"use strict";function B(e,t){var n,i=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),i.push.apply(i,n)),i}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?B(Object(n),!0).forEach(function(t){H(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):B(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function R(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,j(i.key),i)}}function c(t,e,n){return e&&R(t.prototype,e),n&&R(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function H(t,e,n){return(e=j(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&q(t,e)}function h(t){return(h=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function q(t,e){return(q=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function z(t,e){if(null==t)return{};var n,i=function(t,e){if(null==t)return{};for(var n,i={},o=Object.keys(t),a=0;a<o.length;a++)n=o[a],0<=e.indexOf(n)||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols)for(var o=Object.getOwnPropertySymbols(t),a=0;a<o.length;a++)n=o[a],0<=e.indexOf(n)||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n]);return i}function a(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function f(n){var i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}();return function(){var t,e=h(n),e=(t=i?(t=h(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return a(e)}}function p(){return(p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var i=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=h(t)););return t}(t,e);if(i)return(i=Object.getOwnPropertyDescriptor(i,e)).get?i.get.call(arguments.length<3?t:n):i.value}).apply(this,arguments)}function m(t){return function(t){if(Array.isArray(t))return F(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){var n;if(t)return"string"==typeof t?F(t,e):"Map"===(n="Object"===(n=Object.prototype.toString.call(t).slice(8,-1))&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?F(t,e):void 0}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function F(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function j(t){t=function(t,e){if("object"!=typeof t||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0===n)return("string"===e?String:Number)(t);if("object"!=typeof(n=n.call(t,e||"default")))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}(t,"string");return"symbol"==typeof t?t:String(t)}
/*
  Copyright 2013-2015 ASIAL CORPORATION

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  */
// Save HTMLElement object before Custom Elements polyfill patch global HTMLElement.
var V,W,X,U,Y,$,G,K,J,n,Q,Z,tt,et,nt,it,ot,at,rt,st=window.HTMLElement,r=new(function(){
/**
     * All elements will be rendered as if the app was running on this platform.
     * @type {String}
     */
function t(){l(this,t),this._selectedPlatform=null,this._ignorePlatformSelect=!1}
/**
     * @method select
     * @signature select(platform)
     * @param  {string} platform Name of the platform.
     *   [en]Possible values are: "opera", "firefox", "safari", "chrome", "ie", "android", "blackberry", "ios" or "wp".[/en]
     *   [ja]"opera", "firefox", "safari", "chrome", "ie", "android", "blackberry", "ios", "wp"のいずれかを指定します。[/ja]
     * @description
     *   [en]Sets the platform used to render the elements. Useful for testing.[/en]
     *   [ja]要素を描画するために利用するプラットフォーム名を設定します。テストに便利です。[/ja]
     */return c(t,[{key:"select",value:function(t){"string"==typeof t&&(this._selectedPlatform=t.trim().toLowerCase())}},{key:"_getSelectedPlatform",value:function(){return this._ignorePlatformSelect?null:this._selectedPlatform}},{key:"_runOnActualPlatform",value:function(t){this._ignorePlatformSelect=!0;t=t();return this._ignorePlatformSelect=!1,t}
//----------------
// General
//----------------
/**
       * @method isWebView
       * @signature isWebView()
       * @description
       *   [en]Returns whether app is running in Cordova.[/en]
       *   [ja]Cordova内で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isWebView",value:function(){if("loading"===document.readyState||"uninitialized"==document.readyState)throw new Error("isWebView() method is available after dom contents loaded.");return!!(window.cordova||window.phonegap||window.PhoneGap)}
//----------------
// iOS devices
//----------------
/**
       * @method isIPhone
       * @signature isIPhone()
       * @description
       *   [en]Returns whether the device is iPhone.[/en]
       *   [ja]iPhone上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isIPhone",value:function(){return/iPhone/i.test(navigator.userAgent)}
/**
       * @method isIPhoneX
       * @signature isIPhoneX()
       * @description
       *   [en]Returns whether the device is iPhone X, XS, XS Max, XR, 11, 11 Pro, 11 Pro Max, 12 Mini, 12, 12 Pro or 12 Pro Max, 13 Mini, 13, 13 Pro, 13 Pro Max, 14, 14 Plus, 14 Pro, 14 Pro Max.[/en]
       *   [ja]iPhone X や XS、XS Max、XR、11、11 Pro、11 Pro Max、12 Mini、12、12 Pro、12 Pro Max、13 Mini、13、13 Pro、13 Pro Max、14、14 Plus、14 Pro、または14 Pro Max上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isIPhoneX",value:function(){
// iOS WebViews on the same iOS version have the same user agent.
// We cannot avoid using window.screen.
// We also cannot use cordova-plugin-device since its behavior is different between simulators and real devices.
// This works well both in iOS Safari and (UI|WK)WebView of iPhone X.
return this.isIPhone()&&(
// X, XS, 11 Pro, 12 Mini, 13 Mini
375===window.screen.width&&812===window.screen.height||
// portrait
812===window.screen.width&&375===window.screen.height||
// landscape
// XS Max, XR, 11, 11 Pro Max
414===window.screen.width&&896===window.screen.height||
// portrait
896===window.screen.width&&414===window.screen.height||
// landscape
// 12, 12 Pro, 13, 13 Pro, 14
390===window.screen.width&&844===window.screen.height||
// portrait
844===window.screen.width&&390===window.screen.height||
// landscape
// 12 Pro Max, 13 Pro Max, 14 Plus
428===window.screen.width&&926===window.screen.height||
// portrait
926===window.screen.width&&428===window.screen.height||
// landscape
// 14 Pro Max
430===window.screen.width&&932===window.screen.height||
// portrait
932===window.screen.width&&430===window.screen.height||
// landscape
// 14 Pro
393===window.screen.width&&852===window.screen.height||
// portrait
852===window.screen.width&&393===window.screen.height)}
/**
       * @method isIPad
       * @signature isIPad()
       * @description
       *   [en]Returns whether the device is iPad.[/en]
       *   [ja]iPad上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isIPad",value:function(){return/iPad/i.test(navigator.userAgent)||this.isIPadOS()}
/**
       * @return {Boolean}
       */},{key:"isIPod",value:function(){return/iPod/i.test(navigator.userAgent)}
//----------------
// iOS versions
//----------------
/**
       * @method isIOS
       * @signature isIOS([forceActualPlatform])
       * @param {Boolean} forceActualPlatform
       *   [en]If true, selected platform is ignored and the actual platform is returned.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Returns whether the OS is iOS. By default will return manually selected platform if it is set.[/en]
       *   [ja]iOS上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isIOS",value:function(t){return!t&&this._getSelectedPlatform()?"ios"===this._getSelectedPlatform():"object"!==("undefined"==typeof device?"undefined":o(device))||/browser/i.test(device.platform)?/iPhone|iPad|iPod/i.test(navigator.userAgent)||this.isIPadOS():/iOS/i.test(device.platform)}
/**
       * @method isIOS7above
       * @signature isIOS7above()
       * @description
       *   [en]Returns whether the iOS version is 7 or above.[/en]
       *   [ja]iOS7以上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isIOS7above",value:function(){var t;return"object"!==("undefined"==typeof device?"undefined":o(device))||/browser/i.test(device.platform)?!!/iPhone|iPad|iPod/i.test(navigator.userAgent)&&(t=(navigator.userAgent.match(/\b[0-9]+_[0-9]+(?:_[0-9]+)?\b/)||[""])[0].replace(/_/g,"."),7<=parseInt(t.split(".")[0])):/iOS/i.test(device.platform)&&7<=parseInt(device.version.split(".")[0])}
/**
       * @method isIPadOS
       * @signature isIPadOS()
       * @description
       *   [en]Returns whether the OS is iPadOS.[/en]
       *   [ja][/ja]
       * @return {Boolean}
       */},{key:"isIPadOS",value:function(){
// The iPadOS User Agent string is the same as MacOS so as a
// workaround we test the max touch points, which is 5 for
// iPads and 0 for desktop browsers.
return!(!/Macintosh/i.test(navigator.userAgent)||!navigator.maxTouchPoints||5!==navigator.maxTouchPoints)}
//----------------
// iOS browsers
//----------------
/**
       * @method isIOSSafari
       * @signature isIOSSafari()
       * @description
       *   [en]Returns whether app is running in iOS Safari.[/en]
       *   [ja]iOS Safariで実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isIOSSafari",value:function(){var t=window.navigator,e=t.userAgent;return!(!this.isIOS()||-1===e.indexOf("Safari")||-1===e.indexOf("Version")||t.standalone)}
/**
       * @method isWKWebView
       * @signature isWKWebView()
       * @description
       *   [en]Returns whether app is running in WKWebView.[/en]
       *   [ja]WKWebViewで実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isWKWebView",value:function(){var t=/constructor/i.test(st);return!(!(this.isIOS()&&window.webkit&&window.webkit.messageHandlers&&window.indexedDB)||t)}
//----------------
// Android devices
//----------------
/**
       * @method isAndroidPhone
       * @signature isAndroidPhone()
       * @description
       *   [en]Returns whether the device is Android phone.[/en]
       *   [ja]Android携帯上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isAndroidPhone",value:function(){return/Android/i.test(navigator.userAgent)&&/Mobile/i.test(navigator.userAgent)}
/**
       * @method isAndroidTablet
       * @signature isAndroidTablet()
       * @description
       *   [en]Returns whether the device is Android tablet.[/en]
       *   [ja]Androidタブレット上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isAndroidTablet",value:function(){return/Android/i.test(navigator.userAgent)&&!/Mobile/i.test(navigator.userAgent)}
//----------------
// Android versions
//----------------
/**
       * @method isAndroid
       * @signature isAndroid([forceActualPlatform])
       * @param {Boolean} forceActualPlatform
       *   [en]If true, selected platform is ignored and the actual platform is returned.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Returns whether the OS is Android. By default will return manually selected platform if it is set.[/en]
       *   [ja]Android上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isAndroid",value:function(t){return!t&&this._getSelectedPlatform()?"android"===this._getSelectedPlatform():"object"!==("undefined"==typeof device?"undefined":o(device))||/browser/i.test(device.platform)?/Android/i.test(navigator.userAgent):/Android/i.test(device.platform)}
//----------------
// Other devices
//----------------
/**
       * @method isWP
       * @signature isWP([forceActualPlatform])
       * @param {Boolean} forceActualPlatform
       *   [en]If true, selected platform is ignored and the actual platform is returned.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Returns whether the OS is Windows phone. By default will return manually selected platform if it is set.[/en]
       *   [ja][/ja]
       * @return {Boolean}
       */},{key:"isWP",value:function(t){return!t&&this._getSelectedPlatform()?"wp"===this._getSelectedPlatform():"object"!==("undefined"==typeof device?"undefined":o(device))||/browser/i.test(device.platform)?/Windows Phone|IEMobile|WPDesktop/i.test(navigator.userAgent):/Win32NT|WinCE/i.test(device.platform)}
/**
       * @method isBlackBerry
       * @signature isBlackBerry([forceActualPlatform])
       * @param {Boolean} forceActualPlatform
       *   [en]If true, selected platform is ignored and the actual platform is returned.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Returns whether the device is BlackBerry. By default will return manually selected platform if it is set.[/en]
       *   [ja]BlackBerry上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isBlackBerry",value:function(t){return!t&&this._getSelectedPlatform()?"blackberry"===this._getSelectedPlatform():"object"!==("undefined"==typeof device?"undefined":o(device))||/browser/i.test(device.platform)?/BlackBerry|RIM Tablet OS|BB10/i.test(navigator.userAgent):/BlackBerry/i.test(device.platform)}
//----------------
// Other browsers
//----------------
/**
       * @method isOpera
       * @signature isOpera([forceActualPlatform])
       * @param {Boolean} forceActualPlatform
       *   [en]If true, selected platform is ignored and the actual platform is returned.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Returns whether the browser is Opera. By default will return manually selected platform if it is set.[/en]
       *   [ja]Opera上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isOpera",value:function(t){return!t&&this._getSelectedPlatform()?"opera"===this._getSelectedPlatform():!!window.opera||0<=navigator.userAgent.indexOf(" OPR/")}
/**
       * @method isFirefox
       * @signature isFirefox([forceActualPlatform])
       * @param {Boolean} forceActualPlatform
       *   [en]If true, selected platform is ignored and the actual platform is returned.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Returns whether the browser is Firefox. By default will return manually selected platform if it is set.[/en]
       *   [ja]Firefox上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isFirefox",value:function(t){return!t&&this._getSelectedPlatform()?"firefox"===this._getSelectedPlatform():"undefined"!=typeof InstallTrigger}
/**
       * @method isSafari
       * @signature isSafari([forceActualPlatform])
       * @param {Boolean} forceActualPlatform
       *   [en]If true, selected platform is ignored and the actual platform is returned.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Returns whether the browser is Safari. By default will return manually selected platform if it is set.[/en]
       *   [ja]Safari上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isSafari",value:function(t){return!t&&this._getSelectedPlatform()?"safari"===this._getSelectedPlatform():0<Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor")||"[object SafariRemoteNotification]"===(!window.safari||safari.pushNotification).toString()}
/**
       * @method isChrome
       * @signature isChrome([forceActualPlatform])
       * @param {Boolean} forceActualPlatform
       *   [en]If true, selected platform is ignored and the actual platform is returned.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Returns whether the browser is Chrome. By default will return manually selected platform if it is set.[/en]
       *   [ja]Chrome上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isChrome",value:function(t){return!t&&this._getSelectedPlatform()?"chrome"===this._getSelectedPlatform():!(!window.chrome||window.opera||0<=navigator.userAgent.indexOf(" OPR/")||0<=navigator.userAgent.indexOf(" Edge/"))}
/**
       * @method isIE
       * @signature isIE([forceActualPlatform])
       * @param {Boolean} forceActualPlatform
       *   [en]If true, selected platform is ignored and the actual platform is returned.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Returns whether the browser is Internet Explorer. By default will return manually selected platform if it is set.[/en]
       *   [ja]Internet Explorer上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isIE",value:function(t){return!t&&this._getSelectedPlatform()?"ie"===this._getSelectedPlatform():!!document.documentMode}
/**
       * @method isEdge
       * @signature isEdge([forceActualPlatform])
       * @param {Boolean} forceActualPlatform
       *   [en]If true, selected platform is ignored and the actual platform is returned.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Returns whether the browser is Edge. By default will return manually selected platform if it is set.[/en]
       *   [ja]Edge上で実行されているかどうかを返します。[/ja]
       * @return {Boolean}
       */},{key:"isEdge",value:function(t){return!t&&this._getSelectedPlatform()?"edge"===this._getSelectedPlatform():0<=navigator.userAgent.indexOf(" Edge/")}
//----------------
// Utility functions
//----------------
/**
       * @return {String}
       */},{key:"getMobileOS",value:function(){return this.isAndroid()?"android":this.isIOS()?"ios":this.isWP()?"wp":"other"}
/**
       * @return {String}
       */},{key:"getIOSDevice",value:function(){return this.isIPhone()?"iphone":this.isIPad()?"ipad":this.isIPod()?"ipod":"na"}}]),t}());
/**
   * @object ons.platform
   * @category util
   * @description
   *   [en]Utility methods to detect current platform.[/en]
   *   [ja]現在実行されているプラットフォームを検知するためのユーティリティメソッドを収めたオブジェクトです。[/ja]
   */function lt(){Y=!1;var t=$,i=($=[],t.sort(function(t,e){return t.uid_-e.uid_}),!1);t.forEach(function(t){var e,n=t.takeRecords();(e=t).nodes_.forEach(function(t){t=V.get(t);t&&t.forEach(function(t){t.observer===e&&t.removeTransientObservers()})}),n.length&&(t.callback_(n,t),i=!0)}),i&&lt()}function ct(t,e){for(var n=t;n;n=n.parentNode){var i=V.get(n);if(i)for(var o=0;o<i.length;o++){var a=i[o],r=a.options;(n===t||r.subtree)&&(r=e(r))&&a.enqueue(r)}}}function ut(t){this.callback_=t,this.nodes_=[],this.records_=[],this.uid_=++G}function dt(t,e){this.type=t,this.target=e,this.addedNodes=[],this.removedNodes=[],this.previousSibling=null,this.nextSibling=null,this.attributeName=null,this.attributeNamespace=null,this.oldValue=null}function ht(t,e){return K=new dt(t,e)}function ft(t){var e,n;return J||((n=new dt((e=K).type,e.target)).addedNodes=e.addedNodes.slice(),n.removedNodes=e.removedNodes.slice(),n.previousSibling=e.previousSibling,n.nextSibling=e.nextSibling,n.attributeName=e.attributeName,n.attributeNamespace=e.attributeNamespace,n.oldValue=e.oldValue,(J=n).oldValue=t),J}function pt(t,e){return t===e?t:!J||(e=t)!==J&&e!==K?null:J}function mt(t,e,n){this.observer=t,this.target=e,this.options=n,this.transientObservedNodes=[]}function gt(t){return tt[Z]=vt.apply(Q,t),Z++}
// This function accepts the same arguments as setImmediate, but
// returns a function that requires no arguments.
function vt(t){var e=[].slice.call(arguments,1);return function(){"function"==typeof t?t.apply(Q,e):new Function(""+t)()}}function _t(t){
// From the spec: "Wait until any invocations of this algorithm started before this one have completed."
// So if we're currently running a task, we'll need to delay this invocation.
if(et)
// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
// "too much recursion" error.
setTimeout(vt(_t,t),0);else{var e=tt[t];if(e){et=!0;try{e()}finally{bt(t),et=!1}}}}function bt(t){delete tt[t]}function yt(){function t(t){t.source===n&&"string"==typeof t.data&&0===t.data.indexOf(e)&&_t(+t.data.slice(e.length))}
// Installs an event handler on `global` for the `message` event: see
// * https://developer.mozilla.org/en/DOM/window.postMessage
// * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
var e="setImmediate$"+Math.random()+"$";n.addEventListener?n.addEventListener("message",t,!1):n.attachEvent("onmessage",t),it=function(){var t=gt(arguments);return n.postMessage(e+t,"*"),t}}
// For @onsenui/custom-elements
window.customElements&&(
// even if native CE1 impl exists, use polyfill
window.customElements.forcePolyfill=!0),function(){var o=new function(){},B=new Set("annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" "));function u(t){var e=B.has(t);return t=/^[a-z][.0-9_a-z]*-[\-.0-9_a-z]*$/.test(t),!e&&t}function s(t){var e=t.isConnected;if(void 0!==e)return e;for(;t&&!(t.__CE_isImportDocument||t instanceof Document);)t=t.parentNode||(window.ShadowRoot&&t instanceof ShadowRoot?t.host:void 0);return!(!t||!(t.__CE_isImportDocument||t instanceof Document))}function r(t,e){for(;e&&e!==t&&!e.nextSibling;)e=e.parentNode;return e&&e!==t?e.nextSibling:null}function l(t,e,n){n=n||new Set;for(var i=t;i;){if(i.nodeType===Node.ELEMENT_NODE){var o=i,a=(e(o),o.localName);if("link"===a&&"import"===o.getAttribute("rel")){if((i=o.import)instanceof Node&&!n.has(i))for(n.add(i),i=i.firstChild;i;i=i.nextSibling)l(i,e,n);i=r(t,o);continue}if("template"===a){i=r(t,o);continue}if(o=o.__CE_shadowRoot)for(o=o.firstChild;o;o=o.nextSibling)l(o,e,n)}i=i.firstChild||r(t,i)}}function c(t,e,n){t[e]=n}function t(){this.a=new Map,this.f=new Map,this.c=[],this.b=!1}function d(t,e){t.b=!0,t.c.push(e)}function h(e,t){e.b&&l(t,function(t){return a(e,t)})}function a(t,e){if(t.b&&!e.__CE_patched){e.__CE_patched=!0;for(var n=0;n<t.c.length;n++)t.c[n](e)}}function f(t,e){var n=[];for(l(e,function(t){return n.push(t)}),e=0;e<n.length;e++){var i=n[e];1===i.__CE_state?s(i)&&t.connectedCallback(i):g(t,i)}}function p(t,e){var n=[];for(l(e,function(t){return n.push(t)}),e=0;e<n.length;e++){var i=n[e];1===i.__CE_state&&t.disconnectedCallback(i)}}function m(n,t,i){i=i||new Set;var o=[];if(l(t,function(e){var t;"link"===e.localName&&"import"===e.getAttribute("rel")?(t=e.import)instanceof Node&&"complete"===t.readyState?(t.__CE_isImportDocument=!0,t.__CE_hasRegistry=!0):e.addEventListener("load",function(){var t=e.import;t.__CE_documentLoadHandled||(t.__CE_documentLoadHandled=!0,t.__CE_isImportDocument=!0,t.__CE_hasRegistry=!0,i.delete(t),m(n,t,i))}):o.push(e)},i),n.b)for(t=0;t<o.length;t++)a(n,o[t]);for(t=0;t<o.length;t++)g(n,o[t])}function g(t,e){if(void 0===e.__CE_state){var n=t.a.get(e.localName);if(n){n.constructionStack.push(e);var i=n.constructor;try{try{if(new i!==e)throw Error("The custom element constructor did not produce the element being upgraded.")}finally{n.constructionStack.pop()}}catch(t){throw e.__CE_state=2,t}if(e.__CE_state=1,(e.__CE_definition=n).attributeChangedCallback)for(n=n.observedAttributes,i=0;i<n.length;i++){var o=n[i],a=e.getAttribute(o);null!==a&&t.attributeChangedCallback(e,o,null,a,null)}s(e)&&t.connectedCallback(e)}}}function e(t,e){this.c=t,this.a=e,this.b=void 0,m(this.c,this.a),"loading"===this.a.readyState&&(this.b=new MutationObserver(this.f.bind(this)),this.b.observe(this.a,{childList:!0,subtree:!0}))}function v(t){t.b&&t.b.disconnect()}function R(){var e=this;this.b=this.a=void 0,this.c=new Promise(function(t){e.b=t,e.a&&t(e.a)})}function _(t){if(t.a)throw Error("Already resolved.");t.a=void 0,t.b&&t.b(void 0)}function n(t){this.f=!1,this.a=t,this.h=new Map,this.g=function(t){return t()},this.b=!1,this.c=[],this.l=new e(t,document)}t.prototype.connectedCallback=function(t){var e=t.__CE_definition;e.connectedCallback&&e.connectedCallback.call(t),t.i=!0},t.prototype.disconnectedCallback=function(t){t.i||this.connectedCallback(t);var e=t.__CE_definition;e.disconnectedCallback&&e.disconnectedCallback.call(t),t.i=void 0},t.prototype.attributeChangedCallback=function(t,e,n,i,o){var a=t.__CE_definition;a.attributeChangedCallback&&-1<a.observedAttributes.indexOf(e)&&a.attributeChangedCallback.call(t,e,n,i,o)},e.prototype.f=function(t){var e=this.a.readyState;for("interactive"!==e&&"complete"!==e||v(this),e=0;e<t.length;e++)for(var n=t[e].addedNodes,i=0;i<n.length;i++)m(this.c,n[i])},n.prototype.m=function(t,e){var n,i,o,a,r,s=this;if(!(e instanceof Function))throw new TypeError("Custom element constructors must be functions.");if(!u(t))throw new SyntaxError("The element name '"+t+"' is not valid.");if(this.a.a.get(t))throw Error("A custom element with name '"+t+"' has already been defined.");if(this.f)throw Error("A custom element is already being defined.");this.f=!0;try{var l=function(t){var e=c[t];if(void 0===e||e instanceof Function)return e;throw Error("The '"+t+"' callback must be a function.")},c=e.prototype;if(!(c instanceof Object))throw new TypeError("The custom element constructor's prototype is not an object.");n=l("connectedCallback"),i=l("disconnectedCallback"),o=l("adoptedCallback"),a=l("attributeChangedCallback"),r=e.observedAttributes||[]}catch(t){return}finally{this.f=!1}l=this.a,e={localName:t,constructor:e,connectedCallback:n,disconnectedCallback:i,adoptedCallback:o,attributeChangedCallback:a,observedAttributes:r,constructionStack:[]},l.a.set(t,e),l.f.set(e.constructor,e),this.c.push(t),this.b||(this.b=!0,this.g(function(){if(!1!==s.b)for(s.b=!1,m(s.a,document);0<s.c.length;){var t=s.c.shift();(t=s.h.get(t))&&_(t)}}))},n.prototype.get=function(t){if(t=this.a.a.get(t))return t.constructor},n.prototype.s=function(t){var e;return u(t)?((e=this.h.get(t))||(e=new R,this.h.set(t,e),this.a.a.get(t)&&-1===this.c.indexOf(t)&&_(e)),e.c):Promise.reject(new SyntaxError("'"+t+"' is not a valid custom element name."))},n.prototype.o=function(e){v(this.l);var n=this.g;this.g=function(t){return e(function(){return n(t)})}},(window.CustomElementRegistry=n).prototype.define=n.prototype.m,n.prototype.whenDefined=n.prototype.s,n.prototype.polyfillWrapFlushCallback=n.prototype.o;var b=window.Document.prototype.createElement,H=window.Document.prototype.createElementNS,q=window.Document.prototype.importNode,z=window.Document.prototype.prepend,F=window.Document.prototype.append,y=window.Node.prototype.cloneNode,k=window.Node.prototype.appendChild,i=window.Node.prototype.insertBefore,w=window.Node.prototype.removeChild,E=window.Node.prototype.replaceChild,C=Object.getOwnPropertyDescriptor(window.Node.prototype,"textContent"),A=window.Element.prototype.attachShadow,S=Object.getOwnPropertyDescriptor(window.Element.prototype,"innerHTML"),x=window.Element.prototype.getAttribute,P=window.Element.prototype.setAttribute,j=window.Element.prototype.removeAttribute,L=window.Element.prototype.getAttributeNS,V=window.Element.prototype.setAttributeNS,W=window.Element.prototype.removeAttributeNS,X=window.Element.prototype.insertAdjacentElement,U=window.Element.prototype.prepend,Y=window.Element.prototype.append,$=window.Element.prototype.before,G=window.Element.prototype.after,K=window.Element.prototype.replaceWith,J=window.Element.prototype.remove,Q=window.HTMLElement,O=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),Z=window.HTMLElement.prototype.insertAdjacentElement;function tt(o,t,a){t.prepend=function(t){for(var e=[],n=0;n<arguments.length;++n)e[+n]=arguments[n];n=e.filter(function(t){return t instanceof Node&&s(t)}),a.j.apply(this,e);for(var i=0;i<n.length;i++)p(o,n[i]);if(s(this))for(n=0;n<e.length;n++)(i=e[n])instanceof Element&&f(o,i)},t.append=function(t){for(var e=[],n=0;n<arguments.length;++n)e[+n]=arguments[n];n=e.filter(function(t){return t instanceof Node&&s(t)}),a.append.apply(this,e);for(var i=0;i<n.length;i++)p(o,n[i]);if(s(this))for(n=0;n<e.length;n++)(i=e[n])instanceof Element&&f(o,i)}}function et(){var n,a,t,r=M;function e(t,a){Object.defineProperty(t,"innerHTML",{enumerable:a.enumerable,configurable:!0,get:a.get,set:function(t){var e=this,n=void 0;if(s(this)&&(n=[],l(this,function(t){t!==e&&n.push(t)})),a.set.call(this,t),n)for(var i=0;i<n.length;i++){var o=n[i];1===o.__CE_state&&r.disconnectedCallback(o)}return(this.ownerDocument.__CE_hasRegistry?m:h)(r,this),t}})}function i(t,i){c(t,"insertAdjacentElement",function(t,e){var n=s(e);return t=i.call(this,t,e),n&&p(r,e),s(t)&&f(r,e),t})}A?c(Element.prototype,"attachShadow",function(t){return this.__CE_shadowRoot=t=A.call(this,t)}):console.warn("Custom Elements: `Element#attachShadow` was not patched."),S&&S.get?e(Element.prototype,S):O&&O.get?e(HTMLElement.prototype,O):(n=b.call(document,"div"),d(r,function(t){e(t,{enumerable:!0,configurable:!0,get:function(){return y.call(this,!0).innerHTML},set:function(t){var e="template"===this.localName?this.content:this;for(n.innerHTML=t;0<e.childNodes.length;)w.call(e,e.childNodes[0]);for(;0<n.childNodes.length;)k.call(e,n.childNodes[0])}})})),c(Element.prototype,"setAttribute",function(t,e){if(1!==this.__CE_state)return P.call(this,t,e);var n=x.call(this,t);P.call(this,t,e),e=x.call(this,t),r.attributeChangedCallback(this,t,n,e,null)}),c(Element.prototype,"setAttributeNS",function(t,e,n){if(1!==this.__CE_state)return V.call(this,t,e,n);var i=L.call(this,t,e);V.call(this,t,e,n),n=L.call(this,t,e),r.attributeChangedCallback(this,e,i,n,t)}),c(Element.prototype,"removeAttribute",function(t){if(1!==this.__CE_state)return j.call(this,t);var e=x.call(this,t);j.call(this,t),null!==e&&r.attributeChangedCallback(this,t,e,null,null)}),c(Element.prototype,"removeAttributeNS",function(t,e){if(1!==this.__CE_state)return W.call(this,t,e);var n=L.call(this,t,e),i=(W.call(this,t,e),L.call(this,t,e));n!==i&&r.attributeChangedCallback(this,e,n,i,t)}),Z?i(HTMLElement.prototype,Z):X?i(Element.prototype,X):console.warn("Custom Elements: `Element#insertAdjacentElement` was not patched."),tt(r,Element.prototype,{j:U,append:Y}),a=r,(t=Element.prototype).before=function(t){for(var e=[],n=0;n<arguments.length;++n)e[+n]=arguments[n];n=e.filter(function(t){return t instanceof Node&&s(t)}),$.apply(this,e);for(var i=0;i<n.length;i++)p(a,n[i]);if(s(this))for(n=0;n<e.length;n++)(i=e[n])instanceof Element&&f(a,i)},t.after=function(t){for(var e=[],n=0;n<arguments.length;++n)e[+n]=arguments[n];n=e.filter(function(t){return t instanceof Node&&s(t)}),G.apply(this,e);for(var i=0;i<n.length;i++)p(a,n[i]);if(s(this))for(n=0;n<e.length;n++)(i=e[n])instanceof Element&&f(a,i)},t.replaceWith=function(t){for(var e=[],n=0;n<arguments.length;++n)e[+n]=arguments[n];var n=e.filter(function(t){return t instanceof Node&&s(t)}),i=s(this);K.apply(this,e);for(var o=0;o<n.length;o++)p(a,n[o]);if(i)for(p(a,this),n=0;n<e.length;n++)(i=e[n])instanceof Element&&f(a,i)},t.remove=function(){var t=s(this);J.call(this),t&&p(a,this)}}var M,T,I,D,N=window.customElements;function nt(t,a){Object.defineProperty(t,"textContent",{enumerable:a.enumerable,configurable:!0,get:a.get,set:function(t){if(this.nodeType===Node.TEXT_NODE)a.set.call(this,t);else{var e=void 0;if(this.firstChild){var n=this.childNodes,i=n.length;if(0<i&&s(this))for(var e=Array(i),o=0;o<i;o++)e[o]=n[o]}if(a.set.call(this,t),e)for(t=0;t<e.length;t++)p(T,e[t])}}})}function it(){var t=this.constructor,e=D.f.get(t);if(!e)throw Error("The custom element being constructed was not registered with `customElements`.");var n=e.constructionStack;if(!n.length)return n=b.call(document,e.localName),Object.setPrototypeOf(n,t.prototype),n.__CE_state=1,n.__CE_definition=e,a(D,n),n;var i=n[e=n.length-1];if(i===o)throw Error("The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.");return n[e]=o,Object.setPrototypeOf(i,t.prototype),a(D,i),i}N&&!N.forcePolyfill&&"function"==typeof N.define&&"function"==typeof N.get||(M=new t,D=M,window.HTMLElement=(it.prototype=Q.prototype,it),I=M,c(Document.prototype,"createElement",function(t){if(this.__CE_hasRegistry){var e=I.a.get(t);if(e)return new e.constructor}return t=b.call(this,t),a(I,t),t}),c(Document.prototype,"importNode",function(t,e){return t=q.call(this,t,e),(this.__CE_hasRegistry?m:h)(I,t),t}),c(Document.prototype,"createElementNS",function(t,e){if(this.__CE_hasRegistry&&(null===t||"http://www.w3.org/1999/xhtml"===t)){var n=I.a.get(e);if(n)return new n.constructor}return t=H.call(this,t,e),a(I,t),t}),tt(I,Document.prototype,{j:z,append:F}),T=M,c(Node.prototype,"insertBefore",function(t,e){if(t instanceof DocumentFragment){var n=Array.prototype.slice.apply(t.childNodes);if(t=i.call(this,t,e),s(this))for(e=0;e<n.length;e++)f(T,n[e]);return t}return n=s(t),e=i.call(this,t,e),n&&p(T,t),s(this)&&f(T,t),e}),c(Node.prototype,"appendChild",function(t){if(t instanceof DocumentFragment){var e=Array.prototype.slice.apply(t.childNodes);if(t=k.call(this,t),s(this))for(var n=0;n<e.length;n++)f(T,e[n]);return t}return e=s(t),n=k.call(this,t),e&&p(T,t),s(this)&&f(T,t),n}),c(Node.prototype,"cloneNode",function(t){return t=y.call(this,t),(this.ownerDocument.__CE_hasRegistry?m:h)(T,t),t}),c(Node.prototype,"removeChild",function(t){var e=s(t),n=w.call(this,t);return e&&p(T,t),n}),c(Node.prototype,"replaceChild",function(t,e){if(t instanceof DocumentFragment){var n=Array.prototype.slice.apply(t.childNodes);if(t=E.call(this,t,e),s(this))for(p(T,e),e=0;e<n.length;e++)f(T,n[e]);return t}var n=s(t),i=E.call(this,t,e),o=s(this);return o&&p(T,e),n&&p(T,t),o&&f(T,t),i}),C&&C.get?nt(Node.prototype,C):d(T,function(t){nt(t,{enumerable:!0,configurable:!0,get:function(){for(var t=[],e=0;e<this.childNodes.length;e++)t.push(this.childNodes[e].textContent);return t.join("")},set:function(t){for(;this.firstChild;)w.call(this,this.firstChild);k.call(this,document.createTextNode(t))}})}),et(),document.__CE_hasRegistry=!0,N=new n(M),Object.defineProperty(window,"customElements",{configurable:!0,enumerable:!0,value:N}))}.call(self),(
/**
   * @license
   * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */
// @version 0.7.22
t=self).JsMutationObserver||(V=new WeakMap,U=/Trident|Edge/.test(navigator.userAgent)?setTimeout:window.setImmediate||(W=[],X=String(Math.random()),window.addEventListener("message",function(t){t.data===X&&(t=W,W=[],t.forEach(function(t){t()}))}),function(t){W.push(t),window.postMessage(X,"*")}),Y=!1,$=[],G=0,ut.prototype={observe:function(t,e){var n;if(n=t,t=window.ShadowDOMPolyfill&&window.ShadowDOMPolyfill.wrapIfNeeded(n)||n,!e.childList&&!e.attributes&&!e.characterData||e.attributeOldValue&&!e.attributes||e.attributeFilter&&e.attributeFilter.length&&!e.attributes||e.characterDataOldValue&&!e.characterData)throw new SyntaxError;var i,o=V.get(t);o||V.set(t,o=[]);for(var a=0;a<o.length;a++)if(o[a].observer===this){(i=o[a]).removeListeners(),i.options=e;break}i||(i=new mt(this,t,e),o.push(i),this.nodes_.push(t)),i.addListeners()},disconnect:function(){this.nodes_.forEach(function(t){for(var e=V.get(t),n=0;n<e.length;n++){var i=e[n];if(i.observer===this){i.removeListeners(),e.splice(n,1);break}}},this),this.records_=[]},takeRecords:function(){var t=this.records_;return this.records_=[],t}},mt.prototype={enqueue:function(t){var e=this.observer.records_,n=e.length;if(0<e.length){var i=pt(e[n-1],t);if(i)return void(e[n-1]=i)}else i=this.observer,$.push(i),Y||(Y=!0,U(lt));e[n]=t},addListeners:function(){this.addListeners_(this.target)},addListeners_:function(t){var e=this.options;e.attributes&&t.addEventListener("DOMAttrModified",this,!0),e.characterData&&t.addEventListener("DOMCharacterDataModified",this,!0),e.childList&&t.addEventListener("DOMNodeInserted",this,!0),(e.childList||e.subtree)&&t.addEventListener("DOMNodeRemoved",this,!0)},removeListeners:function(){this.removeListeners_(this.target)},removeListeners_:function(t){var e=this.options;e.attributes&&t.removeEventListener("DOMAttrModified",this,!0),e.characterData&&t.removeEventListener("DOMCharacterDataModified",this,!0),e.childList&&t.removeEventListener("DOMNodeInserted",this,!0),(e.childList||e.subtree)&&t.removeEventListener("DOMNodeRemoved",this,!0)},addTransientObserver:function(t){var e;t!==this.target&&(this.addListeners_(t),this.transientObservedNodes.push(t),(e=V.get(t))||V.set(t,e=[]),e.push(this))},removeTransientObservers:function(){var t=this.transientObservedNodes;this.transientObservedNodes=[],t.forEach(function(t){this.removeListeners_(t);for(var e=V.get(t),n=0;n<e.length;n++)if(e[n]===this){e.splice(n,1);break}},this)},handleEvent:function(t){switch(t.stopImmediatePropagation(),t.type){case"DOMAttrModified":var e=t.attrName,n=t.relatedNode.namespaceURI,i=t.target,o=((a=new ht("attributes",i)).attributeName=e,a.attributeNamespace=n,t.attrChange===MutationEvent.ADDITION?null:t.prevValue);ct(i,function(t){if(t.attributes&&(!t.attributeFilter||!t.attributeFilter.length||-1!==t.attributeFilter.indexOf(e)||-1!==t.attributeFilter.indexOf(n)))return t.attributeOldValue?ft(o):a});break;case"DOMCharacterDataModified":var a=ht("characterData",i=t.target),o=t.prevValue;ct(i,function(t){if(t.characterData)return t.characterDataOldValue?ft(o):a});break;case"DOMNodeRemoved":this.addTransientObserver(t.target);case"DOMNodeInserted":var r,i=t.target,s="DOMNodeInserted"===t.type?(r=[i],[]):(r=[],[i]),l=i.previousSibling,i=i.nextSibling;(a=ht("childList",t.target.parentNode)).addedNodes=r,a.removedNodes=s,a.previousSibling=l,a.nextSibling=i,ct(t.relatedNode,function(t){if(t.childList)return a})}K=J=void 0}},t.JsMutationObserver=ut,t.MutationObserver)||((t.MutationObserver=ut)._isPolyfilled=!0),(
/*
  Copyright (c) 2012 Barnesandnoble.com, llc, Donavon West, and Domenic Denicola

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  */
n=self).setImmediate||(Z=1,et=!(tt={}),nt=n.document,t=(t=Object.getPrototypeOf&&Object.getPrototypeOf(n))&&t.setTimeout?t:n,
// Don't get fooled by e.g. browserify environments.
"[object process]"==={}.toString.call(n.process)?it=function(){var t=gt(arguments);return process.nextTick(vt(_t,t)),t}:!function(){
// The test against `importScripts` prevents this implementation from being installed inside a web worker,
// where `global.postMessage` means something completely different and can't be used for this purpose.
var t,e;if(n.postMessage&&!n.importScripts)return t=!0,e=n.onmessage,n.onmessage=function(){t=!1},n.postMessage("","*"),n.onmessage=e,t}()?it=n.MessageChannel?(
// For web workers, where supported
(at=new MessageChannel).port1.onmessage=function(t){_t(t.data)},function(){var t=gt(arguments);return at.port2.postMessage(t),t}):nt&&"onreadystatechange"in nt.createElement("script")?(
// For IE 6–8
ot=nt.documentElement,function(){var t=gt(arguments),e=nt.createElement("script");
// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
return e.onreadystatechange=function(){_t(t),e.onreadystatechange=null,ot.removeChild(e),e=null},ot.appendChild(e),t}):function(){var t=gt(arguments);return setTimeout(vt(_t,t),0),t}:
// For non-IE10 modern browsers
yt(),t.setImmediate=it,t.clearImmediate=bt),rt={ensureViewportElement:function(){var t=document.querySelector("meta[name=viewport]");return t||((t=document.createElement("meta")).name="viewport",document.head.appendChild(t)),t},setup:function(){var t=rt.ensureViewportElement();t&&!t.hasAttribute("content")&&t.setAttribute("content","width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no")}},window.Viewport=rt;function kt(){}function u(e,n){return Object.keys(n).forEach(function(t){t in e.style?e.style[t]=n[t]:Lt(t)in e.style?e.style[Lt(t)]=n[t]:b.warn("No such style property: "+t)}),e}function wt(t,e){if(Ot&&!t.hasAttribute("disable-auto-styling")){t=r.getMobileOS();if(Object.prototype.hasOwnProperty.call(Tt,t)&&(Object.prototype.hasOwnProperty.call(It,t)||e))return t}return null}function Et(t,e,n){return wt(e,n)?t.split(/\s+/).map(function(t){return Object.prototype.hasOwnProperty.call(Mt,t)?Mt[t]:t}).join(" "):t}function Ct(t){return Dt(t,"{")&&Nt(t,"}")}function At(t){return Dt(t,"[")&&Nt(t,"]")}function St(t){for(var e,n,i,o,a=t=t.trim(),r={},s=!0;0<t.length;)if(n=i,i=zt(t),t=t.slice(i.length,t.length).trim(),":"===i&&(!s||!n||","===n)||","===i&&s||":"!==i&&","!==i&&n&&","!==n&&":"!==n)Ht(i,t,a);else if(":"===i&&s&&n){if(n=Rt(n)?Bt(n):n,o=n,!/^[A-Z_$][A-Z0-9_$]*$/i.test(o))throw new Error("Invalid key token '"+n+"' at position 0 in string: '"+a+"'");e=n,s=!1}else","===i&&!s&&n&&(r[e]=qt(n,t,a),s=!0);return i&&(r[e]=qt(i,t,a)),r}function xt(t){for(var e,n,i=t=t.trim(),o=[];0<t.length;)e=n,n=zt(t),t=t.slice(n.length,t.length).trim(),","!==n||e&&","!==e?","===n&&o.push(qt(e,t,i)):Ht(n,t,i);return n&&(","!==n?o.push(qt(n,t,i)):Ht(n,t,i)),o}
/**
   * MicroEvent - to make any js object an event emitter (server or browser)
   *
   * - pure javascript - server compatible, browser compatible
   * - dont rely on the browser doms
   * - super simple - you get it immediately, no mystery, no magic involved
   *
   * - create a MicroEventDebug with goodies to debug
   *   - make it safer to use
  */
/** NOTE: This library is customized for Onsen UI. */
kt.prototype={on:function(t,e){this._events=this._events||{},this._events[t]=this._events[t]||[],this._events[t].push(e)},once:function(e,n){var i=this;this.on(e,function t(){return i.off(e,t),n.apply(null,arguments)})},off:function(t,e){this._events=this._events||{},t in this._events!=!1&&(this._events[t]=this._events[t].filter(function(t){return!!e&&e!==t}))},emit:function(t/* , args... */){if(this._events=this._events||{},t in this._events!=!1)for(var e=0;e<this._events[t].length;e++)this._events[t][e].apply(this,Array.prototype.slice.call(arguments,1))}},
/**
   * mixin will delegate all MicroEvent.js function in the destination object
   *
   * - require('MicroEvent').mixin(Foobar) will make Foobar able to use MicroEvent
   *
   * @param {Object} the object which will support MicroEvent
  */
kt.mixin=function(t){for(var e=["on","once","off","emit"],n=0;n<e.length;n++)"function"==typeof t?t.prototype[e[n]]=kt.prototype[e[n]]:t[e[n]]=kt.prototype[e[n]]},window.MicroEvent=kt;var Pt,i={},Lt=(t=window.getComputedStyle(document.documentElement,""),Pt=(Array.prototype.slice.call(t).join("").match(/-(moz|webkit|ms)-/)||""===t.OLink&&["","o"])[1],function(t){return"-"+Pt+"-"+b.hyphenate(t)}),Ot=(
/**
   * @param {Element} element
   * @param {String} styles Space-separated CSS properties to remove
   */
u.clear=function(n){for(var t=(1<arguments.length&&void 0!==arguments[1]?arguments[1]:"").split(/\s+/).reduce(function(t,e){return t.concat([b.hyphenate(e),Lt(e)])},[]),i=[],o=n.style.length-1;0<=o;o--)!function(){var e=n.style[o];0!==t.length&&!t.some(function(t){return 0===e.indexOf(t)})||i.push(e)}();i.forEach(function(t){return n.style[t]=""}),""===n.getAttribute("style")&&n.removeAttribute("style")},!0),Mt={quiet:"material--flat",light:"material--flat",outline:"material--flat",cta:"","large--quiet":"material--flat large","large--cta":"large",noborder:"",tappable:""},Tt={android:function(t){var e,n=t.tagName.toLowerCase();b.hasModifier(t,"material")||((e=(t.getAttribute("modifier")||"").trim().split(/\s+/).map(function(t){return Object.prototype.hasOwnProperty.call(Mt,t)?Mt[t]:t})).unshift("material"),t.setAttribute("modifier",e.join(" ").trim()));
// Effects
-1===["ons-alert-dialog-button","ons-toolbar-button","ons-back-button","ons-button","ons-list-item","ons-fab","ons-speed-dial","ons-speed-dial-item","ons-tab"].indexOf(n)||t.hasAttribute("ripple")||t.querySelector("ons-ripple")||("ons-list-item"===n?t.hasAttribute("tappable")&&(t.setAttribute("ripple",""),t.removeAttribute("tappable")):t.setAttribute("ripple",""))},ios:function(t){
// Modifiers
b.removeModifier(t,"material")&&(b.removeModifier(t,"material--flat")&&b.addModifier(t,b.removeModifier(t,"large")?"large--quiet":"quiet"),t.getAttribute("modifier")||t.removeAttribute("modifier")),
// Effects
t.hasAttribute("ripple")&&("ons-list-item"===t.tagName.toLowerCase()&&t.setAttribute("tappable",""),t.removeAttribute("ripple"))}},It={android:!0},g={isEnabled:function(){return Ot},enable:function(){return Ot=!0},disable:function(){return Ot=!1},prepare:function(t,e){e=wt(t,e);e&&Tt[e](t)},mapModifier:Et,getPlatform:wt,restoreModifier:function(t){if("android"===wt(t)){var e=t.getAttribute("modifier")||"",n=Et(e,t);if((n=/(^|\s+)material($|\s+)/i.test(e)?n:"material "+n)!==e)return t.setAttribute("modifier",n.trim()),!0}return!1}},v=function(){function r(){l(this,r)}return c(r,null,[{key:"diff",value:
/**
       * @param {String} last
       * @param {String} current
       */
function(n,i){n=e((""+n).trim()),i=e((""+i).trim());var t=Object.keys(n).reduce(function(t,e){return i[e]||t.push(e),t},[]);return{added:Object.keys(i).reduce(function(t,e){return n[e]||t.push(e),t},[]),removed:t};function e(t){var e={};return r.split(t).forEach(function(t){return e[t]=t}),e}}
/**
       * @param {Object} diff
       * @param {Array} diff.removed
       * @param {Array} diff.added
       * @param {Object} classList
       * @param {String} template
       */},{key:"applyDiffToClassList",value:function(t,e,n){t.added.map(function(t){return n.replace(/\*/g,t)}).forEach(function(t){return t.split(/\s+/).forEach(function(t){return e.add(t)})}),t.removed.map(function(t){return n.replace(/\*/g,t)}).forEach(function(t){return t.split(/\s+/).forEach(function(t){return e.remove(t)})})}
/**
       * @param {Object} diff
       * @param {Array} diff.removed
       * @param {Array} diff.added
       * @param {HTMLElement} element
       * @param {Object} scheme
       */},{key:"applyDiffToElement",value:function(i,o,a){Object.keys(a).forEach(function(t){for(var e=!t||b.match(o,t)?[o]:Array.prototype.filter.call(o.querySelectorAll(t),function(t){return!b.findParent(t,o.tagName,function(t){return t===o})}),n=0;n<e.length;n++)r.applyDiffToClassList(i,e[n].classList,a[t])})}
/**
       * @param {String} last
       * @param {String} current
       * @param {HTMLElement} element
       * @param {Object} scheme
       */},{key:"onModifierChanged",value:function(t,e,n,i){r.applyDiffToElement(r.diff(t,e),n,i),g.restoreModifier(n)}},{key:"refresh",value:function(t,e){r.applyDiffToElement(r.diff("",t.getAttribute("modifier")||""),t,e)}
/**
       * @param {HTMLElement} element
       * @param {Object} scheme
       */},{key:"initModifier",value:function(t,e){var n=t.getAttribute("modifier");"string"==typeof n&&r.applyDiffToElement({removed:[],added:r.split(n)},t,e)}},{key:"split",value:function(t){return"string"!=typeof t?[]:t.trim().split(/ +/).filter(function(t){return""!==t})}
/**
       * Add modifier token to an element.
       */},{key:"addModifier",value:function(t,e){var n;t.hasAttribute("modifier")?-1==(n=r.split(t.getAttribute("modifier"))).indexOf(e)&&(n.push(e),t.setAttribute("modifier",n.join(" "))):t.setAttribute("modifier",e)}
/**
       * Remove modifier token from an element.
       */},{key:"removeModifier",value:function(t,e){var n;t.hasAttribute("modifier")&&-1!==(e=(n=r.split(t.getAttribute("modifier"))).indexOf(e))&&(n.splice(e,1),t.setAttribute("modifier",n.join(" ")))}}]),r}(),Dt=function(t,e){return t.substr(0,e.length)===e},Nt=function(t,e){return t.substr(t.length-e.length,e.length)===e},Bt=function(t){return t.slice(1,-1)},Rt=function(t){return Dt(t,"'")&&Nt(t,"'")||Dt(t,'"')&&Nt(t,'"')},Ht=function(t,e,n){throw new Error("Unexpected token '"+t+"' at position "+(n.length-e.length-1)+" in string: '"+n+"'")},qt=function(t,e,n){return"true"===t||"false"===t?"true"===t:Rt(t)?Bt(t):isNaN(t)?Ct(t)?St(Bt(t)):At(t)?xt(Bt(t)):void Ht(t,e,n):+t},zt=function(t){var e=(t=t.trim()).length;if(":"===t[0]||","===t[0])e=1;else if("{"===t[0]||"["===t[0]){for(var n=t.charCodeAt(0),i=1,o=1;o<t.length;o++)if(t.charCodeAt(o)===n)i++;else if(t.charCodeAt(o)===n+2&&0===--i){e=o+1;break}}else if("'"===t[0]||'"'===t[0]){for(var a=1;a<t.length;a++)if(t[a]===t[0]){e=a+1;break}}else for(var r=1;r<t.length;r++)if(-1!==[" ",",",":"].indexOf(t[r])){e=r;break}return t.slice(0,e)},_={},Ft="[Onsen UI]";_.globals={fabOffset:0,errorPrefix:Ft,supportsPassive:!1},r._runOnActualPlatform(function(){_.globals.actualMobileOS=r.getMobileOS(),_.globals.isWKWebView=r.isWKWebView()});try{var jt=Object.defineProperty({},"passive",{get:function(){_.globals.supportsPassive=!0}// eslint-disable-line getter-return
});window.addEventListener("testPassive",null,jt),window.removeEventListener("testPassive",null,jt)}catch(t){}
/**
   * @param {Element} el Target
   * @param {String} name Event name
   * @param {Function} handler Event handler
   * @param {Object} [opt] Event options (passive, capture...)
   * @param {Boolean} [isGD] If comes from GestureDetector. Just for testing.
   */_.addEventListener=function(t,e,n,i,o){t.addEventListener(e,n,_.globals.supportsPassive?i:(i||{}).capture)},_.removeEventListener=function(t,e,n,i,o){t.removeEventListener(e,n,_.globals.supportsPassive?i:(i||{}).capture)},
/**
   * @param {String/Function} query dot class name or node name or matcher function.
   * @return {Function}
   */
_.prepareQuery=function(e){return e instanceof Function?e:function(t){return _.match(t,e)}},
/**
   * @param {Element} e
   * @param {String/Function} s CSS Selector.
   * @return {Boolean}
   */
_.match=function(t,e){return(t.matches||t.webkitMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector).call(t,e)},
/**
   * @param {Element} element
   * @param {String/Function} query dot class name or node name or matcher function.
   * @return {HTMLElement/null}
   */
_.findChild=function(t,e){
// Caution: `element.children` is `undefined` in some environments if `element` is `svg`
for(var n=_.prepareQuery(e),i=0;i<t.childNodes.length;i++){var o=t.childNodes[i];if(o.nodeType===Node.ELEMENT_NODE&&n(o))return o}return null},
/**
   * @param {Element} element
   * @param {String/Function} query dot class name or node name or matcher function.
   * @return {HTMLElement/null}
   */
_.findParent=function(t,e,n){for(var i=_.prepareQuery(e),o=t.parentNode;;){if(!o||o===document||o instanceof DocumentFragment||n&&n(o))return null;if(i(o))return o;o=o.parentNode}},
/**
   * @param {Element} element
   * @return {boolean}
   */
_.isAttached=function(t){return document.body.contains(t)},
/**
   * @param {Element} element
   * @return {boolean}
   */
_.hasAnyComponentAsParent=function(t){for(;t&&document.documentElement!==t;)if((t=t.parentNode)&&t.nodeName.toLowerCase().match(/(ons-navigator|ons-tabbar|ons-modal)/))return!0;return!1},
/**
   * @param {Object} element
   * @return {Array}
   */
_.getAllChildNodes=function(t){var e;return(e=[t]).concat.apply(e,m(Array.from(t.children).map(function(t){return _.getAllChildNodes(t)})))},
/**
   * @param {Element} element
   * @return {boolean}
   */
_.isPageControl=function(t){return t.nodeName.match(/^ons-(navigator|splitter|tabbar|page)$/i)},
/**
   * @param {Element} element
   * @param {String} action to propagate
   */
_.propagateAction=function(t,e){for(var n=0;n<t.childNodes.length;n++){var i=t.childNodes[n];i[e]instanceof Function?i[e]():_.propagateAction(i,e)}},
/**
   * @param {String} string - string to be camelized
   * @return {String} Camelized string
   */
_.camelize=function(t){return t.toLowerCase().replace(/-([a-z])/g,function(t,e){return e.toUpperCase()})},
/**
   * @param {String} string - string to be hyphenated
   * @return {String} Hyphenated string
   */
_.hyphenate=function(t){return t.replace(/([a-zA-Z])([A-Z])/g,"$1-$2").toLowerCase()},
/**
   * @param {String} selector - tag and class only
   * @param {Object} style
   * @param {Element}
   */
_.create=function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},t=t.split("."),n=document.createElement(t.shift()||"div");return t.length&&(n.className=t.join(" ")),u(n,e),n},
/**
   * @param {String} html
   * @return {Element}
   */
_.createElement=function(t){var e=document.createElement("div"),t=(t instanceof DocumentFragment?e.appendChild(document.importNode(t,!0)):e.innerHTML=t.trim(),1<e.children.length&&_.throw("HTML template must contain a single root element"),e.children[0]);return e.children[0].remove(),t},
/**
   * @param {String} html
   * @return {HTMLFragment}
   */
_.createFragment=function(t){var e=document.createElement("template");return e.innerHTML=t,document.importNode(e.content,!0)},
/*
   * @param {Object} dst Destination object.
   * @param {...Object} src Source object(s).
   * @returns {Object} Reference to `dst`.
   */
_.extend=function(t){for(var e=arguments.length,n=new Array(1<e?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];for(var o=0;o<n.length;o++)if(n[o])for(var a=Object.keys(n[o]),r=0;r<a.length;r++){var s=a[r];t[s]=n[o][s]}return t},
/**
   * @param {Object} arrayLike
   * @return {Array}
   */
_.arrayFrom=function(t){return Array.prototype.slice.apply(t)},
/**
   * @param {String} jsonString
   * @param {Object} [failSafe]
   * @return {Object}
   */
_.parseJSONObjectSafely=function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};try{var n=JSON.parse(""+t);if("object"===o(n)&&null!==n)return n}catch(t){}return e},
/**
   * @param {String} path - path such as 'myApp.controllers.data.loadData'
   * @return {Any} - whatever is located at that path
   */
_.findFromPath=function(t){t=t.split(".");for(var e,n=window;e=t.shift();)
// eslint-disable-line no-cond-assign
n=n[e];return n},
/**
   * @param {HTMLElement} container - Page or page-container that implements 'topPage'
   * @return {HTMLElement|null} - Visible page element or null if not found.
   */
_.getTopPage=function(t){return t&&("ons-page"===t.tagName.toLowerCase()?t:t.topPage)||null},
/**
   * @param {HTMLElement} container - Element where the search begins
   * @return {HTMLElement|null} - Page element that contains the visible toolbar or null.
   */
_.findToolbarPage=function(t){var e=_.getTopPage(t);if(e){if(e._canAnimateToolbar())return e;for(var n=0;n<e._contentElement.children.length;n++){var i=_.getTopPage(e._contentElement.children[n]);if(i&&!/ons-tabbar/i.test(e._contentElement.children[n].tagName))return _.findToolbarPage(i)}}return null},
/**
   * @param {Element} element
   * @param {String} eventName
   * @param {Object} [detail]
   * @return {CustomEvent}
   */
_.triggerElementEvent=function(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},i=new CustomEvent(e,{bubbles:!0,cancelable:!0,detail:n});return Object.keys(n).forEach(function(t){i[t]=n[t]}),t.dispatchEvent(i),i},
/**
   * @param {Element} target
   * @param {String} modifierName
   * @return {Boolean}
   */
_.hasModifier=function(t,e){return!!t.hasAttribute("modifier")&&RegExp("(^|\\s+)".concat(e,"($|\\s+)"),"i").test(t.getAttribute("modifier"))},
/**
   * @param {Element} target
   * @param {String} modifierName
   * @param {Object} options.autoStyle Maps the modifierName to the corresponding styled modifier.
   * @param {Object} options.forceAutoStyle Ignores platform limitation.
   * @return {Boolean} Whether it was added or not.
   */
_.addModifier=function(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};return n.autoStyle&&(e=g.mapModifier(e,t,n.forceAutoStyle)),!_.hasModifier(t,e)&&(t.setAttribute("modifier",((t.getAttribute("modifier")||"")+" "+e).trim()),!0)},
/**
   * @param {Element} target
   * @param {String} modifierName
   * @param {Object} options.autoStyle Maps the modifierName to the corresponding styled modifier.
   * @param {Object} options.forceAutoStyle Ignores platform limitation.
   * @return {Boolean} Whether it was found or not.
   */
_.removeModifier=function(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};return n.autoStyle&&(e=g.mapModifier(e,t,n.forceAutoStyle)),!(!t.getAttribute("modifier")||!_.hasModifier(t,e)||((n=t.getAttribute("modifier").split(/\s+/).filter(function(t){return t&&t!==e})).length?t.setAttribute("modifier",n.join(" ")):t.removeAttribute("modifier"),0))},
/**
   * @param {Element} target
   * @param {String} modifierName
   * @param {Boolean} options.force Forces modifier to be added or removed.
   * @param {Object} options.autoStyle Maps the modifierName to the corresponding styled modifier.
   * @param {Boolean} options.forceAutoStyle Ignores platform limitation.
   * @return {Boolean} Whether it was found or not.
   */
_.toggleModifier=function(){var t=2<arguments.length?arguments.length<=2?void 0:arguments[2]:{},t="boolean"==typeof t?t:t.force;(("boolean"==typeof t?t:!_.hasModifier.apply(_,arguments))?_.addModifier:_.removeModifier).apply(_,arguments)},
/**
   * @param {Element} el
   * @param {String} defaultClass
   * @param {Object} scheme
   */
_.restoreClass=function(e,t,n){t.split(/\s+/).forEach(function(t){return""!==t&&!e.classList.contains(t)&&e.classList.add(t)}),e.hasAttribute("modifier")&&v.refresh(e,n)},
// TODO: FIX
_.updateParentPosition=function(t){!t._parentUpdated&&t.parentElement&&("static"===window.getComputedStyle(t.parentElement).getPropertyValue("position")&&(t.parentElement.style.position="relative"),t._parentUpdated=!0)},_.toggleAttribute=function(t,e,n){n?t.setAttribute(e,"boolean"==typeof n?"":n):t.removeAttribute(e)},_.bindListeners=function(n,t){t.forEach(function(t){var e=t.replace(/^_[a-z]/,"_bound"+t[1].toUpperCase());n[e]=n[e]||n[t].bind(n)})},_.each=function(e,n){return Object.keys(e).forEach(function(t){return n(t,e[t])})},
/**
   * @param {Element} target
   * @param {boolean} hasRipple
   * @param {Object} attrs
   */
_.updateRipple=function(t,e){var n,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},o=(void 0===e&&(e=t.hasAttribute("ripple")),_.findChild(t,"ons-ripple"));e?o||(n=document.createElement("ons-ripple"),Object.keys(i).forEach(function(t){return n.setAttribute(t,i[t])}),t.insertBefore(n,t.firstChild)):o&&o.remove()},
/**
   * @param {String}
   * @return {Object}
   */
_.animationOptionsParse=function(t){if(t=t.trim(),Ct(t))return St(Bt(t));if(At(t))return xt(Bt(t));throw new Error("Provided string must be object or array like: "+t)},
/**
   * @param {*} value
   */
_.isInteger=function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t},
/**
   * @return {Object} Deferred promise.
   */
_.defer=function(){var n={};return n.promise=new Promise(function(t,e){n.resolve=t,n.reject=e}),n},
/**
   * Show warnings when they are enabled.
   *
   * @param {*} arguments to console.warn
   */
_.warn=function(){if(!k.config.warningsDisabled){for(var t,e=arguments.length,n=new Array(e),i=0;i<e;i++)n[i]=arguments[i];(t=console).warn.apply(t,[Ft].concat(n))}},_.throw=function(t){throw new Error("".concat(Ft," ").concat(t))},_.throwAbstract=function(){return _.throw("Cannot instantiate abstract class")},_.throwMember=function(){return _.throw("Class member must be implemented")},_.throwPageLoader=function(){return _.throw("First parameter should be an instance of PageLoader")},_.throwAnimator=function(t){return _.throw('"Animator" param must inherit '.concat(t,"Animator"))};function Vt(t){return t.cancelable&&t.preventDefault()}function Wt(t){b.throw("In PageAttributeExpression: ".concat(t))}
/**
   * Prevent scrolling while draging horizontally on iOS.
   *
   * @param {gd} GestureDetector instance
   */
_.iosPreventScroll=function(n){var t;"ios"===_.globals.actualMobileOS&&(t=function t(e){n.off("touchmove",Vt),n.off("dragend",t)},n.on("touchmove",Vt),n.on("dragend",t))},
/**
   * Prevents scroll in underlying pages on iOS. See #2220 #2274 #1949
   *
   * @param {el} HTMLElement that prevents the events
   * @param {add} Boolean Add or remove event listeners
   */
_.iosPageScrollFix=function(t){
// Full fix - May cause issues with UIWebView's momentum scroll
"ios"===_.globals.actualMobileOS&&(document.body.classList.toggle("ons-ios-scroll",t),// Allows custom and localized fixes (#2274)
document.body.classList.toggle("ons-ios-scroll-fix",t))},
/**
   * Distance and deltaTime filter some weird dragstart events that are not fired immediately.
   *
   * @param {event}
   */
_.isValidGesture=function(t){return void 0!==t.gesture&&(t.gesture.distance<=15||t.gesture.deltaTime<=100)},_.checkMissingImport=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e.forEach(function(t){i[t]||_.throw("Ons".concat(t," is required but was not imported (Custom Elements)"))})},
/**
   * Defines a boolean property that reflects an attribute of the same name for a
   * given list of attributes.
   */
_.defineBooleanProperties=function(n,t){t.forEach(function(e){var t=_.camelize(e);Object.defineProperty(n.prototype,t,{get:function(){return this.hasAttribute(e)},set:function(t){t?this.setAttribute(e,""):this.removeAttribute(e)},configurable:!0})})},
/**
   * Defines a string property that reflects an attribute of the same name for a
   * given list of attributes.
   */
_.defineStringProperties=function(n,t){t.forEach(function(e){var t=_.camelize(e);Object.defineProperty(n.prototype,t,{get:function(){return this.getAttribute(e)},set:function(t){null==t?this.removeAttribute(e):this.setAttribute(e,t)},configurable:!0})})},
/**
   * Makes a property for a listener e.g. onClick.
   *
   * Returns `onConnected` function which should be called in the element's
   * connectedCallback, and `onDisconnected` function which should be called in
   * the element's disconnectedCallback.
   */
_.defineListenerProperty=function(e,n){var i,t=_.camelize(n),o="on"+t.charAt(0).toUpperCase()+t.slice(1);return Object.defineProperty(e,o,{get:function(){return i},set:function(t){e.isConnected&&(i&&e.removeEventListener(n,i),e.addEventListener(n,t)),i=t},configurable:!0}),{onConnected:function(){e[o]&&e.addEventListener(n,e[o])},onDisconnected:function(){e[o]&&e.removeEventListener(n,e[o])}}};var Xt,b=_,Ut={_variables:{},
/**
     * Define a variable.
     *
     * @param {String} name Name of the variable
     * @param {String|Function} value Value of the variable. Can be a string or a function. The function must return a string.
     * @param {Boolean} overwrite If this value is false, an error will be thrown when trying to define a variable that has already been defined.
     */
defineVariable:function(t,e){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2];"string"!=typeof t?Wt("Variable name must be a string"):"string"!=typeof e&&"function"!=typeof e?Wt("Variable value must be a string or a function"):Object.prototype.hasOwnProperty.call(this._variables,t)&&!n&&Wt('"'.concat(t,'" is already defined')),this._variables[t]=e},
/**
     * Get a variable.
     *
     * @param {String} name Name of the variable.
     * @return {String|Function|null}
     */
getVariable:function(t){return Object.prototype.hasOwnProperty.call(this._variables,t)?this._variables[t]:null},
/**
     * Remove a variable.
     *
     * @param {String} name Name of the varaible.
     */
removeVariable:function(t){delete this._variables[t]},
/**
     * Get all variables.
     *
     * @return {Object}
     */
getAllVariables:function(){return this._variables},_parsePart:function(t){var e=!1,n=0,i=[];0===t.length&&Wt("Unable to parse empty string");for(var o,a=0;a<t.length;a++)"$"===(o=t.charAt(a))&&"{"===t.charAt(a+1)?(e&&Wt("Nested interpolation not supported"),0<t.substring(n,a).length&&i.push(t.substring(n,a)),n=a,e=!0):"}"===o&&(e||Wt("} must be preceeded by ${"),0<t.substring(n,a+1).length&&i.push(t.substring(n,a+1)),n=a+1,e=!1);return e&&Wt("Unterminated interpolation"),i.push(t.substring(n,t.length)),i},_replaceToken:function(t){var e,n=t.match(/^\${(.*?)}$/);return n?(n=n[1].trim(),null!==(e=this.getVariable(n))?"string"==typeof e?e:("string"!=typeof(e=e())&&Wt("Must return a string"),e):void Wt('Variable "'.concat(n,'" does not exist'))):t},_replaceTokens:function(t){return t.map(this._replaceToken.bind(this))},_parseExpression:function(t){return t.split(",").map(function(t){return t.trim()}).map(this._parsePart.bind(this)).map(this._replaceTokens.bind(this)).map(function(t){return t.join("")})},
/**
     * Evaluate an expression.
     *
     * @param {String} expression An page attribute expression.
     * @return {Array}
     */
evaluate:function(t){return t?this._parseExpression(t):[]}},y=(
// Define default variables.
Ut.defineVariable("mobileOS",r.getMobileOS()),Ut.defineVariable("iOSDevice",r.getIOSDevice()),Ut.defineVariable("runtime",function(){return r.isWebView()?"cordova":"browser"}),{}),k=(y.config={autoStatusBarFill:!0,animationsDisabled:!1,warningsDisabled:!1},y.nullElement=window.document.createElement("div"),
/**
   * @return {Boolean}
   */
y.isEnabledAutoStatusBarFill=function(){return!!y.config.autoStatusBarFill},
/**
   * @param {String} html
   * @return {String}
   */
y.normalizePageHTML=function(t){return(""+t).trim()},y.waitDOMContentLoaded=function(e){"loading"===window.document.readyState||"uninitialized"==window.document.readyState?window.document.addEventListener("DOMContentLoaded",function t(){e(),window.document.removeEventListener("DOMContentLoaded",t)}):setImmediate(e)},y.autoStatusBarFill=function(t){function e(){y.shouldFillStatusBar()&&t(),document.removeEventListener("deviceready",e)}"object"===("undefined"==typeof device?"undefined":o(device))?document.addEventListener("deviceready",e):-1===["complete","interactive"].indexOf(document.readyState)?y.waitDOMContentLoaded(e):e()},y.shouldFillStatusBar=function(){return y.isEnabledAutoStatusBarFill()&&(r.isWebView()&&(r.isIOS7above()||r.isIPadOS())&&!r.isIPhoneX()||document.body.querySelector(".ons-status-bar-mock.ios"))},y.templateStore={_storage:{},
/**
     * @param {String} key
     * @return {String/null} template
     */
get:function(t){return y.templateStore._storage[t]||null},
/**
     * @param {String} key
     * @param {String} template
     */
set:function(t,e){y.templateStore._storage[t]=e}},
/**
   * @param {String} page
   * @return {Promise}
   */
y.getTemplateHTMLAsync=function(o){return new Promise(function(n,i){y.waitDOMContentLoaded(function(){var e,t=y.templateStore.get(o);return t?t instanceof DocumentFragment?n(t):(t="string"==typeof t?t:t[1],n(y.normalizePageHTML(t))):(t=window.document.getElementById(o))?(t=t.textContent||t.content,n(t)):((e=new XMLHttpRequest).open("GET",o,!0),e.onload=function(){var t=e.responseText;400<=e.status&&e.status<600?404===e.status?i(404):i(t):(t=b.createFragment(t),b.arrayFrom(t.querySelectorAll("script")).forEach(function(t){var e=document.createElement("script");e.type=t.type||"text/javascript",e.appendChild(document.createTextNode(t.text||t.textContent||t.innerHTML)),t.parentNode.replaceChild(e,t)}),y.templateStore.set(o,t),n(t))},e.onerror=function(){b.throw("Page template not found: ".concat(o))},void e.send(null))})})},
/**
   * @param {String} page
   * @return {Promise}
   */
y.getPageHTMLAsync=function(t){var n=Ut.evaluate(t);return function e(t){return"string"!=typeof t?Promise.reject("Must specify a page."):y.getTemplateHTMLAsync(t).catch(function(t){return 0===n.length?Promise.reject(t):e(n.shift())})}(n.shift())},y),w=function(){
/**
     * @param {Object} opts
     * @param {Object} opts.animators The dictionary for animator classes
     * @param {Function} opts.baseClass The base class of animators
     * @param {String} [opts.baseClassName] The name of the base class of animators
     * @param {String} [opts.defaultAnimation] The default animation name
     * @param {Object} [opts.defaultAnimationOptions] The default animation options
     */
function e(t){l(this,e),this._animators=t.animators,this._baseClass=t.baseClass,this._baseClassName=t.baseClassName||t.baseClass.name,this._animation=t.defaultAnimation||"default",this._animationOptions=t.defaultAnimationOptions||{},this._animators[this._animation]||b.throw("No such animation: "+this._animation)}
/**
     * @param {String} jsonString
     * @return {Object/null}
     */return c(e,[{key:"setAnimationOptions",value:
/**
       * @param {Object} options
       */
function(t){this._animationOptions=t}
/**
       * @param {Object} options
       * @param {String} [options.animation] The animation name
       * @param {Object} [options.animationOptions] The animation options
       * @param {Object} defaultAnimator The default animator instance
       * @return {Object} An animator instance
       */},{key:"newAnimator",value:function(){var t,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},n=1<arguments.length?arguments[1]:void 0,i=null;return e.animation instanceof this._baseClass?e.animation:(t=null,!(t="string"==typeof e.animation?this._animators[e.animation]:t)&&n?i=n:"function"==typeof(i=new(t=t||this._animators[this._animation])(n=b.extend({},this._animationOptions,e.animationOptions||{},k.config.animationsDisabled?{duration:0,delay:0}:{})))&&(i=new i(n)),i instanceof this._baseClass||b.throw('"animator" is not an instance of '.concat(this._baseClassName)),i)}}],[{key:"parseAnimationOptionsString",value:function(e){try{if("string"==typeof e){var t=b.animationOptionsParse(e);if("object"===o(t)&&null!==t)return t;console.error('"animation-options" attribute must be a JSON object string: '+e)}return{}}catch(t){return console.error('"animation-options" attribute must be a JSON object string: '+e),{}}}}]),e}(),Yt={_ready:!1,_domContentLoaded:!1,_onDOMContentLoaded:function(){Yt._domContentLoaded=!0,r.isWebView()?window.document.addEventListener("deviceready",function(){Yt._ready=!0},!1):Yt._ready=!0},addBackButtonListener:function(t){if(!this._domContentLoaded)throw new Error("This method is available after DOMContentLoaded");this._ready?window.document.addEventListener("backbutton",t,!1):window.document.addEventListener("deviceready",function(){window.document.addEventListener("backbutton",t,!1)})},removeBackButtonListener:function(t){if(!this._domContentLoaded)throw new Error("This method is available after DOMContentLoaded");this._ready?window.document.removeEventListener("backbutton",t,!1):window.document.addEventListener("deviceready",function(){window.document.removeEventListener("backbutton",t,!1)})}},E=(window.addEventListener("DOMContentLoaded",function(){return Yt._onDOMContentLoaded()},!1),{_store:{},_genId:(Xt=0,function(){return Xt++}),set:function(t,e){t.dataset.deviceBackButtonHandlerId&&this.remove(t);t=t.dataset.deviceBackButtonHandlerId=E._genId();this._store[t]=e},remove:function(t){t.dataset.deviceBackButtonHandlerId&&(delete this._store[t.dataset.deviceBackButtonHandlerId],delete t.dataset.deviceBackButtonHandlerId)},get:function(t){if(t.dataset.deviceBackButtonHandlerId){t=t.dataset.deviceBackButtonHandlerId;if(this._store[t])return this._store[t];throw new Error}},has:function(t){return!!t.dataset&&(t=t.dataset.deviceBackButtonHandlerId,!!this._store[t])}}),$t=new(function(){function t(){l(this,t),this._isEnabled=!1,this._boundCallback=this._callback.bind(this)}
/**
     * Enable to handle 'backbutton' events.
     */return c(t,[{key:"enable",value:function(){this._isEnabled||(Yt.addBackButtonListener(this._boundCallback),this._isEnabled=!0)}
/**
       * Disable to handle 'backbutton' events.
       */},{key:"disable",value:function(){this._isEnabled&&(Yt.removeBackButtonListener(this._boundCallback),this._isEnabled=!1)}
/**
       * Fire a 'backbutton' event manually.
       */},{key:"fireDeviceBackButtonEvent",value:function(){var t=document.createEvent("Event");t.initEvent("backbutton",!0,!0),document.dispatchEvent(t)}},{key:"_callback",value:function(){this._dispatchDeviceBackButtonEvent()}
/**
       * @param {HTMLElement} element
       * @param {Function} callback
       */},{key:"createHandler",value:function(t,e){if(!(t instanceof HTMLElement))throw new Error("element must be an instance of HTMLElement");if(e instanceof Function)return(e={_callback:e,_element:t,disable:function(){E.remove(t)},setListener:function(t){this._callback=t},enable:function(){E.set(t,this)},isEnabled:function(){return E.get(t)===this},destroy:function(){E.remove(t),this._callback=this._element=null}}).enable(),e;throw new Error("callback must be an instance of Function")}},{key:"_dispatchDeviceBackButtonEvent",value:function(){var t=this._captureTree(),t=this._findHandlerLeafElement(t),n=E.get(t);n._callback(function e(t){return{_element:t,callParentHandler:function(){for(var t=this._element.parentNode;t;){if(n=E.get(t))return n._callback(e(t));t=t.parentNode}}}}(t))}
/**
       * @return {Object}
       */},{key:"_captureTree",value:function(){return function e(t){var n={element:t,children:Array.prototype.concat.apply([],a(t.children).map(function(t){return"none"!==t.style.display&&!1!==t._isShown&&(0!==t.children.length||E.has(t))&&(0!==(t=e(t)).children.length||E.has(t.element))?[t]:[]}))};if(!E.has(n.element))for(var i=0;i<n.children.length;i++){var o=n.children[i];if(E.has(o.element))return o}return n}(document.body);function a(t){for(var e=[],n=0;n<t.length;n++)e.push(t[n]);return e}}
/**
       * @param {Object} tree
       * @return {HTMLElement}
       */},{key:"_findHandlerLeafElement",value:function(t){return function t(e){if(0===e.children.length)return e.element;if(1===e.children.length)return t(e.children[0]);return e.children.map(function(t){return t.element}).reduce(function(t,e){if(!t)return e;var n=parseInt(window.getComputedStyle(t,"").zIndex,10),i=parseInt(window.getComputedStyle(e,"").zIndex,10);if(isNaN(n)||isNaN(i))throw new Error("Capturing backbutton-handler is failure.");return i<n?t:e},null)}(t)}}]),t}());
/*
  Copyright 2013-2015 ASIAL CORPORATION

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  */
k.AnimatorFactory=w,k.ModifierUtil=v,k.dbbDispatcher=$t;function C(t,e){if(!(this instanceof C))return new C(t,e);if(t instanceof HTMLElement)this.elements=[t];else{if("[object Array]"!==Object.prototype.toString.call(t))throw new Error("First argument must be an array or an instance of HTMLElement.");this.elements=t}this.defaults=e,this.transitionQueue=[],this.lastStyleAttributeDict=[]}function A(t,e){return new A.Instance(t,e||{})}
/*
  Copyright 2013-2015 ASIAL CORPORATION

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  */
var Gt,Kt,Jt,Qt,S,x,Zt,te,ee,ne,ie,oe,ae,re,se,le,P={
// capitalize string
capitalize:function(t){return t.charAt(0).toUpperCase()+t.slice(1)},
/**
   * @param {Object} params
   * @param {String} params.property
   * @param {Float} params.duration
   * @param {String} params.timing
   */
buildTransitionValue:function(e){return e.property=e.property||"all",e.duration=e.duration||.4,e.timing=e.timing||"linear",e.property.split(/ +/).map(function(t){return t+" "+e.duration+"s "+e.timing}).join(", ")},
/**
   * Add an event handler on "transitionend" event.
   */
onceOnTransitionEnd:function(e,n){var i,o;return e?(i=function(){P._transitionEndEvents.forEach(function(t){e.removeEventListener(t,o,!1)})},o=function(t){e==t.target&&(t.stopPropagation(),i(),n())},P._transitionEndEvents.forEach(function(t){e.addEventListener(t,o,!1)}),i):function(){}}},ce=(
/**
   * default settings.
   * more settings are defined per gesture at `/gestures`. Each gesture can be disabled/enabled
   * by setting it's name (like `swipe`) to false.
   * You can set the defaults for all instances by changing this object before creating an instance.
   * @example
   * ````
   *  GestureDetector.defaults.drag = false;
   *  GestureDetector.defaults.behavior.touchAction = 'pan-y';
   *  delete GestureDetector.defaults.behavior.userSelect;
   * ````
   * @property defaults
   * @type {Object}
   */
P._transitionEndEvents="ontransitionend"in window?["transitionend"]:"onwebkittransitionend"in window?["webkitTransitionEnd"]:"webkit"===P.vendorPrefix||"o"===P.vendorPrefix||"moz"===P.vendorPrefix||"ms"===P.vendorPrefix?[P.vendorPrefix+"TransitionEnd","transitionend"]:[],P._cssPropertyDict=function(){for(var t=window.getComputedStyle(document.documentElement,""),e={},n="A".charCodeAt(0),i="z".charCodeAt(0),o=function(t){return t.substr(1).toUpperCase()},a=0;a<t.length;a++){var r=t[a].replace(/^[-]+/,"").replace(/[-][a-z]/g,o).replace(/^moz/,"Moz");n<=r.charCodeAt(0)&&i>=r.charCodeAt(0)&&"cssText"!==r&&"parentText"!==r&&(e[r]=!0)}return e}(),P.hasCssProperty=function(t){return t in P._cssPropertyDict},
/**
   * Vendor prefix for css property.
   */
P.vendorPrefix=(t=window.getComputedStyle(document.documentElement,""),(Array.prototype.slice.call(t).join("").match(/-(moz|webkit|ms)-/)||""===t.OLink&&["","o"])[1]),P.forceLayoutAtOnce=function(t,e){this.batchImmediate(function(){t.forEach(function(t){
// force layout
t.offsetHeight}),e()})},P.batchImmediate=(Gt=[],function(t){0===Gt.length&&setImmediate(function(){var t=Gt.slice(0);Gt=[],t.forEach(function(t){t()})}),Gt.push(t)}),P.batchAnimationFrame=(Kt=[],Jt=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){setTimeout(t,1e3/60)},function(t){0===Kt.length&&Jt(function(){var t=Kt.slice(0);Kt=[],t.forEach(function(t){t()})}),Kt.push(t)}),P.transitionPropertyName=function(){if(P.hasCssProperty("transitionDuration"))return"transition";if(P.hasCssProperty(P.vendorPrefix+"TransitionDuration"))return P.vendorPrefix+"Transition";throw new Error("Invalid state")}(),C.prototype={
/**
     * @property {Array}
     */
transitionQueue:void 0,
/**
     * @property {Array}
     */
elements:void 0,
/**
     * @property {Object}
     */
defaults:void 0,
/**
     * Start animation sequence with passed animations.
     *
     * @param {Function} callback
     */
play:function(e){return"function"==typeof e&&this.transitionQueue.push(function(t){e(),t()}),this.startAnimation(),this},
/**
     * Most of the animations follow this default process.
     *
     * @param {from} css or options object containing css
     * @param {to} css or options object containing css
     * @param {delay} delay to wait
     */
default:function(t,e,n){function i(t,e,n){return void 0!==t.duration&&(e=t.duration),void 0!==t.timing&&(n=t.timing),{css:t.css||t,duration:e,timing:n}}return this.saveStyle().queue(i(t,0,this.defaults.timing)).wait(void 0===n?this.defaults.delay:n).queue(i(e,this.defaults.duration,this.defaults.timing)).restoreStyle()},
/**
     * Queue transition animations or other function.
     *
     * e.g. animit(elt).queue({color: 'red'})
     * e.g. animit(elt).queue({color: 'red'}, {duration: 0.4})
     * e.g. animit(elt).queue({css: {color: 'red'}, duration: 0.2})
     *
     * @param {Object|Animit.Transition|Function} transition
     * @param {Object} [options]
     */
queue:function(t,e){var n=this.transitionQueue;if(t&&e&&(e.css=t,t=new C.Transition(e)),(t=t instanceof Function||t instanceof C.Transition?t:t.css?new C.Transition(t):new C.Transition({css:t}))instanceof Function)n.push(t);else{if(!(t instanceof C.Transition))throw new Error("Invalid arguments");n.push(t.build())}return this},
/**
     * Queue transition animations.
     *
     * @param {Float} seconds
     */
wait:function(e){return 0<e&&this.transitionQueue.push(function(t){setTimeout(t,1e3*e)}),this},saveStyle:function(){return this.transitionQueue.push(function(t){this.elements.forEach(function(t,e){for(var n=this.lastStyleAttributeDict[e]={},i=0;i<t.style.length;i++)n[t.style[i]]=t.style[t.style[i]]}.bind(this)),t()}.bind(this)),this},
/**
     * Restore element's style.
     *
     * @param {Object} [options]
     * @param {Float} [options.duration]
     * @param {String} [options.timing]
     * @param {String} [options.transition]
     */
restoreStyle:function(a){var r=this;if((a=a||{}).transition&&!a.duration)throw new Error('"options.duration" is required when "options.transition" is enabled.');var s,l=P.transitionPropertyName;return a.transition||a.duration&&0<a.duration?(s=a.transition||"all "+a.duration+"s "+(a.timing||"linear"),this.transitionQueue.push(function(t){function e(){n.forEach(function(t){t.style[l]=""})}var n=this.elements,i=P.onceOnTransitionEnd(n[0],function(){clearTimeout(o),e(),t()}),
// for fail safe.
o=setTimeout(function(){i(),e(),t()},1e3*a.duration*1.4);
// transition and style settings
n.forEach(function(e,t){var n,i=r.lastStyleAttributeDict[t];if(!i)throw new Error("restoreStyle(): The style is not saved. Invoke saveStyle() before.");r.lastStyleAttributeDict[t]=void 0;for(var o=0,a=e.style.length;o<a;o++)n=e.style[o],void 0===i[n]&&(i[n]="");e.style[l]=s,Object.keys(i).forEach(function(t){t!==l&&(e.style[t]=i[t])}),e.style[l]=s})})):this.transitionQueue.push(function(t){
// Clear transition animation settings.
r.elements.forEach(function(e,t){e.style[l]="none";var n=r.lastStyleAttributeDict[t];if(!n)throw new Error("restoreStyle(): The style is not saved. Invoke saveStyle() before.");r.lastStyleAttributeDict[t]=void 0;for(var i=0;i<e.style.length;i++)e.style[i],void 0===n[e.style[i]]&&(n[e.style[i]]="");Object.keys(n).forEach(function(t){e.style[t]=n[t]})}),t()}),this},
/**
     * Start animation sequence.
     */
startAnimation:function(){return this._dequeueTransition(),this},_dequeueTransition:function(){var t=this.transitionQueue.shift();if(this._currentTransition)throw new Error("Current transition exists.");this._currentTransition=t;var e=this,n=!1;t&&t.call(this,function(){if(n)throw new Error("Invalid state: This callback is called twice.");n=!0,e._currentTransition=void 0,e._dequeueTransition()})}},
/**
   * @param {Animit} arguments
   */
C.runAll=function(){for(var t=0;t<arguments.length;t++)arguments[t].play()},(
/**
   * @param {Object} options
   * @param {Float} [options.duration]
   * @param {String} [options.property]
   * @param {String} [options.timing]
   */
C.Transition=function(t){this.options=t||{},this.options.duration=this.options.duration||0,this.options.timing=this.options.timing||"linear",this.options.css=this.options.css||{},this.options.property=this.options.property||"all"}).prototype={
/**
     * @param {HTMLElement} element
     * @return {Function}
     */
build:function(){if(0===Object.keys(this.options.css).length)throw new Error("options.css is required.");i=this.options.css,o={},Object.keys(i).forEach(function(t){var e,n=i[t];P.hasCssProperty(t)?o[t]=n:(e=P.vendorPrefix+P.capitalize(t),P.hasCssProperty(e)?o[e]=n:(o[e]=n,o[t]=n))});var i,o,a,r,s=o;return 0<this.options.duration?(a=P.buildTransitionValue(this.options),r=this,function(t){var e=this.elements,n=1e3*r.options.duration*1.4,i=P.onceOnTransitionEnd(e[0],function(){clearTimeout(o),t()}),o=setTimeout(function(){i(),t()},n);e.forEach(function(e){e.style[P.transitionPropertyName]=a,Object.keys(s).forEach(function(t){e.style[t]=s[t]})})}):this.options.duration<=0?function(t){var e=this.elements;e.forEach(function(e){e.style[P.transitionPropertyName]="",Object.keys(s).forEach(function(t){e.style[t]=s[t]})}),0<e.length?P.forceLayoutAtOnce(e,function(){P.batchAnimationFrame(t)}):P.batchAnimationFrame(t)}:void 0}},A.defaults={behavior:{
// userSelect: 'none', // Also disables selection in `input` children
touchAction:"pan-y",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}},
/**
   * GestureDetector document where the base events are added at
   * @property DOCUMENT
   * @type {HTMLElement}
   * @default window.document
   */
A.DOCUMENT=document,
/**
   * detect support for pointer events
   * @property HAS_POINTEREVENTS
   * @type {Boolean}
   */
A.HAS_POINTEREVENTS=navigator.pointerEnabled||navigator.msPointerEnabled,
/**
   * detect support for touch events
   * @property HAS_TOUCHEVENTS
   * @type {Boolean}
   */
A.HAS_TOUCHEVENTS="ontouchstart"in window,
/**
   * detect mobile browsers
   * @property IS_MOBILE
   * @type {Boolean}
   */
A.IS_MOBILE=/mobile|tablet|ip(ad|hone|od)|android|silk/i.test(navigator.userAgent),
/**
   * detect if we want to support mouseevents at all
   * @property NO_MOUSEEVENTS
   * @type {Boolean}
   */
A.NO_MOUSEEVENTS=A.HAS_TOUCHEVENTS&&A.IS_MOBILE||A.HAS_POINTEREVENTS,
/**
   * interval in which GestureDetector recalculates current velocity/direction/angle in ms
   * @property CALCULATE_INTERVAL
   * @type {Number}
   * @default 25
   */
A.CALCULATE_INTERVAL=25,{}),ue=A.DIRECTION_DOWN="down",de=(A.DIRECTION_LEFT="left",A.DIRECTION_UP="up",A.DIRECTION_RIGHT="right",A.POINTER_MOUSE="mouse"),he=A.POINTER_TOUCH="touch",fe=A.POINTER_PEN="pen",L=A.EVENT_START="start",pe=A.EVENT_MOVE="move",O=A.EVENT_END="end",me=A.EVENT_RELEASE="release",ge=A.EVENT_TOUCH="touch";function ve(t){se.set(t,!0)}function _e(t){var e=le.get(t,[])||[];le.delete(t),e.forEach(function(t){return t()})}function M(e,t
/*
  Copyright 2013-2015 ASIAL CORPORATION

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  */){var n,t=1<arguments.length&&void 0!==t?t:function(){};void 0===se&&(se=new WeakMap,le=new WeakMap),n=e,t=t,le.has(n)||le.set(n,[]),le.get(n).push(t),0<(n=e).childNodes.length&&ve(n),se.has(n)?_e(e):(new MutationObserver(function(t){ve(e),_e(e)}).observe(e,{childList:!0,characterData:!0}),
// failback for elements has empty content.
setImmediate(function(){ve(e),_e(e)}))}
/**
   * if the window events are set...
   * @property READY
   * @writeOnce
   * @type {Boolean}
   * @default false
   */
A.READY=!1,
/**
   * plugins namespace
   * @property plugins
   * @type {Object}
   */
A.plugins=A.plugins||{},
/**
   * gestures namespace
   * see `/gestures` for the definitions
   * @property gestures
   * @type {Object}
   */
A.gestures=A.gestures||{},
/**
   * @module GestureDetector
   *
   * @class Utils
   * @static
   */
S=A.utils={
/**
     * extend method, could also be used for cloning when `dest` is an empty object.
     * changes the dest object
     * @param {Object} dest
     * @param {Object} src
     * @param {Boolean} [merge=false]  do a merge
     * @return {Object} dest
     */
extend:function(t,e,n){for(var i in e)!Object.prototype.hasOwnProperty.call(e,i)||void 0!==t[i]&&n||(t[i]=e[i]);return t},
/**
     * simple addEventListener wrapper
     * @param {HTMLElement} element
     * @param {String} type
     * @param {Function} handler
     */
on:function(t,e,n,i){b.addEventListener(t,e,n,i,!0)},
/**
     * simple removeEventListener wrapper
     * @param {HTMLElement} element
     * @param {String} type
     * @param {Function} handler
     */
off:function(t,e,n,i){b.removeEventListener(t,e,n,i,!0)},
/**
     * forEach over arrays and objects
     * @param {Object|Array} obj
     * @param {Function} iterator
     * @param {any} iterator.item
     * @param {Number} iterator.index
     * @param {Object|Array} iterator.obj the source object
     * @param {Object} context value to use as `this` in the iterator
     */
each:function(t,e,n){var i,o;
// native forEach on arrays
if("forEach"in t)t.forEach(e,n);
// arrays
else if(void 0!==t.length){for(i=0,o=t.length;i<o;i++)if(!1===e.call(n,t[i],i,t))return;
// objects
}else for(i in t)if(Object.prototype.hasOwnProperty.call(t,i)&&!1===e.call(n,t[i],i,t))return},
/**
     * find if a string contains the string using indexOf
     * @param {String} src
     * @param {String} find
     * @return {Boolean} found
     */
inStr:function(t,e){return-1<t.indexOf(e)},
/**
     * find if a array contains the object using indexOf or a simple polyfill
     * @param {String} src
     * @param {String} find
     * @return {Boolean|Number} false when not found, or the index
     */
inArray:function(e,n,t){if(t){for(var i=0,o=e.length;i<o;i++)
// Array.findIndex
if(Object.keys(n).every(function(t){return e[i][t]===n[t]}))return i}else{if(e.indexOf)return e.indexOf(n);for(i=0,o=e.length;i<o;i++)if(e[i]===n)return i}return-1},
/**
     * convert an array-like object (`arguments`, `touchlist`) to an array
     * @param {Object} obj
     * @return {Array}
     */
toArray:function(t){return Array.prototype.slice.call(t,0)},
/**
     * find if a node is in the given parent
     * @param {HTMLElement} node
     * @param {HTMLElement} parent
     * @return {Boolean} found
     */
hasParent:function(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1},
/**
     * get the center of all the touches
     * @param {Array} touches
     * @return {Object} center contains `pageX`, `pageY`, `clientX` and `clientY` properties
     */
getCenter:function(t){var e=[],n=[],i=[],o=[],a=Math.min,r=Math.max;
// no need to loop when only one touch
return 1===t.length?{pageX:t[0].pageX,pageY:t[0].pageY,clientX:t[0].clientX,clientY:t[0].clientY}:(S.each(t,function(t){e.push(t.pageX),n.push(t.pageY),i.push(t.clientX),o.push(t.clientY)}),{pageX:(a.apply(Math,e)+r.apply(Math,e))/2,pageY:(a.apply(Math,n)+r.apply(Math,n))/2,clientX:(a.apply(Math,i)+r.apply(Math,i))/2,clientY:(a.apply(Math,o)+r.apply(Math,o))/2})},
/**
     * calculate the velocity between two points. unit is in px per ms.
     * @param {Number} deltaTime
     * @param {Number} deltaX
     * @param {Number} deltaY
     * @return {Object} velocity `x` and `y`
     */
getVelocity:function(t,e,n){return{x:Math.abs(e/t)||0,y:Math.abs(n/t)||0}},
/**
     * calculate the angle between two coordinates
     * @param {Touch} touch1
     * @param {Touch} touch2
     * @return {Number} angle
     */
getAngle:function(t,e){var n=e.clientX-t.clientX,e=e.clientY-t.clientY;return 180*Math.atan2(e,n)/Math.PI},
/**
     * do a small comparison to get the direction between two touches.
     * @param {Touch} touch1
     * @param {Touch} touch2
     * @return {String} direction matches `DIRECTION_LEFT|RIGHT|UP|DOWN`
     */
getDirection:function(t,e){var n=Math.abs(t.clientX-e.clientX);return Math.abs(t.clientY-e.clientY)<=n?0<t.clientX-e.clientX?"left":"right":0<t.clientY-e.clientY?"up":ue},
/**
     * calculate the distance between two touches
     * @param {Touch}touch1
     * @param {Touch} touch2
     * @return {Number} distance
     */
getDistance:function(t,e){var n=e.clientX-t.clientX,e=e.clientY-t.clientY;return Math.sqrt(n*n+e*e)},
/**
     * calculate the scale factor between two touchLists
     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
     * @param {Array} start array of touches
     * @param {Array} end array of touches
     * @return {Number} scale
     */
getScale:function(t,e){
// need two fingers...
return 2<=t.length&&2<=e.length?this.getDistance(e[0],e[1])/this.getDistance(t[0],t[1]):1},
/**
     * calculate the rotation degrees between two touchLists
     * @param {Array} start array of touches
     * @param {Array} end array of touches
     * @return {Number} rotation
     */
getRotation:function(t,e){
// need two fingers
return 2<=t.length&&2<=e.length?this.getAngle(e[1],e[0])-this.getAngle(t[1],t[0]):0},
/**
     * find out if the direction is vertical   *
     * @param {String} direction matches `DIRECTION_UP|DOWN`
     * @return {Boolean} is_vertical
     */
isVertical:function(t){return"up"==t||t==ue},
/**
     * set css properties with their prefixes
     * @param {HTMLElement} element
     * @param {String} prop
     * @param {String} value
     * @param {Boolean} [toggle=true]
     * @return {Boolean}
     */
setPrefixedCss:function(t,e,n,i){var o=["","Webkit","Moz","O","ms"];e=S.toCamelCase(e);for(var a=0;a<o.length;a++){var r=e;
// prefixes
// test the style
if((r=o[a]?o[a]+r.slice(0,1).toUpperCase()+r.slice(1):r)in t.style){t.style[r]=(null===i||i)&&n||"";break}}},
/**
     * toggle browser default behavior by setting css properties.
     * `userSelect='none'` also sets `element.onselectstart` to false
     * `userDrag='none'` also sets `element.ondragstart` to false
     *
     * @param {HtmlElement} element
     * @param {Object} props
     * @param {Boolean} [toggle=true]
     */
toggleBehavior:function(n,t,i){var e;
// set the css properties
t&&n&&n.style&&(S.each(t,function(t,e){S.setPrefixedCss(n,e,t,i)}),e=i&&function(){return!1},
// also the disable onselectstart
"none"==t.userSelect&&(n.onselectstart=e),"none"==t.userDrag)&&(n.ondragstart=e)},
/**
     * convert a string with underscores to camelCase
     * so prevent_default becomes preventDefault
     * @param {String} str
     * @return {String} camelCaseStr
     */
toCamelCase:function(t){return t.replace(/[_-]([a-z])/g,function(t){return t[1].toUpperCase()})}},
/**
   * @module GestureDetector
   */
/**
   * @class Event
   * @static
   */
Qt=A.event={
/**
     * when touch events have been fired, this is true
     * this is used to stop mouse events
     * @property prevent_mouseevents
     * @private
     * @type {Boolean}
     */
preventMouseEvents:!1,
/**
     * if EVENT_START has been fired
     * @property started
     * @private
     * @type {Boolean}
     */
started:!1,
/**
     * when the mouse is hold down, this is true
     * @property should_detect
     * @private
     * @type {Boolean}
     */
shouldDetect:!1,
/**
     * simple event binder with a hook and support for multiple types
     * @param {HTMLElement} element
     * @param {String} type
     * @param {Function} handler
     * @param {Object} [opt]
     * @param {Function} [hook]
     * @param {Object} hook.type
     */
on:function(e,t,n,i,o){t=t.split(" ");S.each(t,function(t){S.on(e,t,n,i),o&&o(t)})},
/**
     * simple event unbinder with a hook and support for multiple types
     * @param {HTMLElement} element
     * @param {String} type
     * @param {Function} handler
     * @param {Object} [opt]
     * @param {Function} [hook]
     * @param {Object} hook.type
     */
off:function(e,t,n,i,o){t=t.split(" ");S.each(t,function(t){S.off(e,t,n,i),o&&o(t)})},
/**
     * the core touch event handler.
     * this finds out if we should to detect gestures
     * @param {HTMLElement} element
     * @param {String} eventType matches `EVENT_START|MOVE|END`
     * @param {Function} handler
     * @return onTouchHandler {Function} the core event handler
     */
onTouch:function(o,a,r,t){function e(t){var e,n=t.type.toLowerCase(),i=A.HAS_POINTEREVENTS;
// if we are in a mouseevent, but there has been a touchevent triggered in this session
// we want to do nothing. simply break out of the event.
(n=S.inStr(n,"mouse"))&&s.preventMouseEvents||(n&&a==L&&0===t.button?(s.preventMouseEvents=!1,s.shouldDetect=!0):i&&a==L?s.shouldDetect=1===t.buttons||Zt.matchType(he,t):n||a!=L||(s.preventMouseEvents=!0,s.shouldDetect=!0),
// update the pointer event before entering the detection
i&&a!=O&&Zt.updatePointer(a,t),
// ...and we are done with the detection
// so reset everything to start each detection totally fresh
(
// we are in a touch/down state, so allowed detection of gestures
e=s.shouldDetect?s.doDetect.call(s,t,a,o,r):e)==O&&(s.preventMouseEvents=!1,s.shouldDetect=!1,Zt.reset()),i&&a==O&&Zt.updatePointer(a,t))}var s=this;return this.on(o,ce[a],e,t),e},
/**
     * the core detection method
     * this finds out what GestureDetector-touch-events to trigger
     * @param {Object} ev
     * @param {String} eventType matches `EVENT_START|MOVE|END`
     * @param {HTMLElement} element
     * @param {Function} handler
     * @return {String} triggerType matches `EVENT_START|MOVE|END`
     */
doDetect:function(t,e,n,i){var o=this.getTouchList(t,e),a=o.length,r=e,s=o.trigger,n=(
// at each touchstart-like event we want also want to trigger a TOUCH event...
e==L?s=ge:e==O&&(s=me,
// keep track of how many touches have been removed
a=o.length-(t.changedTouches?t.changedTouches.length:1)),
// after there are still touches on the screen,
// we just want to trigger a MOVE event. so change the START or END to a MOVE
// but only after detection has been started, the first time we actually want a START
0<a&&this.started&&(r=pe),
// detection has been started, we keep track of this, see above
this.started=!0,this.collectEventData(n,r,o,t));
// trigger the triggerType event before the change (TOUCH, RELEASE) events
// but the END event should be at last
return e!=O&&i.call(x,n),
// trigger a change (TOUCH, RELEASE) event, this means the length of the touches changed
s&&(n.changedLength=a,n.eventType=s,i.call(x,n),n.eventType=r,delete n.changedLength),
// trigger the END event
r==O&&(i.call(x,n),
// ...and we are done with the detection
// so reset everything to start each detection totally fresh
this.started=!1),r},
/**
     * we have different events for each device/browser
     * determine what we need and set them in the EVENT_TYPES constant
     * the `onTouch` method is bind to these properties.
     * @return {Object} events
     */
determineEventTypes:function(){var t=A.HAS_POINTEREVENTS?window.PointerEvent?["pointerdown","pointermove","pointerup pointercancel lostpointercapture"]:["MSPointerDown","MSPointerMove","MSPointerUp MSPointerCancel MSLostPointerCapture"]:A.NO_MOUSEEVENTS?["touchstart","touchmove","touchend touchcancel"]:["touchstart mousedown","touchmove mousemove","touchend touchcancel mouseup"];return ce[L]=t[0],ce[pe]=t[1],ce[O]=t[2],ce},
/**
     * create touchList depending on the event
     * @param {Object} ev
     * @param {String} eventType
     * @return {Array} touches
     */
getTouchList:function(t,e){
// get the fake pointerEvent touchlist
var n,i;
// get the touchlist
return A.HAS_POINTEREVENTS?Zt.getTouchList():t.touches?e==pe?t.touches:(n=[],e=[].concat(S.toArray(t.touches),S.toArray(t.changedTouches)),i=[],S.each(e,function(t){-1===S.inArray(n,t.identifier)&&i.push(t),n.push(t.identifier)}),i):(
// make fake touchList from mouse position
t.identifier=1,[t])},
/**
     * collect basic event data
     * @param {HTMLElement} element
     * @param {String} eventType matches `EVENT_START|MOVE|END`
     * @param {Array} touches
     * @param {Object} ev
     * @return {Object} ev
     */
collectEventData:function(t,e,n,i){
// find out pointerType
var o=he;return S.inStr(i.type,"mouse")||Zt.matchType(de,i)?o=de:Zt.matchType(fe,i)&&(o=fe),{center:S.getCenter(n),timeStamp:Date.now(),target:i.target,touches:n,eventType:e,pointerType:o,srcEvent:i,
/**
         * prevent the browser default actions
         * mostly used to disable scrolling of the browser
         */
preventDefault:function(){var t=this.srcEvent;t.preventManipulation&&t.preventManipulation(),t.preventDefault&&t.preventDefault()},
/**
         * stop bubbling the event up to its parents
         */
stopPropagation:function(){this.srcEvent.stopPropagation()},
/**
         * immediately stop gesture detection
         * might be useful after a swipe was detected
         * @return {*}
         */
stopDetect:function(){return x.stopDetect()}}}},
/**
   * @module GestureDetector
   *
   * @class PointerEvent
   * @static
   */
Zt=A.PointerEvent={
/**
     * holds all pointers, by `identifier`
     * @property pointers
     * @type {Object}
     */
pointers:{},
/**
     * get the pointers as an array
     * @return {Array} touchlist
     */
getTouchList:function(){var e=[];
// we can use forEach since pointerEvents only is in IE10
return S.each(this.pointers,function(t){e.push(t)}),e},
/**
     * update the position of a pointer
     * @param {String} eventType matches `EVENT_START|MOVE|END`
     * @param {Object} pointerEvent
     */
updatePointer:function(t,e){t==O||t!=O&&1!==e.buttons?delete this.pointers[e.pointerId]:(e.identifier=e.pointerId,this.pointers[e.pointerId]=e)},
/**
     * check if ev matches pointertype
     * @param {String} pointerType matches `POINTER_MOUSE|TOUCH|PEN`
     * @param {PointerEvent} ev
     */
matchType:function(t,e){var n,i;return!!e.pointerType&&(n=e.pointerType,(i={})[de]=n===(e.MSPOINTER_TYPE_MOUSE||de),i[he]=n===(e.MSPOINTER_TYPE_TOUCH||he),i[fe]=n===(e.MSPOINTER_TYPE_PEN||fe),i[t])},
/**
     * reset the stored pointers
     */
reset:function(){this.pointers={}}},
/**
   * @module GestureDetector
   *
   * @class Detection
   * @static
   */
x=A.detection={
// contains all registered GestureDetector.gestures in the correct order
gestures:[],
// data of the current GestureDetector.gesture detection session
current:null,
// the previous GestureDetector.gesture session data
// is a full clone of the previous gesture.current object
previous:null,
// when this becomes true, no gestures are fired
stopped:!1,
/**
     * start GestureDetector.gesture detection
     * @param {GestureDetector.Instance} inst
     * @param {Object} eventData
     */
startDetect:function(t,e){
// already busy with a GestureDetector.gesture detection on an element
this.current||(this.stopped=!1,
// holds current session
this.current={inst:t,
// reference to GestureDetectorInstance we're working for
startEvent:S.extend({},e),
// start eventData for distances, timing etc
lastEvent:!1,
// last eventData
lastCalcEvent:!1,
// last eventData for calculations.
futureCalcEvent:!1,
// last eventData for calculations.
lastCalcData:{},
// last lastCalcData
name:""},this.detect(e))},
/**
     * GestureDetector.gesture detection
     * @param {Object} eventData
     * @return {any}
     */
detect:function(e){var n,i;
// extend event data with calculations about scale, distance etc
if(this.current&&!this.stopped)return e=this.extendEventData(e),n=this.current.inst,i=n.options,
// call GestureDetector.gesture handlers
S.each(this.gestures,function(t){
// only when the instance options have enabled this gesture
!this.stopped&&n.enabled&&i[t.name]&&t.handler.call(t,e,n)},this),
// store as previous event event
this.current&&(this.current.lastEvent=e),e.eventType==O&&this.stopDetect(),e;// eslint-disable-line consistent-return
},
/**
     * clear the GestureDetector.gesture vars
     * this is called on endDetect, but can also be used when a final GestureDetector.gesture has been detected
     * to stop other GestureDetector.gestures from being fired
     */
stopDetect:function(){
// clone current data to the store as the previous gesture
// used for the double tap gesture, since this is an other gesture detect session
this.previous=S.extend({},this.current),
// reset the current
this.current=null,this.stopped=!0},
/**
     * calculate velocity, angle and direction
     * @param {Object} ev
     * @param {Object} center
     * @param {Number} deltaTime
     * @param {Number} deltaX
     * @param {Number} deltaY
     */
getCalculatedData:function(t,e,n,i,o){var a=this.current,r=!1,s=a.lastCalcEvent,l=a.lastCalcData;s&&t.timeStamp-s.timeStamp>A.CALCULATE_INTERVAL&&(e=s.center,n=t.timeStamp-s.timeStamp,i=t.center.clientX-s.center.clientX,o=t.center.clientY-s.center.clientY,r=!0),t.eventType!=ge&&t.eventType!=me||(a.futureCalcEvent=t),a.lastCalcEvent&&!r||(l.velocity=S.getVelocity(n,i,o),l.angle=S.getAngle(e,t.center),l.direction=S.getDirection(e,t.center),a.lastCalcEvent=a.futureCalcEvent||t,a.futureCalcEvent=t),t.velocityX=l.velocity.x,t.velocityY=l.velocity.y,t.interimAngle=l.angle,t.interimDirection=l.direction},
/**
     * extend eventData for GestureDetector.gestures
     * @param {Object} ev
     * @return {Object} ev
     */
extendEventData:function(t){var e=this.current,n=e.startEvent,e=e.lastEvent||n,i=(
// update the start touchlist to calculate the scale/rotation
t.eventType!=ge&&t.eventType!=me||(n.touches=[],S.each(t.touches,function(t){n.touches.push({clientX:t.clientX,clientY:t.clientY})})),t.timeStamp-n.timeStamp),o=t.center.clientX-n.center.clientX,a=t.center.clientY-n.center.clientY;return this.getCalculatedData(t,e.center,i,o,a),S.extend(t,{startEvent:n,deltaTime:i,deltaX:o,deltaY:a,distance:S.getDistance(n.center,t.center),angle:S.getAngle(n.center,t.center),direction:S.getDirection(n.center,t.center),scale:S.getScale(n.touches,t.touches),rotation:S.getRotation(n.touches,t.touches)}),t},
/**
     * register new gesture
     * @param {Object} gesture object, see `gestures/` for documentation
     * @return {Array} gestures
     */
register:function(t){
// add an enable gesture options if there is no given
var e=t.defaults||{};return void 0===e[t.name]&&(e[t.name]=!0),
// extend GestureDetector default options with the GestureDetector.gesture options
S.extend(A.defaults,e,!0),
// set its index
t.index=t.index||1e3,
// add GestureDetector.gesture to the list
this.gestures.push(t),
// sort the list by index
this.gestures.sort(function(t,e){return t.index<e.index?-1:t.index>e.index?1:0}),this.gestures}},(
/**
   * @module GestureDetector
   */
/**
   * create new GestureDetector instance
   * all methods should return the instance itself, so it is chainable.
   *
   * @class Instance
   * @constructor
   * @param {HTMLElement} element
   * @param {Object} [options={}] options are merged with `GestureDetector.defaults`
   * @return {GestureDetector.Instance}
   */
A.Instance=function(t,n){var e,i=this,o=n&&n.passive?{passive:!0}:void 0;
// setup GestureDetectorJS window events and register all gestures
// this also sets up the default options
e=o,A.READY||(
// find what eventtypes we add listeners to
Qt.determineEventTypes(),
// Register all gestures inside GestureDetector.gestures
S.each(A.gestures,function(t){x.register(t)}),
// Add touch events on the document
Qt.onTouch(A.DOCUMENT,pe,x.detect,e),Qt.onTouch(A.DOCUMENT,O,x.detect,e),
// GestureDetector is ready...!
A.READY=!0),
/**
     * @property element
     * @type {HTMLElement}
     */
this.element=t,
/**
     * @property enabled
     * @type {Boolean}
     * @protected
     */
this.enabled=!0,
/**
     * options, merged with the defaults
     * options with an _ are converted to camelCase
     * @property options
     * @type {Object}
     */
S.each(n,function(t,e){delete n[e],n[S.toCamelCase(e)]=t}),this.options=S.extend(S.extend({},A.defaults),n||{}),this.options.listenerOptions=o,
// add some css to the element to prevent the browser from doing its native behavior
this.options.behavior&&S.toggleBehavior(this.element,this.options.behavior,!0)
/**
     * event start handler on the element to start the detection
     * @property eventStartHandler
     * @type {Object}
     */,this.eventStartHandler=Qt.onTouch(t,L,function(t){i.enabled&&t.eventType==L?x.startDetect(i,t):t.eventType==ge&&x.detect(t)},o),
/**
     * keep a list of user event handlers which needs to be removed when calling 'dispose'
     * @property eventHandlers
     * @type {Array}
     */
this.eventHandlers=[]}).prototype={
/**
     * @method on
     * @signature on(gestures, handler)
     * @description
     *  [en]Adds an event handler for a gesture. Available gestures are: drag, dragleft, dragright, dragup, dragdown, hold, release, swipe, swipeleft, swiperight, swipeup, swipedown, tap, doubletap, touch, transform, pinch, pinchin, pinchout and rotate. [/en]
     *  [ja]ジェスチャに対するイベントハンドラを追加します。指定できるジェスチャ名は、drag dragleft dragright dragup dragdown hold release swipe swipeleft swiperight swipeup swipedown tap doubletap touch transform pinch pinchin pinchout rotate です。[/ja]
     * @param {String} gestures
     *   [en]A space separated list of gestures.[/en]
     *   [ja]検知するジェスチャ名を指定します。スペースで複数指定することができます。[/ja]
     * @param {Function} handler
     *   [en]An event handling function.[/en]
     *   [ja]イベントハンドラとなる関数オブジェクトを指定します。[/ja]
     */
on:function(t,e,n){var i=this;return Qt.on(i.element,t,e,b.extend({},i.options.listenerOptions,n),function(t){i.eventHandlers.push({gesture:t,handler:e})}),i},
/**
     * @method off
     * @signature off(gestures, handler)
     * @description
     *  [en]Remove an event listener.[/en]
     *  [ja]イベントリスナーを削除します。[/ja]
     * @param {String} gestures
     *   [en]A space separated list of gestures.[/en]
     *   [ja]ジェスチャ名を指定します。スペースで複数指定することができます。[/ja]
     * @param {Function} handler
     *   [en]An event handling function.[/en]
     *   [ja]イベントハンドラとなる関数オブジェクトを指定します。[/ja]
     */
off:function(t,e,n){var i=this;return Qt.off(i.element,t,e,b.extend({},i.options.listenerOptions,n),function(t){t=S.inArray(i.eventHandlers,{gesture:t,handler:e},!0);0<=t&&i.eventHandlers.splice(t,1)}),i},
/**
     * trigger gesture event
     * @method trigger
     * @signature trigger(gesture, eventData)
     * @param {String} gesture
     * @param {Object} [eventData]
     */
trigger:function(t,e){
// optional
e=e||{};
// create DOM event
var n=A.DOCUMENT.createEvent("Event"),t=(n.initEvent(t,!0,!0),n.gesture=e,this.element);return(t=S.hasParent(e.target,t)?e.target:t).dispatchEvent(n),this},
/**
     * @method enable
     * @signature enable(state)
     * @description
     *  [en]Enable or disable gesture detection.[/en]
     *  [ja]ジェスチャ検知を有効化/無効化します。[/ja]
     * @param {Boolean} state
     *   [en]Specify if it should be enabled or not.[/en]
     *   [ja]有効にするかどうかを指定します。[/ja]
     */
enable:function(t){return this.enabled=t,this},
/**
     * @method dispose
     * @signature dispose()
     * @description
     *  [en]Remove and destroy all event handlers for this instance.[/en]
     *  [ja]このインスタンスでのジェスチャの検知や、イベントハンドラを全て解除して廃棄します。[/ja]
     */
dispose:function(){var t,e;
// undo all changes made by stop_browser_behavior
// unbind all custom event handlers
for(S.toggleBehavior(this.element,this.options.behavior,!1),t=-1;e=this.eventHandlers[++t];)
// eslint-disable-line no-cond-assign
S.off(this.element,e.gesture,e.handler);return this.eventHandlers=[],
// unbind the start event listener
Qt.off(this.element,ce[L],this.eventStartHandler),null}},
/**
   * @module gestures
   */
/**
   * Move with x fingers (default 1) around on the page.
   * Preventing the default browser behavior is a good way to improve feel and working.
   * ````
   *  GestureDetectortime.on("drag", function(ev) {
   *    console.log(ev);
   *    ev.gesture.preventDefault();
   *  });
   * ````
   *
   * @class Drag
   * @static
   */
/**
   * @event drag
   * @param {Object} ev
   */
/**
   * @event dragstart
   * @param {Object} ev
   */
/**
   * @event dragend
   * @param {Object} ev
   */
/**
   * @event drapleft
   * @param {Object} ev
   */
/**
   * @event dragright
   * @param {Object} ev
   */
/**
   * @event dragup
   * @param {Object} ev
   */
/**
   * @event dragdown
   * @param {Object} ev
   */
/**
   * @param {String} name
   */
ee=!(te="drag"),A.gestures.Drag={name:te,index:50,handler:function(t,e){var n,i,o=x.current;
// max touches
if(!(0<e.options.dragMaxTouches&&t.touches.length>e.options.dragMaxTouches))switch(t.eventType){case L:ee=!1;break;case pe:
// when the distance we moved is too small we skip this gesture
// or we can be already in dragging
t.distance<e.options.dragMinDistance&&o.name!=te||(n=o.startEvent.center,
// we are dragging!
o.name!=te&&(o.name=te,e.options.dragDistanceCorrection)&&0<t.distance&&(i=Math.abs(e.options.dragMinDistance/t.distance),n.pageX+=t.deltaX*i,n.pageY+=t.deltaY*i,n.clientX+=t.deltaX*i,n.clientY+=t.deltaY*i,
// recalculate event data using new start point
t=x.extendEventData(t)),
// lock drag to axis?
(o.lastEvent.dragLockToAxis||e.options.dragLockToAxis&&e.options.dragLockMinDistance<=t.distance)&&(t.dragLockToAxis=!0),n=o.lastEvent.direction,t.dragLockToAxis&&n!==t.direction&&(S.isVertical(n)?t.direction=t.deltaY<0?"up":ue:t.direction=t.deltaX<0?"left":"right"),
// first time, trigger dragstart event
ee||(e.trigger(te+"start",t),ee=!0),
// trigger events
e.trigger(te,t),e.trigger(te+t.direction,t),i=S.isVertical(t.direction),
// block the browser events
(e.options.dragBlockVertical&&i||e.options.dragBlockHorizontal&&!i)&&t.preventDefault());break;case me:ee&&t.changedLength<=e.options.dragMaxTouches&&(e.trigger(te+"end",t),ee=!1);break;case O:ee=!1}},defaults:{
/**
         * minimal movement that have to be made before the drag event gets triggered
         * @property dragMinDistance
         * @type {Number}
         * @default 10
         */
dragMinDistance:10,
/**
         * Set dragDistanceCorrection to true to make the starting point of the drag
         * be calculated from where the drag was triggered, not from where the touch started.
         * Useful to avoid a jerk-starting drag, which can make fine-adjustments
         * through dragging difficult, and be visually unappealing.
         * @property dragDistanceCorrection
         * @type {Boolean}
         * @default true
         */
dragDistanceCorrection:!0,
/**
         * set 0 for unlimited, but this can conflict with transform
         * @property dragMaxTouches
         * @type {Number}
         * @default 1
         */
dragMaxTouches:1,
/**
         * prevent default browser behavior when dragging occurs
         * be careful with it, it makes the element a blocking element
         * when you are using the drag gesture, it is a good practice to set this true
         * @property dragBlockHorizontal
         * @type {Boolean}
         * @default false
         */
dragBlockHorizontal:!1,
/**
         * same as `dragBlockHorizontal`, but for vertical movement
         * @property dragBlockVertical
         * @type {Boolean}
         * @default false
         */
dragBlockVertical:!1,
/**
         * dragLockToAxis keeps the drag gesture on the axis that it started on,
         * It disallows vertical directions if the initial direction was horizontal, and vice versa.
         * @property dragLockToAxis
         * @type {Boolean}
         * @default false
         */
dragLockToAxis:!1,
/**
         * drag lock only kicks in when distance > dragLockMinDistance
         * This way, locking occurs only when the distance has become large enough to reliably determine the direction
         * @property dragLockMinDistance
         * @type {Number}
         * @default 25
         */
dragLockMinDistance:25}},
/**
   * @module gestures
   */
/**
   * trigger a simple gesture event, so you can do anything in your handler.
   * only usable if you know what your doing...
   *
   * @class Gesture
   * @static
   */
/**
   * @event gesture
   * @param {Object} ev
   */
A.gestures.Gesture={name:"gesture",index:1337,handler:function(t,e){e.trigger(this.name,t)}},
/**
   * @module gestures
   */
/**
   * Touch stays at the same place for x time
   *
   * @class Hold
   * @static
   */
/**
   * @event hold
   * @param {Object} ev
   */
/**
   * @param {String} name
   */
ne="hold",A.gestures.Hold={name:ne,index:10,defaults:{
/**
         * @property holdTimeout
         * @type {Number}
         * @default 500
         */
holdTimeout:500,
/**
         * movement allowed while holding
         * @property holdThreshold
         * @type {Number}
         * @default 2
         */
holdThreshold:2},handler:function(t,e){var n=e.options,i=x.current;switch(t.eventType){case L:clearTimeout(ie),
// set the gesture so we can check in the timeout if it still is
i.name=ne,
// set timer and if after the timeout it still is hold,
// we trigger the hold event
ie=setTimeout(function(){i&&i.name==ne&&e.trigger(ne,t)},n.holdTimeout);break;case pe:t.distance>n.holdThreshold&&clearTimeout(ie);break;case me:clearTimeout(ie)}}},
/**
   * @module gestures
   */
/**
   * when a touch is being released from the page
   *
   * @class Release
   * @static
   */
/**
   * @event release
   * @param {Object} ev
   */
A.gestures.Release={name:"release",index:1/0,handler:function(t,e){t.eventType==me&&e.trigger(this.name,t)}},
/**
   * @module gestures
   */
/**
   * triggers swipe events when the end velocity is above the threshold
   * for best usage, set `preventDefault` (on the drag gesture) to `true`
   * ````
   *  GestureDetectortime.on("dragleft swipeleft", function(ev) {
   *    console.log(ev);
   *    ev.gesture.preventDefault();
   *  });
   * ````
   *
   * @class Swipe
   * @static
   */
/**
   * @event swipe
   * @param {Object} ev
   */
/**
   * @event swipeleft
   * @param {Object} ev
   */
/**
   * @event swiperight
   * @param {Object} ev
   */
/**
   * @event swipeup
   * @param {Object} ev
   */
/**
   * @event swipedown
   * @param {Object} ev
   */
A.gestures.Swipe={name:"swipe",index:40,defaults:{
/**
       * @property swipeMinTouches
       * @type {Number}
       * @default 1
       */
swipeMinTouches:1,
/**
       * @property swipeMaxTouches
       * @type {Number}
       * @default 1
       */
swipeMaxTouches:1,
/**
       * horizontal swipe velocity
       * @property swipeVelocityX
       * @type {Number}
       * @default 0.6
       */
swipeVelocityX:.6,
/**
       * vertical swipe velocity
       * @property swipeVelocityY
       * @type {Number}
       * @default 0.6
       */
swipeVelocityY:.6},handler:function(t,e){var n,i;t.eventType!=me||(n=t.touches.length)<(i=e.options).swipeMinTouches||n>i.swipeMaxTouches||
// when the distance we moved is too small we skip this gesture
// or we can be already in dragging
(t.velocityX>i.swipeVelocityX||t.velocityY>i.swipeVelocityY)&&(
// trigger swipe events
e.trigger(this.name,t),e.trigger(this.name+t.direction,t))}},
/**
   * @module gestures
   */
/**
   * Single tap and a double tap on a place
   *
   * @class Tap
   * @static
   */
/**
   * @event tap
   * @param {Object} ev
   */
/**
   * @event doubletap
   * @param {Object} ev
   */
/**
   * @param {String} name
   */
oe=!1,A.gestures.Tap={name:"tap",index:100,handler:function(t,e){var n,i,o=e.options,a=x.current,r=x.previous;switch(t.eventType){case L:oe=!1;break;case pe:oe=oe||t.distance>o.tapMaxDistance;break;case O:!S.inStr(t.srcEvent.type,"cancel")&&t.deltaTime<o.tapMaxTime&&!oe&&(
// previous gesture, for the double tap since these are two different gesture detections
n=r&&r.lastEvent&&t.timeStamp-r.lastEvent.timeStamp,i=!1,
// check if double tap
r&&"tap"==r.name&&n&&n<o.doubleTapInterval&&t.distance<o.doubleTapDistance&&(e.trigger("doubletap",t),i=!0),
// do a single tap
i&&!o.tapAlways||(a.name="tap",e.trigger(a.name,t)))}},defaults:{
/**
         * max time of a tap, this is for the slow tappers
         * @property tapMaxTime
         * @type {Number}
         * @default 250
         */
tapMaxTime:250,
/**
         * max distance of movement of a tap, this is for the slow tappers
         * @property tapMaxDistance
         * @type {Number}
         * @default 10
         */
tapMaxDistance:10,
/**
         * always trigger the `tap` event, even while double-tapping
         * @property tapAlways
         * @type {Boolean}
         * @default true
         */
tapAlways:!0,
/**
         * max distance between two taps
         * @property doubleTapDistance
         * @type {Number}
         * @default 20
         */
doubleTapDistance:20,
/**
         * max time between two taps
         * @property doubleTapInterval
         * @type {Number}
         * @default 300
         */
doubleTapInterval:300}},
/**
   * @module gestures
   */
/**
   * when a touch is being touched at the page
   *
   * @class Touch
   * @static
   */
/**
   * @event touch
   * @param {Object} ev
   */
A.gestures.Touch={name:"touch",index:-1/0,defaults:{
/**
       * call preventDefault at touchstart, and makes the element blocking by disabling the scrolling of the page,
       * but it improves gestures like transforming and dragging.
       * be careful with using this, it can be very annoying for users to be stuck on the page
       * @property preventDefault
       * @type {Boolean}
       * @default false
       */
preventDefault:!1,
/**
       * disable mouse events, so only touch (or pen!) input triggers events
       * @property preventMouse
       * @type {Boolean}
       * @default false
       */
preventMouse:!1},handler:function(t,e){e.options.preventMouse&&t.pointerType==de?t.stopDetect():(e.options.preventDefault&&t.preventDefault(),t.eventType==ge&&e.trigger("touch",t))}},
/**
   * @module gestures
   */
/**
   * User want to scale or rotate with 2 fingers
   * Preventing the default browser behavior is a good way to improve feel and working. This can be done with the
   * `preventDefault` option.
   *
   * @class Transform
   * @static
   */
/**
   * @event transform
   * @param {Object} ev
   */
/**
   * @event transformstart
   * @param {Object} ev
   */
/**
   * @event transformend
   * @param {Object} ev
   */
/**
   * @event pinchin
   * @param {Object} ev
   */
/**
   * @event pinchout
   * @param {Object} ev
   */
/**
   * @event rotate
   * @param {Object} ev
   */
/**
   * @param {String} name
   */
re=!(ae="transform"),A.gestures.Transform={name:ae,index:45,defaults:{
/**
         * minimal scale factor, no scale is 1, zoomin is to 0 and zoomout until higher then 1
         * @property transformMinScale
         * @type {Number}
         * @default 0.01
         */
transformMinScale:.01,
/**
         * rotation in degrees
         * @property transformMinRotation
         * @type {Number}
         * @default 1
         */
transformMinRotation:1},handler:function(t,e){switch(t.eventType){case L:re=!1;break;case pe:
// at least multitouch
var n,i;t.touches.length<2||(n=Math.abs(1-t.scale),i=Math.abs(t.rotation),n<e.options.transformMinScale&&i<e.options.transformMinRotation)||(
// we are transforming!
x.current.name=ae,
// first time, trigger dragstart event
re||(e.trigger(ae+"start",t),re=!0),e.trigger(ae,t),// basic transform event
// trigger rotate event
i>e.options.transformMinRotation&&e.trigger("rotate",t),
// trigger pinch event
n>e.options.transformMinScale&&(e.trigger("pinch",t),e.trigger("pinch"+(t.scale<1?"in":"out"),t)));break;case me:re&&t.changedLength<2&&(e.trigger(ae+"end",t),re=!1)}}};function be(e,n){["id","class","animation"].forEach(function(t){return Object.prototype.hasOwnProperty.call(n,t)&&e.setAttribute(t,n[t])}),n.modifier&&b.addModifier(e,n.modifier)}function ye(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},e=s({},e);return"string"==typeof t?e.message=t:e=t,e&&(e.message||e.messageHTML)||b.throw("Notifications must contain a message"),(Object.prototype.hasOwnProperty.call(e,"buttonLabels")||Object.prototype.hasOwnProperty.call(e,"buttonLabel"))&&(e.buttonLabels=e.buttonLabels||e.buttonLabel,Array.isArray(e.buttonLabels)||(e.buttonLabels=[e.buttonLabels||""])),b.extend({compile:function(t){return t},callback:function(t){return t},animation:"default",cancelable:!1,primaryButtonIndex:(e.buttonLabels||n.buttonLabels||[]).length-1},n,e)}function ke(n){function t(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"Function";b.throw('"options.'.concat(t,'" must be an instance of ').concat(e))}function e(t){return Object.hasOwnProperty.call(n,t)}function i(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:Function;return n[t]instanceof e}var o="buttons",a="callback",r="compile",s="destroy";e(o)&&i(o,Array)||t(o,"Array"),e(a)&&!i(a)&&t(a),e(r)&&!i(r)&&t(r),e(s)&&!i(s)&&t(s)}function we(){Le._visible=!0,Le.emit("show")}function Ee(){Le._visible=!1,Le.emit("hide")}function Ce(){b.warn("ons-keyboard: Cordova Keyboard plugin is not present.")}var Ae,Se=new(function(){function t(){l(this,t),this.queue=[]}return c(t,[{key:"add",value:function(t,e){var n=this;this.queue.push(t),1===this.queue.length&&setImmediate(this.queue[0]),e.then(function(){n.queue.shift(),0<n.queue.length&&setTimeout(n.queue[0],1e3/30)})}}]),t}()),xe={_createAlertDialog:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return new Promise(function(n){function i(){r.dialog.onDialogCancel&&r.dialog.removeEventListener("dialogcancel",r.dialog.onDialogCancel),Object.keys(r).forEach(function(t){return delete r[t]}),r=null,o.destroy instanceof Function&&o.destroy()}var o=ye.apply(void 0,e),t=(b.checkMissingImport("AlertDialog","AlertDialogButton"),""),a=(o.isPrompt&&(t='\n      <input\n        class="text-input text-input--underbar"\n        type="'.concat(o.inputType||"text",'"\n        placeholder="').concat(o.placeholder||"",'"\n        value="').concat(o.defaultValue||"",'"\n        style="width: 100%; margin-top: 10px;"\n      />\n    ')),""),r=(o.buttonLabels.forEach(function(t,e){a+='\n      <ons-alert-dialog-button\n        class="\n          '.concat(e===o.primaryButtonIndex?" alert-dialog-button--primal":"","\n          ").concat(o.buttonLabels.length<=2?" alert-dialog-button--rowfooter":"",'\n        "\n        style="position: relative;">\n        ').concat(t,"\n      </ons-alert-dialog-button>\n    ")}),{});r.dialog=document.createElement("ons-alert-dialog"),r.dialog.innerHTML='\n    <div class="alert-dialog-mask"\n      style="\n        '.concat(o.maskColor?"background-color: "+o.maskColor:"",'\n      "></div>\n    <div class="alert-dialog">\n      <div class="alert-dialog-container">\n        <div class="alert-dialog-title">\n          ').concat(o.title||"",'\n        </div>\n        <div class="alert-dialog-content">\n          ').concat(o.message||o.messageHTML,"\n          ").concat(t,'\n        </div>\n        <div class="\n          alert-dialog-footer\n          ').concat(o.buttonLabels.length<=2?" alert-dialog-footer--rowfooter":"",'\n        ">\n          ').concat(a,"\n        </div>\n      </div>\n    </div>\n  "),M(r.dialog),
// Set attributes
be(r.dialog,o),
// Prompt events
o.isPrompt&&(r.input=r.dialog.querySelector(".text-input"),o.submitOnEnter)&&(r.input.onkeypress=function(t){13===t.keyCode&&r.dialog.hide().then(function(){var t;r&&(t=r.input.value,i(),o.callback(t),n(t))})}),
// Button events
r.footer=r.dialog.querySelector(".alert-dialog-footer"),b.arrayFrom(r.dialog.querySelectorAll(".alert-dialog-button")).forEach(function(t,e){t.onclick=function(){r.dialog.hide().then(function(){var t;r&&(t=e,o.isPrompt&&(t=e===o.primaryButtonIndex?r.input.value:null),r.dialog.remove(),i(),o.callback(t),n(t))})},r.footer.appendChild(t)}),
// Cancel events
o.cancelable&&(r.dialog.cancelable=!0,r.dialog.onDialogCancel=function(){setImmediate(function(){r.dialog.remove(),i()});var t=o.isPrompt?null:-1;o.callback(t),n(t)},r.dialog.addEventListener("dialogcancel",r.dialog.onDialogCancel,!1)),
// Show dialog
document.body.appendChild(r.dialog),o.compile(r.dialog),setImmediate(function(){r.dialog.show().then(function(){var t;r.input&&o.isPrompt&&o.autofocus&&(t=r.input.value.length,r.input.focus(),r.input.type)&&["text","search","url","tel","password"].includes(r.input.type)&&r.input.setSelectionRange(t,t)})})})},
/**
   * @method alert
   * @signature alert(message [, options] | options)
   * @return {Promise}
   *   [en]Will resolve to the index of the button that was pressed or `-1` when canceled.[/en]
   *   [ja][/ja]
   * @param {String} message
   *   [en]Notification message. This argument is optional but if it's not defined either `options.message` or `options.messageHTML` must be defined instead.[/en]
   *   [ja][/ja]
   * @param {Object} options
   *   [en]Parameter object.[/en]
   *   [ja]オプションを指定するオブジェクトです。[/ja]
   * @param {String} [options.message]
   *   [en]Notification message.[/en]
   *   [ja]アラートダイアログに表示する文字列を指定します。[/ja]
   * @param {String} [options.messageHTML]
   *   [en]Notification message in HTML.[/en]
   *   [ja]アラートダイアログに表示するHTMLを指定します。[/ja]
   * @param {String | Array} [options.buttonLabels]
   *   [en]Labels for the buttons. Default is `"OK"`.[/en]
   *   [ja]確認ボタンのラベルを指定します。"OK"がデフォルトです。[/ja]
   * @param {Number} [options.primaryButtonIndex]
   *   [en]Index of primary button. Default is the last one.[/en]
   *   [ja]プライマリボタンのインデックスを指定します。デフォルトは 0 です。[/ja]
   * @param {Boolean} [options.cancelable]
   *   [en]Whether the dialog is cancelable or not. Default is `false`. If the dialog is cancelable it can be closed by clicking the background or pressing the Android back button.[/en]
   *   [ja]ダイアログがキャンセル可能かどうかを指定します。[/ja]
   * @param {String} [options.animation]
   *   [en]Animation name. Available animations are `none` and `fade`. Default is `fade`.[/en]
   *   [ja]アラートダイアログを表示する際のアニメーション名を指定します。"none", "fade"のいずれかを指定できます。[/ja]
   * @param {String} [options.id]
   *   [en]The `<ons-alert-dialog>` element's ID.[/en]
   *   [ja]ons-alert-dialog要素のID。[/ja]
   * @param {String} [options.class]
   *   [en]The `<ons-alert-dialog>` element's class.[/en]
   *   [ja]ons-alert-dialog要素のclass。[/ja]
   * @param {String} [options.title]
   *   [en]Dialog title. Default is `"Alert"`.[/en]
   *   [ja]アラートダイアログの上部に表示するタイトルを指定します。"Alert"がデフォルトです。[/ja]
   * @param {String} [options.modifier]
   *   [en]Modifier for the dialog.[/en]
   *   [ja]アラートダイアログのmodifier属性の値を指定します。[/ja]
   * @param {String} [options.maskColor]
   *   [en]Color of the background mask. Default is "rgba(0, 0, 0, 0.2)" ("rgba(0, 0, 0, 0.3)" for Material).[/en]
   *   [ja]背景のマスクの色を指定します。"rgba(0, 0, 0, 0.2)"がデフォルト値です。[/ja]
   * @param {Function} [options.callback]
   *   [en]Function that executes after dialog has been closed.[/en]
   *   [ja]アラートダイアログが閉じられた時に呼び出される関数オブジェクトを指定します。[/ja]
   * @description
   *   [en]
   *     Display an alert dialog to show the user a message.
   *
   *     The content of the message can be either simple text or HTML.
   *
   *     It can be called in the following ways:
   *
   *     ```
   *     ons.notification.alert(message, options);
   *     ons.notification.alert(options);
   *     ```
   *
   *     Must specify either `message` or `messageHTML`.
   *   [/en]
   *   [ja]
   *     ユーザーへメッセージを見せるためのアラートダイアログを表示します。
   *     表示するメッセージは、テキストかもしくはHTMLを指定できます。
   *     このメソッドの引数には、options.messageもしくはoptions.messageHTMLのどちらかを必ず指定する必要があります。
   *   [/ja]
   */
alert:function(t,e){return xe._createAlertDialog(t,e,{buttonLabels:["OK"],title:"Alert"})},
/**
   * @method confirm
   * @signature confirm(message [, options] | options)
   * @return {Promise}
   *   [en]Will resolve to the index of the button that was pressed or `-1` when canceled.[/en]
   *   [ja][/ja]
   * @param {String} message
   *   [en]Notification message. This argument is optional but if it's not defined either `options.message` or `options.messageHTML` must be defined instead.[/en]
   *   [ja][/ja]
   * @param {Object} options
   *   [en]Parameter object.[/en]
   * @param {Array} [options.buttonLabels]
   *   [en]Labels for the buttons. Default is `["Cancel", "OK"]`.[/en]
   *   [ja]ボタンのラベルの配列を指定します。["Cancel", "OK"]がデフォルトです。[/ja]
   * @param {Number} [options.primaryButtonIndex]
   *   [en]Index of primary button. Default is the last one.[/en]
   *   [ja]プライマリボタンのインデックスを指定します。デフォルトは 1 です。[/ja]
   * @description
   *   [en]
   *     Display a dialog to ask the user for confirmation. Extends `alert()` parameters.
   *     The default button labels are `"Cancel"` and `"OK"` but they can be customized.
   *
   *     It can be called in the following ways:
   *
   *     ```
   *     ons.notification.confirm(message, options);
   *     ons.notification.confirm(options);
   *     ```
   *
   *     Must specify either `message` or `messageHTML`.
   *   [/en]
   *   [ja]
   *     ユーザに確認を促すダイアログを表示します。
   *     デオルとのボタンラベルは、"Cancel"と"OK"ですが、これはこのメソッドの引数でカスタマイズできます。
   *     このメソッドの引数には、options.messageもしくはoptions.messageHTMLのどちらかを必ず指定する必要があります。
   *   [/ja]
   */
confirm:function(t,e){return xe._createAlertDialog(t,e,{buttonLabels:["Cancel","OK"],title:"Confirm"})},
/**
   * @method prompt
   * @signature prompt(message [, options] | options)
   * @param {String} message
   *   [en]Notification message. This argument is optional but if it's not defined either `options.message` or `options.messageHTML` must be defined instead.[/en]
   *   [ja][/ja]
   * @return {Promise}
   *   [en]Will resolve to the input value when the dialog is closed or `null` when canceled.[/en]
   *   [ja][/ja]
   * @param {Object} options
   *   [en]Parameter object.[/en]
   *   [ja]オプションを指定するオブジェクトです。[/ja]
   * @param {String | Array} [options.buttonLabels]
   *   [en]Labels for the buttons. Default is `"OK"`.[/en]
   *   [ja]確認ボタンのラベルを指定します。"OK"がデフォルトです。[/ja]
   * @param {Number} [options.primaryButtonIndex]
   *   [en]Index of primary button. Default is the last one.[/en]
   *   [ja]プライマリボタンのインデックスを指定します。デフォルトは 0 です。[/ja]
   * @param {String} [options.placeholder]
   *   [en]Placeholder for the text input.[/en]
   *   [ja]テキスト欄のプレースホルダに表示するテキストを指定します。[/ja]
   * @param {String} [options.defaultValue]
   *   [en]Default value for the text input.[/en]
   *   [ja]テキスト欄のデフォルトの値を指定します。[/ja]
   * @param {String} [options.inputType]
   *   [en]Type of the input element (`password`, `date`...). Default is `text`.[/en]
   *   [ja][/ja]
   * @param {Boolean} [options.autofocus]
   *   [en]Autofocus the input element. Default is `true`. In Cordova, `KeyboardDisplayRequiresUserAction` in `config.xml` must be `false` to activate this feature.[/en]
   *   [ja]input要素に自動的にフォーカスするかどうかを指定します。デフォルトはtrueです。Cordova環境では、この機能を有効にするためには `config.xml` で `KeyboardDisplayRequiresUserAction` を `false` に設定する必要があります。[/ja]
   * @param {Boolean} [options.submitOnEnter]
   *   [en]Submit automatically when enter is pressed. Default is `true`.[/en]
   *   [ja]Enterが押された際にそのformをsubmitするかどうかを指定します。デフォルトはtrueです。[/ja]
   * @description
   *   [en]
   *     Display a dialog with a prompt to ask the user a question. Extends `alert()` parameters.
   *
   *     It can be called in the following ways:
   *
   *     ```
   *     ons.notification.prompt(message, options);
   *     ons.notification.prompt(options);
   *     ```
   *
   *     Must specify either `message` or `messageHTML`.
   *   [/en]
   *   [ja]
   *     ユーザーに入力を促すダイアログを表示します。
   *     このメソッドの引数には、options.messageもしくはoptions.messageHTMLのどちらかを必ず指定する必要があります。
   *   [/ja]
   */
prompt:function(t,e){return xe._createAlertDialog(t,e,{buttonLabels:["OK"],title:"Alert",isPrompt:!0,autofocus:!0,submitOnEnter:!0})}},Pe=(kt.mixin(jt={
/**
       * @event change
       * @description
       *   [en]Fired when the device orientation changes.[/en]
       *   [ja]デバイスのオリエンテーションが変化した際に発火します。[/ja]
       * @param {Object} event
       *   [en]Event object.[/en]
       *   [ja]イベントオブジェクトです。[/ja]
       * @param {Boolean} event.isPortrait
       *   [en]Will be true if the current orientation is portrait mode.[/en]
       *   [ja]現在のオリエンテーションがportraitの場合にtrueを返します。[/ja]
       */
/**
       * @method on
       * @signature on(eventName, listener)
       * @description
       *   [en]Add an event listener.[/en]
       *   [ja]イベントリスナーを追加します。[/ja]
       * @param {String} eventName
       *   [en]Name of the event.[/en]
       *   [ja]イベント名を指定します。[/ja]
       * @param {Function} listener
       *   [en]Function to execute when the event is triggered.[/en]
       *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
       */
/**
       * @method once
       * @signature once(eventName, listener)
       * @description
       *  [en]Add an event listener that's only triggered once.[/en]
       *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
       * @param {String} eventName
       *   [en]Name of the event.[/en]
       *   [ja]イベント名を指定します。[/ja]
       * @param {Function} listener
       *   [en]Function to execute when the event is triggered.[/en]
       *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
       */
/**
       * @method off
       * @signature off(eventName, [listener])
       * @description
       *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
       *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
       * @param {String} eventName
       *   [en]Name of the event.[/en]
       *   [ja]イベント名を指定します。[/ja]
       * @param {Function} listener
       *   [en]Function to execute when the event is triggered.[/en]
       *   [ja]削除するイベントリスナーを指定します。[/ja]
       */
// actual implementation to detect if whether current screen is portrait or not
_isPortrait:!(
/**
   * @method toast
   * @signature toast(message [, options] | options)
   * @return {Promise}
   *   [en]Will resolve when the toast is hidden.[/en]
   *   [ja][/ja]
   * @param {String} message
   *   [en]Toast message. This argument is optional but if it's not defined then `options.message` must be defined instead.[/en]
   *   [ja][/ja]
   * @param {Object} options
   *   [en]Parameter object.[/en]
   *   [ja]オプションを指定するオブジェクトです。[/ja]
   * @param {String} [options.message]
   *   [en]Notification message.[/en]
   *   [ja]トーストに表示する文字列を指定します。[/ja]
   * @param {String} [options.buttonLabel]
   *   [en]Label for the button.[/en]
   *   [ja]確認ボタンのラベルを指定します。[/ja]
   * @param {String} [options.animation]
   *   [en]Animation name. Available animations are `none`, `fade`, `ascend`, `lift` and `fall`. Default is `ascend` for Android and `lift` for iOS.[/en]
   *   [ja]トーストを表示する際のアニメーション名を指定します。"none", "fade", "ascend", "lift", "fall"のいずれかを指定できます。[/ja]
   * @param {Number} [options.timeout]
   *   [en]Number of miliseconds where the toast is visible before hiding automatically.[/en]
   *   [ja][/ja]
   * @param {Boolean} [options.force]
   *   [en]If `true`, the toast skips the notification queue and is shown immediately. Defaults to `false`.[/en]
   *   [ja][/ja]
   * @param {String} [options.id]
   *   [en]The `<ons-toast>` element's ID.[/en]
   *   [ja]ons-toast要素のID。[/ja]
   * @param {String} [options.class]
   *   [en]The `<ons-toast>` element's class.[/en]
   *   [ja]ons-toast要素のclass。[/ja]
   * @param {String} [options.modifier]
   *   [en]Modifier for the element.[/en]
   *   [ja]トーストのmodifier属性の値を指定します。[/ja]
   * @param {Function} [options.callback]
   *   [en]Function that executes after toast has been hidden.[/en]
   *   [ja]トーストが閉じられた時に呼び出される関数オブジェクトを指定します。[/ja]
   * @description
   *   [en]
   *     Display a simple notification toast with an optional button that can be used for simple actions.
   *
   *     It can be called in the following ways:
   *
   *     ```
   *     ons.notification.toast(message, options);
   *     ons.notification.toast(options);
   *     ```
   *   [/en]
   *   [ja][/ja]
   */
xe.toast=function(a,r){var s=new Promise(function(e){b.checkMissingImport("Toast"),// Throws error, must be inside promise
r=ye(a,r,{timeout:0,force:!1});function t(t){i&&o().then(function(){i&&(i.remove(),i=null,r.callback(t),e(t))})}function n(){i.parentElement&&i.show(r).then(function(){r.timeout&&setTimeout(function(){return t(-1)},r.timeout)})}var i=b.createElement("\n      <ons-toast>\n        ".concat(r.message,"\n        ").concat(r.buttonLabels?"<button>".concat(r.buttonLabels[0],"</button>"):"","\n      </ons-toast>\n    ")),o=(be(i,r),i.hide.bind(i));r.buttonLabels&&(b.findChild(i._toast,"button").onclick=function(){return t(0)}),
// overwrite so that ons.notification.hide resolves when toast.hide is called
i.hide=function(){return t(-1)},document.body.appendChild(i),r.compile(i);setImmediate(function(){return r.force?n():Se.add(n,s)})});return s}),
/**
       * @method isPortrait
       * @signature isPortrait()
       * @return {Boolean}
       *   [en]Will be true if the current orientation is portrait mode.[/en]
       *   [ja]オリエンテーションがportraitモードの場合にtrueになります。[/ja]
       * @description
       *   [en]Returns whether the current screen orientation is portrait or not.[/en]
       *   [ja]オリエンテーションがportraitモードかどうかを返します。[/ja]
       */
isPortrait:function(){return this._isPortrait()},
/**
       * @method isLandscape
       * @signature isLandscape()
       * @return {Boolean}
       *   [en]Will be true if the current orientation is landscape mode.[/en]
       *   [ja]オリエンテーションがlandscapeモードの場合にtrueになります。[/ja]
       * @description
       *   [en]Returns whether the current screen orientation is landscape or not.[/en]
       *   [ja]オリエンテーションがlandscapeモードかどうかを返します。[/ja]
       */
isLandscape:function(){return!this.isPortrait()},_init:function(){return document.addEventListener("DOMContentLoaded",this._onDOMContentLoaded.bind(this),!1),"orientation"in window?window.addEventListener("orientationchange",this._onOrientationChange.bind(this),!1):window.addEventListener("resize",this._onResize.bind(this),!1),this._isPortrait=function(){return window.innerHeight>window.innerWidth},this},_onDOMContentLoaded:function(){this._installIsPortraitImplementation(),this.emit("change",{isPortrait:this.isPortrait()})},_installIsPortraitImplementation:function(){var t=window.innerWidth<window.innerHeight;"orientation"in window?window.orientation%180==0?this._isPortrait=function(){return 0===Math.abs(window.orientation%180)?t:!t}:this._isPortrait=function(){return 90===Math.abs(window.orientation%180)?t:!t}:this._isPortrait=function(){return window.innerHeight>window.innerWidth}},_onOrientationChange:function(){var n=this,i=this._isPortrait(),o=0,a=setInterval(function(){o++;var t=window.innerWidth,e=window.innerHeight;(i&&t<=e||!i&&e<=t||50===o)&&(n.emit("change",{isPortrait:i}),clearInterval(a))},20)},
// Run on not mobile browser.
_onResize:function(){this.emit("change",{isPortrait:this.isPortrait()})}}),jt._init()),t={
/**
     * @method add
     * @signature add(element, modifier [, modifier])
     * @description
     *   [en]Add the specified modifiers to the element if they are not already included.[/en]
     *   [ja][/ja]
     * @param {HTMLElement} element
     *   [en]Target element.[/en]
     *   [ja][/ja]
     * @param {String} modifier
     *   [en]Name of the modifier.[/en]
     *   [ja][/ja]
     */
add:function(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return n.forEach(function(t){return b.addModifier(e,t)})},
/**
     * @method remove
     * @signature remove(element, modifier [, modifier])
     * @description
     *   [en]Remove the specified modifiers from the element if they are included.[/en]
     *   [ja][/ja]
     * @param {HTMLElement} element
     *   [en]Target element.[/en]
     *   [ja][/ja]
     * @param {String} modifier
     *   [en]Name of the modifier.[/en]
     *   [ja][/ja]
     */
remove:function(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return n.forEach(function(t){return b.removeModifier(e,t)})},
/**
     * @method contains
     * @signature contains(element, modifier)
     * @description
     *   [en]Check whether the specified modifier is included in the element.[/en]
     *   [ja][/ja]
     * @param {HTMLElement} element
     *   [en]Target element.[/en]
     *   [ja][/ja]
     * @param {String} modifier
     *   [en]Name of the modifier.[/en]
     *   [ja][/ja]
     * @return {Boolean}
     *   [en]`true` when the specified modifier is found in the element's `modifier` attribute. `false` otherwise.[/en]
     *   [ja][/ja]
     */
contains:b.hasModifier,
/**
     * @method toggle
     * @signature toggle(element, modifier [, force])
     * @description
     *   [en]Toggle the specified modifier.[/en]
     *   [ja][/ja]
     * @param {HTMLElement} element
     *   [en]Target element.[/en]
     *   [ja][/ja]
     * @param {String} modifier
     *   [en]Name of the modifier.[/en]
     *   [ja][/ja]
     * @param {String} force
     *   [en]If it evaluates to true, add specified modifier value, and if it evaluates to false, remove it.[/en]
     *   [ja][/ja]
     */
toggle:b.toggleModifier},Le=new kt,Oe=(Le._visible=!1,document.addEventListener("deviceready",function(){("undefined"!=typeof Keyboard?(
// https://github.com/martinmose/cordova-keyboard/blob/95f3da3a38d8f8e1fa41fbf40145352c13535a00/README.md
Keyboard.onshow=we,Keyboard.onhide=Ee,Le.emit("init",{visible:Keyboard.isVisible}),0):void 0===cordova.plugins||void 0===cordova.plugins.Keyboard||(
// https://github.com/driftyco/ionic-plugins-keyboard/blob/ca27ecf/README.md
window.addEventListener("native.keyboardshow",we),window.addEventListener("native.keyboardhide",Ee),Le.emit("init",{visible:cordova.plugins.Keyboard.isVisible}),0))&&((document.querySelector("[ons-keyboard-active]")||document.querySelector("[ons-keyboard-inactive]"))&&Ce(),Le.on=Ce)}),Ae=0,function(){return Ae++}),Me=function(){function e(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};l(this,e),this._lockList=[],this._waitList=[],this._log=t.log||function(){}}
/**
     * Register a lock.
     *
     * @return {Function} Callback for unlocking.
     */return c(e,[{key:"lock",value:function(){function t(){e._unlock(t)}var e=this;return t.id=Oe(),this._lockList.push(t),this._log("lock: "+t.id),t}},{key:"_unlock",value:function(t){var e=this._lockList.indexOf(t);if(-1===e)throw new Error("This function is not registered in the lock list.");this._lockList.splice(e,1),this._log("unlock: "+t.id),this._tryToFreeWaitList()}},{key:"_tryToFreeWaitList",value:function(){for(;!this.isLocked()&&0<this._waitList.length;)this._waitList.shift()()}
/**
       * Register a callback for waiting unlocked door.
       *
       * @params {Function} callback Callback on unlocking the door completely.
       */},{key:"waitUnlock",value:function(t){if(!(t instanceof Function))throw new Error("The callback param must be a function.");this.isLocked()?this._waitList.push(t):t()}
/**
       * @return {Boolean}
       */},{key:"isLocked",value:function(){return 0<this._lockList.length}}]),e}();
// Default implementation for global PageLoader.
function Te(t,e,n){var i=t.page,o=t.parent;t.params,k.getPageHTMLAsync(i).then(function(t){t=b.createElement(t);o.appendChild(t),e(t)}).catch(function(t){return n(t)})}function Ie(t){t._destroy instanceof Function?t._destroy():t.remove()}function De(t){b.throw("This method must be called ".concat(t?"after":"before"," ons.isReady() is true"))}var Ne,Be=function(){
/**
     * @param {Function} [fn] Returns an object that has "element" property and "unload" function.
     */
function n(t,e){l(this,n),this._loader=t instanceof Function?t:Te,this._unloader=e instanceof Function?e:Ie}
/**
     * Set internal loader implementation.
     */return c(n,[{key:"internalLoader",get:function(){return this._loader}
/**
       * @param {any} options.page
       * @param {Element} options.parent A location to load page.
       * @param {Object} [options.params] Extra parameters for ons-page.
       * @param {Function} done Take an object that has "element" property and "unload" function.
       * @param {Function} error Function called when there is an error.
       */,set:function(t){if(!(t instanceof Function))throw Error("First parameter must be an instance of Function");this._loader=t}},{key:"load",value:function(t,e,n){var i=t.page,o=t.parent,t=t.params,a=void 0===t?{}:t;this._loader({page:i,parent:o,params:a},function(t){if(!(t instanceof Element))throw Error("pageElement must be an instance of Element.");
// store meta info
ons&&(ons._meta||(ons._meta={}),ons._meta.PageLoader={page:i,parent:o,params:a}),e(t)},n)}},{key:"unload",value:function(t){if(!(t instanceof Element))throw Error("pageElement must be an instance of Element.");this._unloader(t)}}]),n}(),Re=new Be,He=new Be(function(t,e){var n=t.page,i=t.parent,t=(t.params,b.createElement(n.trim()));i.appendChild(t),e(t)},Ie),T={animit:C,defaultPageLoader:Re,elements:i,GestureDetector:A,modifier:t,notification:xe,orientation:Pe,pageAttributeExpression:Ut,PageLoader:Be,platform:r,softwareKeyboard:Le,_autoStyle:g,_internal:k,_readyLock:new Me,_util:b};T.platform.select((window.location.search.match(/platform=([\w-]+)/)||[])[1]),Ne=T._readyLock.lock(),window.addEventListener("DOMContentLoaded",function(){T.isWebView()?window.document.addEventListener("deviceready",Ne,{once:!0}):Ne()},{once:!0});
/**
   * @method isReady
   * @signature isReady()
   * @return {Boolean}
   *   [en]Will be true if Onsen UI is initialized.[/en]
   *   [ja]初期化されているかどうかを返します。[/ja]
   * @description
   *   [en]Returns true if Onsen UI is initialized.[/en]
   *   [ja]Onsen UIがすでに初期化されているかどうかを返すメソッドです。[/ja]
   */
T.isReady=function(){return!T._readyLock.isLocked()},
/**
   * @method isWebView
   * @signature isWebView()
   * @return {Boolean}
   *   [en]Will be true if the app is running in Cordova.[/en]
   *   [ja]Cordovaで実行されている場合にtrueになります。[/ja]
   * @description
   *   [en]Returns true if running inside Cordova.[/en]
   *   [ja]Cordovaで実行されているかどうかを返すメソッドです。[/ja]
   */
T.isWebView=T.platform.isWebView,
/**
   * @method ready
   * @signature ready(callback)
   * @description
   *   [ja]アプリの初期化に利用するメソッドです。渡された関数は、Onsen UIの初期化が終了している時点で必ず呼ばれます。[/ja]
   *   [en]Method used to wait for app initialization. Waits for `DOMContentLoaded` and `deviceready`, when necessary, before executing the callback.[/en]
   * @param {Function} callback
   *   [en]Function that executes after Onsen UI has been initialized.[/en]
   *   [ja]Onsen UIが初期化が完了した後に呼び出される関数オブジェクトを指定します。[/ja]
   */
T.ready=function(t){T.isReady()?t():T._readyLock.waitUnlock(t)},
/**
   * @method setDefaultDeviceBackButtonListener
   * @signature setDefaultDeviceBackButtonListener(listener)
   * @param {Function} listener
   *   [en]Function that executes when device back button is pressed. Must be called on `ons.ready`.[/en]
   *   [ja]デバイスのバックボタンが押された時に実行される関数オブジェクトを指定します。[/ja]
   * @description
   *   [en]Set default handler for device back button.[/en]
   *   [ja]デバイスのバックボタンのためのデフォルトのハンドラを設定します。[/ja]
   */
T.setDefaultDeviceBackButtonListener=function(t){T.isReady()||De(!0),T._defaultDeviceBackButtonHandler.setListener(t)},
/**
   * @method disableDeviceBackButtonHandler
   * @signature disableDeviceBackButtonHandler()
   * @description
   * [en]Disable device back button event handler. Must be called on `ons.ready`.[/en]
   * [ja]デバイスのバックボタンのイベントを受け付けないようにします。[/ja]
   */
T.disableDeviceBackButtonHandler=function(){T.isReady()||De(!0),k.dbbDispatcher.disable()},
/**
   * @method enableDeviceBackButtonHandler
   * @signature enableDeviceBackButtonHandler()
   * @description
   * [en]Enable device back button event handler. Must be called on `ons.ready`.[/en]
   * [ja]デバイスのバックボタンのイベントを受け付けるようにします。[/ja]
   */
T.enableDeviceBackButtonHandler=function(){T.isReady()||De(!0),k.dbbDispatcher.enable()},T.fireDeviceBackButtonEvent=function(){k.dbbDispatcher.fireDeviceBackButtonEvent()},
/**
   * @method enableAutoStatusBarFill
   * @signature enableAutoStatusBarFill()
   * @description
   *   [en]Enable status bar fill feature on iOS7 and above (except for iPhone X). Must be called before `ons.ready`.[/en]
   *   [ja]iOS7以上（iPhone Xは除く）で、ステータスバー部分の高さを自動的に埋める処理を有効にします。[/ja]
   */
T.enableAutoStatusBarFill=function(){T.isReady()&&De(!1),k.config.autoStatusBarFill=!0},
/**
   * @method disableAutoStatusBarFill
   * @signature disableAutoStatusBarFill()
   * @description
   *   [en]Disable status bar fill feature on iOS7 and above (except for iPhone X). Must be called before `ons.ready`.[/en]
   *   [ja]iOS7以上（iPhone Xは除く）で、ステータスバー部分の高さを自動的に埋める処理を無効にします。[/ja]
   */
T.disableAutoStatusBarFill=function(){T.isReady()&&De(!1),k.config.autoStatusBarFill=!1},
/**
   * @method mockStatusBar
   * @signature mockStatusBar()
   * @description
   *   [en]Creates a static element similar to iOS status bar. Only useful for browser testing. Must be called before `ons.ready`.[/en]
   *   [ja][/ja]
   */
T.mockStatusBar=function(){T.isReady()&&De(!1);function t(){var t,e,n,i;document.body.children[0]&&document.body.children[0].classList.contains("ons-status-bar-mock")||(i=function(t){return'<i class="'.concat(t.split("-")[0]," ").concat(t,'"></i>')},e=(t=r.isAndroid())?"".concat(i("zmdi-twitter")," ").concat(i("zmdi-google-play")):"No SIM ".concat(i("fa-wifi")),n=t?"":"12:28 PM",i=t?"".concat(i("zmdi-network")," ").concat(i("zmdi-wifi")," ").concat(i("zmdi-battery")," 12:28 PM"):"80% ".concat(i("fa-battery-three-quarters")),document.body.insertBefore(b.createElement('<div class="ons-status-bar-mock '.concat(t?"android":"ios",'">')+"<div>".concat(e,"</div><div>").concat(n,"</div><div>").concat(i,"</div>")+"</div>"),document.body.firstChild))}document.body?t():k.waitDOMContentLoaded(t)},
/**
   * @method disableAnimations
   * @signature disableAnimations()
   * @description
   *   [en]Disable all animations. Could be handy for testing and older devices.[/en]
   *   [ja]アニメーションを全て無効にします。テストの際に便利です。[/ja]
   */
T.disableAnimations=function(){k.config.animationsDisabled=!0},
/**
   * @method enableAnimations
   * @signature enableAnimations()
   * @description
   *   [en]Enable animations (default).[/en]
   *   [ja]アニメーションを有効にします。[/ja]
   */
T.enableAnimations=function(){k.config.animationsDisabled=!1},T._disableWarnings=function(){k.config.warningsDisabled=!0},T._enableWarnings=function(){k.config.warningsDisabled=!1},
/**
   * @method disableAutoStyling
   * @signature disableAutoStyling()
   * @description
   *   [en]Disable automatic styling.[/en]
   *   [ja][/ja]
   */
T.disableAutoStyling=g.disable,
/**
   * @method enableAutoStyling
   * @signature enableAutoStyling()
   * @description
   *   [en]Enable automatic styling based on OS (default).[/en]
   *   [ja][/ja]
   */
T.enableAutoStyling=g.enable,
/**
   * @method disableIconAutoPrefix
   * @signature disableIconAutoPrefix()
   * @description
   *   [en]Disable adding `fa-` prefix automatically to `ons-icon` classes. Useful when including custom icon packs.[/en]
   *   [ja][/ja]
   */
T.disableIconAutoPrefix=function(){b.checkMissingImport("Icon"),i.Icon.setAutoPrefix(!1)},
/**
   * @method forcePlatformStyling
   * @signature forcePlatformStyling(platform)
   * @description
   *   [en]Refresh styling for the given platform. Only useful for demos. Use `ons.platform.select(...)` instead for development and production.[/en]
   *   [ja][/ja]
   * @param {string} platform New platform to style the elements.
   */
T.forcePlatformStyling=function(t){T.enableAutoStyling(),T.platform.select(t||"ios"),T._util.arrayFrom(document.querySelectorAll("*")).forEach(function(t){"ons-if"===t.tagName.toLowerCase()?t._platformUpdate():t.tagName.match(/^ons-/i)&&(g.prepare(t,!0),"ons-tabbar"===t.tagName.toLowerCase())&&t._updatePosition()})},
/**
   * @method preload
   * @signature preload(templatePaths)
   * @param {String|Array} templatePaths
   *   [en]Set of HTML file paths containing 'ons-page' elements.[/en]
   *   [ja][/ja]
   * @return {Promise}
   *   [en]Promise that resolves when all the templates are cached.[/en]
   *   [ja][/ja]
   * @description
   *   [en]Separated files need to be requested on demand and this can slightly delay pushing new pages. This method requests and caches templates for later use.[/en]
   *   [ja][/ja]
   */
T.preload=function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[];return Promise.all((t instanceof Array?t:[t]).map(function(t){return"string"!=typeof t&&b.throw("Expected string arguments but got "+o(t)),k.getTemplateHTMLAsync(t)}))},
/**
   * @method createElement
   * @signature createElement(template, options)
   * @param {String} template
   *   [en]Either an HTML file path, a `<template>` id or an HTML string such as `'<div id="foo">hoge</div>'`.[/en]
   *   [ja][/ja]
   * @param {Object} [options]
   *   [en]Parameter object.[/en]
   *   [ja]オプションを指定するオブジェクト。[/ja]
   * @param {Boolean|HTMLElement} [options.append]
   *   [en]Whether or not the element should be automatically appended to the DOM.  Defaults to `false`. If `true` value is given, `document.body` will be used as the target.[/en]
   *   [ja][/ja]
   * @param {HTMLElement} [options.insertBefore]
   *   [en]Reference node that becomes the next sibling of the new node (`options.append` element).[/en]
   *   [ja][/ja]
   * @return {HTMLElement|Promise}
   *   [en]If the provided template was an inline HTML string, it returns the new element. Otherwise, it returns a promise that resolves to the new element.[/en]
   *   [ja][/ja]
   * @description
   *   [en]Create a new element from a template. Both inline HTML and external files are supported although the return value differs.[/en]
   *   [ja][/ja]
   */
T.createElement=function(t){function e(t){return(t=T._util.createElement(t)).remove(),n.append&&((n.append instanceof HTMLElement?n.append:document.body).insertBefore(t,n.insertBefore||null),n.link instanceof Function)&&n.link(t),t}var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return"<"===(t=t.trim()).charAt(0)?e(t):k.getPageHTMLAsync(t).then(e)},
/**
   * @method createPopover
   * @signature createPopover(page, [options])
   * @param {String} page
   *   [en]Page name. Can be either an HTML file or a <template> containing a <ons-dialog> component.[/en]
   *   [ja]pageのURLか、もしくは`<template>`で宣言したテンプレートのid属性の値を指定できます。[/ja]
   * @param {Object} [options]
   *   [en]Parameter object.[/en]
   *   [ja]オプションを指定するオブジェクト。[/ja]
   * @param {Object} [options.parentScope]
   *   [en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]
   *   [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。このパラメータはAngularJSバインディングでのみ利用できます。[/ja]
   * @return {Promise}
   *   [en]Promise object that resolves to the popover component object.[/en]
   *   [ja]ポップオーバーのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]
   * @description
   *   [en]Create a popover instance from a template.[/en]
   *   [ja]テンプレートからポップオーバーのインスタンスを生成します。[/ja]
   */
/**
   * @method createDialog
   * @signature createDialog(page, [options])
   * @param {String} page
   *   [en]Page name. Can be either an HTML file or an `<template>` containing a <ons-dialog> component.[/en]
   *   [ja]pageのURLか、もしくは`<template>`で宣言したテンプレートのid属性の値を指定できます。[/ja]
   * @param {Object} [options]
   *   [en]Parameter object.[/en]
   *   [ja]オプションを指定するオブジェクト。[/ja]
   * @return {Promise}
   *   [en]Promise object that resolves to the dialog component object.[/en]
   *   [ja]ダイアログのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]
   * @description
   *   [en]Create a dialog instance from a template.[/en]
   *   [ja]テンプレートからダイアログのインスタンスを生成します。[/ja]
   */
/**
   * @method createAlertDialog
   * @signature createAlertDialog(page, [options])
   * @param {String} page
   *   [en]Page name. Can be either an HTML file or an `<template>` containing a <ons-alert-dialog> component.[/en]
   *   [ja]pageのURLか、もしくは`<template>`で宣言したテンプレートのid属性の値を指定できます。[/ja]
   * @param {Object} [options]
   *   [en]Parameter object.[/en]
   *   [ja]オプションを指定するオブジェクト。[/ja]
   * @return {Promise}
   *   [en]Promise object that resolves to the alert dialog component object.[/en]
   *   [ja]ダイアログのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]
   * @description
   *   [en]Create a alert dialog instance from a template.[/en]
   *   [ja]テンプレートからアラートダイアログのインスタンスを生成します。[/ja]
   */
T.createPopover=T.createDialog=T.createAlertDialog=function(t){return T.createElement(t,s({append:!0},1<arguments.length&&void 0!==arguments[1]?arguments[1]:{}))},
/**
   * @method openActionSheet
   * @signature openActionSheet(options)
   * @description
   *   [en]Shows an instant Action Sheet and lets the user choose an action.[/en]
   *   [ja][/ja]
   * @param {Object} [options]
   *   [en]Parameter object.[/en]
   *   [ja]オプションを指定するオブジェクト。[/ja]
   * @param {Array} [options.buttons]
   *   [en]Represent each button of the action sheet following the specified order. Every item can be either a string label or an object containing `label`, `icon` and `modifier` properties.[/en]
   *   [ja][/ja]
   * @param {String} [options.title]
   *   [en]Optional title for the action sheet.[/en]
   *   [ja][/ja]
   * @param {Number} [options.destructive]
   *   [en]Optional index of the "destructive" button (only for iOS). It can be specified in the button array as well.[/en]
   *   [ja][/ja]
   * @param {Boolean} [options.cancelable]
   *   [en]Whether the action sheet can be canceled by tapping on the background mask or not.[/en]
   *   [ja][/ja]
   * @param {String} [options.modifier]
   *   [en]Modifier attribute of the action sheet. E.g. `'destructive'`.[/en]
   *   [ja][/ja]
   * @param {String} [options.maskColor]
   *   [en]Optionally change the background mask color.[/en]
   *   [ja][/ja]
   * @param {String} [options.id]
   *   [en]The element's id attribute.[/en]
   *   [ja][/ja]
   * @param {String} [options.class]
   *   [en]The element's class attribute.[/en]
   *   [ja][/ja]
   * @return {Promise}
   *   [en]Will resolve when the action sheet is closed. The resolve value is either the index of the tapped button or -1 when canceled.[/en]
   *   [ja][/ja]
   */
T.openActionSheet=function(){var r=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return new Promise(function(n){b.checkMissingImport("ActionSheet"),ke(r);function i(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:-1;o&&(r.destroy&&r.destroy(o),o.removeEventListener("dialogcancel",i,!1),o.remove(),o=null,r.callback&&r.callback(e),n(e))}
// Main component
var o=b.createElement("\n    <ons-action-sheet\n      ".concat(r.title?'title="'.concat(r.title,'"'):"","\n      ").concat(r.cancelable?"cancelable":"","\n      ").concat(r.modifier?'modifier="'.concat(r.modifier,'"'):"","\n      ").concat(r.maskColor?'mask-color="'.concat(r.maskColor,'"'):"","\n      ").concat(r.id?'id="'.concat(r.id,'"'):"","\n      ").concat(r.class?'class="'.concat(r.class,'"'):"",'\n    >\n      <div class="action-sheet"></div>\n    </ons-action-sheet>\n  ')),a=(
// Link cancel handler
o.addEventListener("dialogcancel",i,!1),document.createDocumentFragment());
// Resolve action and clean up
r.buttons.forEach(function(t,e){t="string"==typeof t?{label:t}:s({},t),r.destructive===e&&(t.modifier=(t.modifier||"")+" destructive"),t=b.createElement("\n      <ons-action-sheet-button\n        ".concat(t.icon?'icon="'.concat(t.icon,'"'):"","\n        ").concat(t.modifier?'modifier="'.concat(t.modifier,'"'):"","\n      >\n        ").concat(t.label,"\n      </ons-action-sheet-button>\n    "));t.onclick=function(t){return o.hide().then(function(){return i(t,e)})},a.appendChild(t)}),
// Finish component and attach
b.findChild(o,".action-sheet").appendChild(a),document.body.appendChild(o),r.compile&&r.compile(el.dialog),
// Show
setImmediate(function(){return o.show({animation:r.animation,animationOptions:r.animationOptions})})})},
/**
   * @method resolveLoadingPlaceholder
   * @signature resolveLoadingPlaceholder(page)
   * @param {String} page
   *   [en]Page name. Can be either an HTML file or a `<template>` id.[/en]
   *   [ja]pageのURLか、もしくは`<template>`で宣言したテンプレートのid属性の値を指定できます。[/ja]
   * @description
   *   [en]If no page is defined for the `ons-loading-placeholder` attribute it will wait for this method being called before loading the page.[/en]
   *   [ja]ons-loading-placeholderの属性値としてページが指定されていない場合は、ページロード前に呼ばれるons.resolveLoadingPlaceholder処理が行われるまで表示されません。[/ja]
   */
T.resolveLoadingPlaceholder=function(e,n){var t=T._util.arrayFrom(window.document.querySelectorAll("[ons-loading-placeholder]"));0===t.length&&b.throw("No ons-loading-placeholder exists"),t.filter(function(t){return!t.getAttribute("page")}).forEach(function(t){t.setAttribute("ons-loading-placeholder",e),T._resolveLoadingPlaceholder(t,e,n)})},T._setupLoadingPlaceHolders=function(){T.ready(function(){T._util.arrayFrom(window.document.querySelectorAll("[ons-loading-placeholder]")).forEach(function(t){var e=t.getAttribute("ons-loading-placeholder");"string"==typeof e&&T._resolveLoadingPlaceholder(t,e)})})},T._resolveLoadingPlaceholder=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:function(t,e){return e()};t&&T.createElement(t).then(function(t){t.style.display="none",e.appendChild(t),n(t,function(){for(;e.firstChild&&e.firstChild!==t;)e.removeChild(e.firstChild);t.style.display=""})}).catch(function(t){return Promise.reject("Unabled to resolve placeholder: "+t)})};
/**
   * @method getScriptPage
   * @signature getScriptPage()
   * @description
   *   [en]Access the last created page from the current `script` scope. Only works inside `<script></script>` tags that are direct children of `ons-page` element. Use this to add lifecycle hooks to a page.[/en]
   *   [ja][/ja]
   * @return {HTMLElement}
   *   [en]Returns the corresponding page element.[/en]
   *   [ja][/ja]
   */
var qe="currentScript"in document?function(){return document.currentScript}:function(){return document.scripts[document.scripts.length-1]};
/*
  Copyright 2013-2015 ASIAL CORPORATION

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  */
function ze(){var t;return"function"!=typeof HTMLElement?((t=function(){}).prototype=document.createElement("div"),t):HTMLElement}T.getScriptPage=function(){return qe()&&/ons-page/i.test(qe().parentElement.tagName)&&qe().parentElement||null};function I(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;return"translate3d(".concat(t,", ").concat(e,", ").concat(n,")")}function Fe(t){"ONS-PAGE"!==t.nodeName&&b.throw("Only page elements can be children of navigator")}function je(t,e){b.throw('"'.concat(t,'" must be ').concat(e))}function Ve(t,e,n){return(1-n)*t+n*e}var We,e,D=function(){d(e,ze());var t=f(e);function e(){return l(this,e),t.call(this)}return c(e)}(),t=function(){d(n,D);var e=f(n);
/**
     * @attribute platform
     * @initonly
     * @type {string}
     * @description
     *  [en]Space-separated platform names. Possible values are `"ios"`, `"android"`, `"windows"` and `"other"`.[/en]
     *  [ja][/ja]
     */
/**
     * @attribute orientation
     * @type {string}
     * @description
     *  [en]Either `"portrait"` or `"landscape"`.[/en]
     *  [ja]portraitもしくはlandscapeを指定します[/ja]
     */function n(){var t;return l(this,n),M(a(t=e.call(this)),function(){if(null!==r._getSelectedPlatform())t._platformUpdate();else if(!t._isAllowedPlatform()){for(;t.childNodes[0];)t.childNodes[0].remove();t._platformUpdate()}}),t._onOrientationChange(),t}return c(n,[{key:"connectedCallback",value:function(){Pe.on("change",this._onOrientationChange.bind(this))}},{key:"attributeChangedCallback",value:function(t){"orientation"===t&&this._onOrientationChange()}},{key:"disconnectedCallback",value:function(){Pe.off("change",this._onOrientationChange)}},{key:"_platformUpdate",value:function(){this.style.display=this._isAllowedPlatform()?"":"none"}},{key:"_isAllowedPlatform",value:function(){return!this.getAttribute("platform")||0<=this.getAttribute("platform").split(/\s+/).indexOf(r.getMobileOS())}},{key:"_onOrientationChange",value:function(){var t,e;this.hasAttribute("orientation")&&this._isAllowedPlatform()&&(t=this.getAttribute("orientation").toLowerCase(),e=Pe.isPortrait()?"portrait":"landscape",this.style.display=t===e?"":"none")}}],[{key:"observedAttributes",get:function(){return["orientation"]}}]),n}(),Xe=(i.If=t,customElements.define("ons-if",t),function(){
/**
     * @param {Object} options
     * @param {String} options.timing
     * @param {Number} options.duration
     * @param {Number} options.delay
     */
function e(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};l(this,e),this.timing=t.timing||"linear",this.duration=t.duration||0,this.delay=t.delay||0,this.def={timing:this.timing,duration:this.duration,delay:this.delay}}return c(e,null,[{key:"extend",value:function(){function t(){n.apply(this,arguments),b.extend(this,e)}var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},n=this;return t.prototype=this.prototype,t}}]),e}()),N={isIPhoneXPortraitPatchActive:function(){return null!=document.documentElement.getAttribute("onsflag-iphonex-portrait")&&window.innerWidth<window.innerHeight},isIPhoneXLandscapePatchActive:function(){
// If width === height, treat it as landscape
return null!=document.documentElement.getAttribute("onsflag-iphonex-landscape")&&window.innerWidth>=window.innerHeight},
/**
   * Returns the safe area lengths based on the current state of the safe areas.
   */
getSafeAreaLengths:function(){var t=N.isIPhoneXPortraitPatchActive()?{top:44,right:0,bottom:34,left:0}:N.isIPhoneXLandscapePatchActive()?{top:0,right:44,bottom:21,left:44}:{top:0,right:0,bottom:0,left:0};return t},
/**
   * Returns the safe area rect based on the current state of the safe areas.
   */
getSafeAreaDOMRect:function(){var t=N.isIPhoneXPortraitPatchActive()?{x:0,y:44,
/* 0 + 44 (top safe area) */
width:window.innerWidth,height:window.innerHeight-78/* height - 44 (top safe area) - 34 (bottom safe area) */}:N.isIPhoneXLandscapePatchActive()?{x:44,
/* 0 + 44 (left safe area) */
y:0,width:window.innerWidth-88,
/* width - 44 (left safe area) - 34 (right safe area) */
height:window.innerHeight-21/* height - 21 (bottom safe area) */}:{x:0,y:0,width:window.innerWidth,height:window.innerHeight};return s(s({},t),{},{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}},Ue=function(){d(o,Xe);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"linear":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.2:t;return l(this,o),i.call(this,{timing:e,delay:n,duration:t})}
/**
     * @param {HTMLElement} dialog
     * @param {Function} done
     */return c(o,[{key:"show",value:function(t,e){e()}
/**
       * @param {HTMLElement} dialog
       * @param {Function} done
       */},{key:"hide",value:function(t,e){e()}}]),o}(),Ye=function(){d(o,Ue);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"ease":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.4:t;return l(this,o),(e=i.call(this,{timing:e,delay:n,duration:t})).maskTiming="linear",e.maskDuration=.2,e}
/**
     * @param {Object} dialog
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){C.runAll(C(t._mask).queue({opacity:0}).wait(this.delay).queue({opacity:1},{duration:this.maskDuration,timing:this.maskTiming}),C(t._sheet,this.def).default({transform:"translate3d(0, 80%, 0)",opacity:0},{transform:"translate3d(0, 0, 0)",opacity:1}).queue(function(t){e&&e(),t()}))}
/**
       * @param {Object} dialog
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){C.runAll(C(t._mask).queue({opacity:1}).wait(this.delay).queue({opacity:0},{duration:this.maskDuration,timing:this.maskTiming}),C(t._sheet,this.def).default({transform:"translate3d(0, 0, 0)",opacity:1},{transform:"translate3d(0, 80%, 0)",opacity:0}).queue(function(t){e&&e(),t()}))}}]),o}(),$e=function(){d(o,Ue);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"ease":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.3:t;return l(this,o),(e=i.call(this,{timing:e,delay:n,duration:t})).maskTiming="linear",e.maskDuration=.2,N.isIPhoneXPortraitPatchActive()?e.liftAmount="calc(100% + 48px)":N.isIPhoneXLandscapePatchActive()?e.liftAmount="calc(100% + 33px)":e.liftAmount=document.body.clientHeight/2-1+"px",e}
/**
     * @param {Object} dialog
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){C.runAll(C(t._mask).queue({opacity:0}).wait(this.delay).queue({opacity:1},{duration:this.maskDuration,timing:this.maskTiming}),C(t._sheet,this.def).default({transform:"translate3d(0, ".concat(this.liftAmount,", 0)")},{transform:"translate3d(0, 0, 0)"}).queue(function(t){e&&e(),t()}))}
/**
       * @param {Object} dialog
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){C.runAll(C(t._mask).queue({opacity:1}).wait(this.delay).queue({opacity:0},{duration:this.maskDuration,timing:this.maskTiming}),C(t._sheet,this.def).default({transform:"translate3d(0, 0, 0)"},{transform:"translate3d(0, ".concat(this.liftAmount,", 0)")}).queue(function(t){e&&e(),t()}))}}]),o}(),Ge=function(){d(n,D);var t=f(n);function n(){var e;return l(this,n),(e=t.call(this)).constructor===n&&b.throwAbstract(),e._visible=!1,e._doorLock=new Me,e._cancel=e._cancel.bind(a(e)),e._selfCamelName=b.camelize(e.tagName.slice(4)),e._defaultDBB=function(t){return e.cancelable?e._cancel():t.callParentHandler()},e._animatorFactory=e._updateAnimatorFactory(),e}return c(n,[{key:"_scheme",get:function(){
// eslint-disable-line getter-return
b.throwMember()}},{key:"_updateAnimatorFactory",value:function(){b.throwMember()}},{key:"_toggleStyle",value:function(t){this.style.display=t?"block":"none"}},{key:"onDeviceBackButton",get:function(){return this._backButtonHandler},set:function(t){this._backButtonHandler&&this._backButtonHandler.destroy(),this._backButtonCallback=t,this._backButtonHandler=$t.createHandler(this,t)}},{key:"_cancel",value:function(){var t=this;this.cancelable&&!this._running&&(this._running=!0,this.hide().then(function(){t._running=!1,b.triggerElementEvent(t,"dialogcancel"),b.triggerElementEvent(t,"dialog-cancel")},function(){return t._running=!1}))}},{key:"show",value:function(){for(var e=this,t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];return this._setVisible.apply(this,[!0].concat(n)).then(function(t){return e.visible=!0,t})}},{key:"hide",value:function(){for(var e=this,t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];return this._setVisible.apply(this,[!1].concat(n)).then(function(t){return e.visible=!1,t})}},{key:"toggle",value:function(){for(var e=this,t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];return this._setVisible.apply(this,[!this.visible].concat(n)).then(function(t){return e.visible=e._visible,t})}},{key:"_setVisible",value:function(i){var t,o=this,a=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r=i?"show":"hide",e=((a=s({},a)).animationOptions=b.extend(a.animationOptions||{},this.animationOptions),!1);return b.triggerElementEvent(this,"pre".concat(r),(H(t={},this._selfCamelName,this),H(t,"cancel",function(){return e=!0}),t)),e?Promise.reject("Canceled in pre".concat(r," event.")):new Promise(function(n){o._doorLock.waitUnlock(function(){var t=o._doorLock.lock(),e=o._animatorFactory.newAnimator(a);i&&o._toggleStyle(!0,a),o._visible=i,b.iosPageScrollFix(i),M(o,function(){e[r](o,function(){i||o._toggleStyle(!1,a),t(),b.propagateAction(o,"_"+r),b.triggerElementEvent(o,"post"+r,H({},o._selfCamelName,o)),// postshow posthide
a.callback instanceof Function&&a.callback(o),n(o)})})})})}},{key:"maskColor",get:function(){return this.getAttribute("mask-color")},set:function(t){null==t?this.removeAttribute("mask-color"):this.setAttribute("mask-color",t)}},{key:"animationOptions",get:function(){return w.parseAnimationOptionsString(this.getAttribute("animation-options"))},set:function(t){null==t?this.removeAttribute("animation-options"):this.setAttribute("animation-options",JSON.stringify(t))}},{key:"_updateMask",value:function(){var t=this;M(this,function(){t._mask&&(t._mask.style.backgroundColor=t.maskColor)})}},{key:"_updateAnimation",value:function(){this._animatorFactory=this._updateAnimatorFactory()}},{key:"connectedCallback",value:function(){var t=this;"function"==typeof this._backButtonCallback?this.onDeviceBackButton=this._backButtonCallback:"function"==typeof this._defaultDBB&&(this.onDeviceBackButton=this._defaultDBB.bind(this)),M(this,function(){t._mask&&t._mask.addEventListener("click",t._cancel,!1)})}},{key:"disconnectedCallback",value:function(){this._backButtonHandler&&(this._backButtonHandler.destroy(),this._backButtonHandler=null),this._mask&&this._mask.removeEventListener("click",this._cancel,!1)}},{key:"attributeChangedCallback",value:function(t,e,n){var i=this;switch(t){case"modifier":v.onModifierChanged(e,n,this,this._scheme);break;case"animation":this._updateAnimation();break;case"mask-color":this._updateMask();break;case"visible":this.visible!==this._visible&&(
// update the mask and animation early in case `visible` attribute
// changed callback is called before `animation` or `mask-color`
this._updateMask(),this._updateAnimation(),M(this,function(){i._setVisible(i.visible)}))}}}],[{key:"observedAttributes",get:function(){return["modifier","animation","mask-color","visible"]}},{key:"events",get:function(){return["preshow","postshow","prehide","posthide","dialogcancel","dialog-cancel"]}}]),n}(),Ke=(b.defineBooleanProperties(Ge,["visible","disabled","cancelable"]),{".action-sheet":"action-sheet--*",".action-sheet-mask":"action-sheet-mask--*",".action-sheet-title":"action-sheet-title--*"}),Je={default:function(){return r.isAndroid()?Ye:$e},none:Ue},t=function(){d(i,Ge);var e=f(i);
/**
     * @event preshow
     * @description
     * [en]Fired just before the action sheet is displayed.[/en]
     * [ja]ダイアログが表示される直前に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.actionSheet
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Execute this function to stop the action sheet from being shown.[/en]
     *   [ja]この関数を実行すると、ダイアログの表示がキャンセルされます。[/ja]
     */
/**
     * @event postshow
     * @description
     * [en]Fired just after the action sheet is displayed.[/en]
     * [ja]ダイアログが表示された直後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.actionSheet
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     */
/**
     * @event prehide
     * @description
     * [en]Fired just before the action sheet is hidden.[/en]
     * [ja]ダイアログが隠れる直前に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.actionSheet
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Execute this function to stop the action sheet from being hidden.[/en]
     *   [ja]この関数を実行すると、ダイアログの非表示がキャンセルされます。[/ja]
     */
/**
     * @event posthide
     * @description
     * [en]Fired just after the action sheet is hidden.[/en]
     * [ja]ダイアログが隠れた後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.actionSheet
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     */
/**
     * @event dialogcancel
     * @description
     * [en]Fired when the action sheet is canceled.[/en]
     * [ja][/ja]
     */
/**
     * @attribute title
     * @type {String}
     * @description
     *  [en]Optional title of the action sheet. A new element will be created containing this string.[/en]
     *  [ja]アクションシートのタイトルを指定します。ここで指定した文字列を含む新しい要素が作成されます。[/ja]
     */
/**
     * @property title
     * @type {String}
     * @description
     *  [en]Optional title of the action sheet. A new element will be created containing this string.[/en]
     *  [ja]アクションシートのタイトルを指定します。ここで指定した文字列を含む新しい要素が作成されます。[/ja]
     */
/**
     * @attribute modifier
     * @type {String}
     * @description
     *  [en]The appearance of the action sheet.[/en]
     *  [ja]ダイアログの表現を指定します。[/ja]
     */
/**
     * @attribute cancelable
     * @description
     *  [en]If this attribute is set the action sheet can be closed by tapping the background or by pressing the back button on Android devices.[/en]
     *  [ja]この属性が設定されると、アクションシートの背景やAndroidデバイスのバックボタンを推すことでアクションシートが閉じるようになります。[/ja]
     */
/**
     * @attribute disabled
     * @description
     *  [en]If this attribute is set the action sheet is disabled.[/en]
     *  [ja]この属性がある時、ダイアログはdisabled状態になります。[/ja]
     */
/**
     * @attribute animation
     * @type {String}
     * @default default
     * @description
     *  [en]The animation used when showing and hiding the action sheet. Can be either `"none"` or `"default"`.[/en]
     *  [ja]ダイアログを表示する際のアニメーション名を指定します。"none"もしくは"default"を指定できます。[/ja]
     */
/**
     * @attribute animation-options
     * @type {Expression}
     * @description
     *  [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *  [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。e.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`[/ja]
     */
/**
     * @property animationOptions
     * @type {Object}
     * @description
     *   [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *   [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。例：{duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
     */
/**
     * @attribute mask-color
     * @type {String}
     * @default rgba(0, 0, 0, 0.2)
     * @description
     *  [en]Color of the background mask. Default is `"rgba(0, 0, 0, 0.2)"`.[/en]
     *  [ja]背景のマスクの色を指定します。"rgba(0, 0, 0, 0.2)"がデフォルト値です。[/ja]
     */
/**
     * @attribute visible
     * @type {Boolean}
     * @description
     *   [en]Whether the action sheet is visible or not.[/en]
     *   [ja]要素が見える場合に`true`。[/ja]
     */function i(){var t;return l(this,i),M(a(t=e.call(this)),function(){return t._compile()}),t}return c(i,[{key:"_scheme",get:function(){return Ke}},{key:"_mask",get:function(){return b.findChild(this,".action-sheet-mask")}},{key:"_sheet",get:function(){return b.findChild(this,".action-sheet")}},{key:"_title",get:function(){return this.querySelector(".action-sheet-title")}},{key:"_updateAnimatorFactory",value:function(){return new w({animators:Je,baseClass:Ue,baseClassName:"ActionSheetAnimator",defaultAnimation:this.getAttribute("animation")})}},{key:"_compile",value:function(){
/* Expected result:
         *   <ons-action-sheet>
         *     <div class="action-sheet-mask"></div>
         *     <div class="action-sheet">
         *       <div class="action-sheet-title></div>
         *       ...
         *     </div>
         *   </ons-action-sheet>
         */
if(g.prepare(this),this.style.display="none",this.style.zIndex=10001,!this._sheet){var t=document.createElement("div");for(t.classList.add("action-sheet");this.firstChild;)t.appendChild(this.firstChild);this.appendChild(t)}var e;this._title||((e=document.createElement("div")).classList.add("action-sheet-title"),this.title?e.innerHTML=this.title:e.hidden=!0,this._sheet.insertBefore(e,this._sheet.firstChild)),this._mask||((e=document.createElement("div")).classList.add("action-sheet-mask"),this.insertBefore(e,this.firstChild)),this._sheet.style.zIndex=20001,this._mask.style.zIndex=2e4,v.initModifier(this,this._scheme)}},{key:"_updateTitle",value:function(){this._title&&(this.title?(this._title.innerHTML=this.title,this._title.hidden=!1):this._title.hidden=!0)}},{key:"title",get:function(){return this.getAttribute("title")},set:function(t){null==t?this.removeAttribute("title"):this.setAttribute("title",t)}
/**
       * @property onDeviceBackButton
       * @type {Object}
       * @description
       *   [en]Back-button handler.[/en]
       *   [ja]バックボタンハンドラ。[/ja]
       */
/**
       * @property maskColor
       * @type {String}
       * @default rgba(0, 0, 0, 0.2)
       * @description
       *  [en]Color of the background mask. Default is "rgba(0, 0, 0, 0.2)".[/en]
       *  [ja]背景のマスクの色を指定します。"rgba(0, 0, 0, 0.2)"がデフォルト値です。[/ja]
       */
/**
       * @method show
       * @signature show([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name. Available animations are `"none"` and `"slide"`.[/en]
       *   [ja]アニメーション名を指定します。"none", "slide"のいずれかを指定します。[/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}` [/ja]
       * @param {Function} [options.callback]
       *   [en]This function is called after the action sheet has been revealed.[/en]
       *   [ja]ダイアログが表示され終わった後に呼び出される関数オブジェクトを指定します。[/ja]
       * @description
       *  [en]Show the action sheet.[/en]
       *  [ja]ダイアログを開きます。[/ja]
       * @return {Promise} Resolves to the displayed element.
       */
/**
       * @method hide
       * @signature hide([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name. Available animations are `"none"` and `"slide"`.[/en]
       *   [ja]アニメーション名を指定します。"none", "slide"のいずれかを指定できます。[/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`[/ja]
       * @param {Function} [options.callback]
       *   [en]This functions is called after the action sheet has been hidden.[/en]
       *   [ja]ダイアログが隠れた後に呼び出される関数オブジェクトを指定します。[/ja]
       * @description
       *   [en]Hide the action sheet.[/en]
       *   [ja]ダイアログを閉じます。[/ja]
       * @return {Promise}
       *   [en]Resolves to the hidden element[/en]
       *   [ja]隠れた要素を解決します。[/ja]
       */
/**
       * @property visible
       * @type {Boolean}
       * @description
       *   [en]Whether the action sheet is visible or not.[/en]
       *   [ja]要素が見える場合に`true`。[/ja]
       */
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the action sheet is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
/**
       * @property cancelable
       * @type {Boolean}
       * @description
       *   [en]Whether the action sheet is cancelable or not. A cancelable action sheet can be closed by tapping the background or by pressing the back button on Android devices.[/en]
       *   [ja]アクションシートがキャンセル可能かどうかを設定します。キャンセル可能なアクションシートは、背景をタップしたりAndroidデバイスのバックボタンを推すことで閉じるようになります。[/ja]
       */},{key:"attributeChangedCallback",value:function(t,e,n){"title"===t?this._updateTitle():p(h(i.prototype),"attributeChangedCallback",this).call(this,t,e,n)}
/**
       * @param {String} name
       * @param {ActionSheetAnimator} Animator
       */}],[{key:"observedAttributes",get:function(){return[].concat(m(p(h(i),"observedAttributes",this)),["title"])}},{key:"registerAnimator",value:function(t,e){e.prototype instanceof Ue||b.throwAnimator("ActionSheet"),Je[t]=e}},{key:"animators",get:function(){return Je}},{key:"ActionSheetAnimator",get:function(){return Ue}}]),i}(),Qe=(i.ActionSheet=t,customElements.define("ons-action-sheet",t),function(){function t(){l(this,t),this._queue=[],this._index=0}return c(t,[{key:"animate",value:
/**
       * @method animate
       * @desc main animation function
       * @param {Element} element
       * @param {Object} finalCSS
       * @param {number} [duration=200] - duration in milliseconds
       * @return {Object} result
       * @return {Function} result.then(callback) - sets a callback to be executed after the animation has stopped
       * @return {Function} result.stop(options) - stops the animation; if options.stopNext is true then it doesn't call the callback
       * @return {Function} result.finish(ms) - finishes the animation in the specified time in milliseconds
       * @return {Function} result.speed(ms) - sets the animation speed so that it finishes as if the original duration was the one specified here
       * @example
       * ````
       *  var result = animator.animate(el, {opacity: 0.5}, 1000);
       *
       *  el.addEventListener('click', function(e){
       *    result.speed(200).then(function(){
       *      console.log('done');
       *    });
       *  }, 300);
       * ````
       */
function(i,o){var n,a=2<arguments.length&&void 0!==arguments[2]?arguments[2]:200,r=(new Date).getTime(),s={},l=!1,c=!1,u=!1,d=Object.keys(o),h={stop:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=(u&&clearTimeout(u),Math.min(1,((new Date).getTime()-r)/a));return d.forEach(function(t){i.style[t]=(1-e)*s[t]+e*o[t]+("opacity"==t?"":"px")}),i.style.transitionDuration="0s",t.stopNext?c=!1:l||(l=!0,c&&c()),h},then:function(t){return c=t,l&&c&&c(),h},speed:function(t){var e,n;return k.config.animationsDisabled&&(t=0),l||(u&&clearTimeout(u),t=t*(1-(e=((new Date).getTime()-r)/a)),d.forEach(function(t){i.style[t]=(1-e)*s[t]+e*o[t]+("opacity"==t?"":"px")}),n=window.getComputedStyle(i),d.forEach(n.getPropertyValue.bind(n)),i.offsetHeight,r=i.speedUpTime,a=t,i.style.transitionDuration=a/1e3+"s",d.forEach(function(t){i.style[t]=o[t]+("opacity"==t?"":"px")}),u=setTimeout(h.stop,t)),h},finish:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:50,e=((new Date).getTime()-r)/a;return h.speed(t/(1-e)),h}};return i.hasAttribute("disabled")||l||k.config.animationsDisabled||(n=window.getComputedStyle(i),d.forEach(function(t){var e=parseFloat(n.getPropertyValue(t));s[t]=isNaN(e)?0:e}),l||(i.style.transitionProperty=d.join(","),i.style.transitionDuration=a/1e3+"s",d.forEach(function(t){i.style[t]=o[t]+("opacity"==t?"":"px")})),u=setTimeout(h.stop,a),this._onStopAnimations(i,h.stop)),h}},{key:"_onStopAnimations",value:function(e,n){var i=this._queue,o=this._index++;i[e]=i[e]||[],i[e][o]=function(t){return delete i[e][o],i[e]&&0==i[e].length&&delete i[e],n(t)}}
/**
      * @method stopAnimations
      * @desc stops active animations on a specified element
      * @param {Element|Array} element - element or array of elements
      * @param {Object} [options={}]
      * @param {Boolean} [options.stopNext] - the callbacks after the animations won't be called if this option is true
      */},{key:"stopAnimations",value:function(t){var e=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(Array.isArray(t))return t.forEach(function(t){e.stopAnimations(t,n)});(this._queue[t]||[]).forEach(function(t){t(n||{})})}
/**
      * @method stopAll
      * @desc stops all active animations
      * @param {Object} [options={}]
      * @param {Boolean} [options.stopNext] - the callbacks after the animations won't be called if this option is true
      */},{key:"stopAll",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};this.stopAnimations(Object.keys(this._queue),t)}
/**
      * @method fade
      * @desc fades the element (short version for animate(el, {opacity: 0}))
      * @param {Element} element
      * @param {number} [duration=200]
      */},{key:"fade",value:function(t){return this.animate(t,{opacity:0},1<arguments.length&&void 0!==arguments[1]?arguments[1]:200)}}]),t}()),Ze={"":"ripple--*",".ripple__wave":"ripple--*__wave",".ripple__background":"ripple--*__background"},t=function(){d(n,D);var t=f(n);
/**
     * @attribute color
     * @type {String}
     * @description
     *   [en]Color of the ripple effect.[/en]
     *   [ja]リップルエフェクトの色を指定します。[/ja]
     */
/**
     * @attribute modifier
     * @type {String}
     * @description
     *   [en]The appearance of the ripple effect.[/en]
     *   [ja]エフェクトの表現を指定します。[/ja]
     */
/**
     * @attribute background
     * @type {String}
     * @description
     *   [en]Color of the background.[/en]
     *   [ja]背景の色を設定します。[/ja]
     */
/**
     * @attribute size
     * @type {String}
     * @description
     *   [en]Sizing of the wave on ripple effect. Set "cover" or "contain". Default is "cover".[/en]
     *   [ja]エフェクトのサイズを指定します。"cover"もしくは"contain"を指定します。デフォルトは"cover"です。[/ja]
     */
/**
     * @attribute center
     * @type {Boolean}
     * @description
     *   [en]If this attribute presents, change the position of wave effect to center of the target element.[/en]
     *   [ja]この要素を設定すると、エフェクトの位置が要素の真ん中から始まります。[/ja]
     */
/**
     * @property center
     * @type {Boolean}
     * @description
     *   [en]If this attribute presents, change the position of wave effect to center of the target element.[/en]
     *   [ja]この要素を設定すると、エフェクトの位置が要素の真ん中から始まります。[/ja]
     */
/**
     * @attribute disabled
     * @description
     *   [en]If this attribute is set, the ripple effect will be disabled.[/en]
     *   [ja]この属性が設定された場合、リップルエフェクトは無効になります。[/ja]
     */function n(){var e;return l(this,n),(e=t.call(this))._onTap=e._onTap.bind(a(e)),e._onHold=e._onHold.bind(a(e)),e._onDragStart=e._onDragStart.bind(a(e)),e._onRelease=e._onRelease.bind(a(e)),M(a(e),function(){return e._compile()}),e._animator=new Qe,["color","center","start-radius","background","modifier"].forEach(function(t){e.attributeChangedCallback(t,null,e.getAttribute(t))}),e}return c(n,[{key:"_compile",value:function(){this.classList.add("ripple"),this._wave=this.getElementsByClassName("ripple__wave")[0],this._background=this.getElementsByClassName("ripple__background")[0],this._background&&this._wave||(this._wave=b.create(".ripple__wave"),this._background=b.create(".ripple__background"),this.appendChild(this._wave),this.appendChild(this._background)),v.initModifier(this,Ze)}},{key:"_getEffectSize",value:function(){if(this.hasAttribute("size")){var t=this.getAttribute("size");if(-1!==["cover","contain"].indexOf(t))return t}return"cover"}},{key:"_calculateCoords",value:function(t){function e(){b.throw("Ripple invalid state")}var n,i,o,a=this.getBoundingClientRect(),r=this._getEffectSize();return this._center?(n=a.width/2,i=a.height/2,"cover"===r?o=Math.sqrt(n*n+i*i):"contain"===r?o=Math.min(n,i):e()):(n=("number"==typeof t.clientX?t:t.changedTouches[0]).clientX-a.left,i=("number"==typeof t.clientY?t:t.changedTouches[0]).clientY-a.top,t=Math.max(i,a.height-i),a=Math.max(n,a.width-n),"cover"===r?o=Math.sqrt(t*t+a*a):"contain"===r?o=Math.min(Math.round(t/2),Math.round(a/2)):e()),{x:n,y:i,r:o}}},{key:"_rippleAnimation",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:300,n=this._animator,i=this._wave,o=this._background,a=this._minR,t=this._calculateCoords(t),r=t.x,s=t.y,t=t.r;return n.stopAll({stopNext:1}),n.animate(o,{opacity:1},e),b.extend(i.style,{opacity:1,top:s-a+"px",left:r-a+"px",width:2*a+"px",height:2*a+"px"}),n.animate(i,{top:s-t,left:r-t,height:2*t,width:2*t},e)}},{key:"_updateParent",value:function(){!this._parentUpdated&&this.parentNode&&("static"===window.getComputedStyle(this.parentNode).getPropertyValue("position")&&(this.parentNode.style.position="relative"),this._parentUpdated=!0)}},{key:"_onTap",value:function(t){var e=this;this.disabled||t.ripple||(t.ripple=!0,this._updateParent(),this._rippleAnimation(t.gesture.srcEvent).then(function(){e._animator.fade(e._wave),e._animator.fade(e._background)}))}},{key:"_onHold",value:function(t){this.disabled||t.ripple||(t.ripple=!0,this._updateParent(),this._holding=this._rippleAnimation(t.gesture.srcEvent,2e3),document.addEventListener("release",this._onRelease))}},{key:"_onRelease",value:function(t){var e=this;this._holding&&!t.ripple&&(t.ripple=!0,this._holding.speed(300).then(function(){e._animator.stopAll({stopNext:!0}),e._animator.fade(e._wave),e._animator.fade(e._background)}),this._holding=!1),document.removeEventListener("release",this._onRelease)}},{key:"_onDragStart",value:function(t){if(this._holding)return this._onRelease(t);-1!=["left","right"].indexOf(t.gesture.direction)&&this._onTap(t)}},{key:"connectedCallback",value:function(){this._parentNode=this.parentNode,k.config.animationsDisabled?this.disabled=!0:(this._parentNode.addEventListener("tap",this._onTap),this._parentNode.addEventListener("hold",this._onHold),this._parentNode.addEventListener("dragstart",this._onDragStart))}},{key:"disconnectedCallback",value:function(){var t=this._parentNode||this.parentNode;t.removeEventListener("tap",this._onTap),t.removeEventListener("hold",this._onHold),t.removeEventListener("dragstart",this._onDragStart)}},{key:"attributeChangedCallback",value:function(t,e,n){var i=this;switch(t){case"class":b.restoreClass(this,"ripple",Ze);break;case"modifier":v.onModifierChanged(e,n,this,Ze);break;case"start-radius":this._minR=Math.max(0,parseFloat(n)||0);break;case"color":n&&M(this,function(){i._wave.style.background=n,i.hasAttribute("background")||(i._background.style.background=n)});break;case"background":(n||e)&&M(this,"none"===n?function(){i._background.setAttribute("disabled","disabled"),i._background.style.background="transparent"}:function(){i._background.hasAttribute("disabled")&&i._background.removeAttribute("disabled"),i._background.style.background=n});break;case"center":"center"===t&&(this._center=null!=n&&"false"!=n)}}
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the element is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */}],[{key:"observedAttributes",get:function(){return["start-radius","color","background","center","class","modifier"]}}]),n}(),tn=(b.defineBooleanProperties(t,["disabled","center"]),i.Ripple=t,customElements.define("ons-ripple",t),function(){d(n,D);var e=f(n);function n(){var t;return l(this,n),(t=e.call(this)).constructor===n&&b.throwAbstract(),M(a(t),function(){return t._compile()}),t}return c(n,[{key:"_scheme",get:function(){
// eslint-disable-line getter-return
b.throwMember()}},{key:"_defaultClassName",get:function(){
// eslint-disable-line getter-return
b.throwMember()}},{key:"_rippleOpt",get:function(){return[this]}},{key:"_icon",get:function(){return b.findChild(this,"ons-icon")}},{key:"_hiddenButton",get:function(){return b.findChild(this,"button")}},{key:"_compile",value:function(){var t;
// Add hidden button to allow form submission
g.prepare(this),this.classList.add(this._defaultClassName),!this._icon&&this.hasAttribute("icon")&&(b.checkMissingImport("Icon"),(t=b.createElement('<ons-icon icon="'.concat(this.getAttribute("icon"),'"></ons-icon>'))).classList.add(this._defaultClassName.replace("button","icon")),this.insertBefore(t,this.firstChild)),this._hiddenButton||(t=b.createElement("<button hidden></button>"),this.appendChild(t)),this._updateRipple(),v.initModifier(this,this._scheme)}},{key:"_updateIcon",value:function(){this._icon&&this._icon.setAttribute("icon",this.getAttribute("icon"))}},{key:"_updateRipple",value:function(){this._rippleOpt&&b.updateRipple.apply(b,m(this._rippleOpt))}},{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"class":b.restoreClass(this,this._defaultClassName,this._scheme);break;case"modifier":v.onModifierChanged(e,n,this,this._scheme);break;case"icon":this._updateIcon();break;case"ripple":this.classList.contains(this._defaultClassName)&&this._updateRipple()}}}],[{key:"observedAttributes",get:function(){return["modifier","class","icon","ripple"]}}]),n}()),t=(b.defineBooleanProperties(tn,["ripple","disabled"]),function(){d(e,tn);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e,[{key:"_scheme",get:
/**
       * @attribute icon
       * @type {String}
       * @description
       *  [en]Creates an `ons-icon` component with this string. Only visible on Android. Check [See also](#seealso) section for more information.[/en]
       *  [ja]`ons-icon`コンポーネントを悪性します。Androidでのみ表示されます。[/ja]
       */
/**
       * @attribute modifier
       * @type {String}
       * @description
       *   [en]The appearance of the action sheet button.[/en]
       *   [ja]アクションシートボタンの見た目を設定します。[/ja]
       */
function(){return{"":"action-sheet-button--*",".action-sheet-icon":"action-sheet-icon--*"}}},{key:"_defaultClassName",get:function(){return"action-sheet-button"}},{key:"_rippleOpt",get:function(){}}]),e}()),en=(i.ActionSheetButton=t,customElements.define("ons-action-sheet-button",t),function(){d(o,Xe);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"linear":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.2:t;return l(this,o),i.call(this,{timing:e,delay:n,duration:t})}
/**
     * @param {HTMLElement} dialog
     * @param {Function} done
     */return c(o,[{key:"show",value:function(t,e){e()}
/**
       * @param {HTMLElement} dialog
       * @param {Function} done
       */},{key:"hide",value:function(t,e){e()}}]),o}()),nn=function(){d(o,en);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"cubic-bezier(.1, .7, .4, 1)":e,n=t.duration,n=void 0===n?.2:n,t=t.delay,t=void 0===t?0:t;return l(this,o),i.call(this,{duration:n,timing:e,delay:t})}
/**
     * @param {Object} dialog
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){e=e||function(){},C.runAll(C(t._mask,this.def).default({opacity:0},{opacity:1}),C(t._dialog,this.def).default({transform:"translate3d(-50%, -50%, 0) scale3d(.9, .9, 1)",opacity:0},{transform:"translate3d(-50%, -50%, 0) scale3d(1, 1, 1)",opacity:1}).queue(function(t){e(),t()}))}
/**
       * @param {Object} dialog
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){e=e||function(){},C.runAll(C(t._mask,this.def).default({opacity:1},{opacity:0}),C(t._dialog,this.def).default({transform:"translate3d(-50%, -50%, 0) scale3d(1, 1, 1)",opacity:1},{transform:"translate3d(-50%, -50%, 0) scale3d(.9, .9, 1)",opacity:0}).queue(function(t){e(),t()}))}}]),o}(),on=function(){d(o,en);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"cubic-bezier(.1, .7, .4, 1)":e,n=t.duration,n=void 0===n?.2:n,t=t.delay,t=void 0===t?0:t;return l(this,o),i.call(this,{duration:n,timing:e,delay:t})}
/*
     * @param {Object} dialog
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){e=e||function(){},C.runAll(C(t._mask,this.def).default({opacity:0},{opacity:1}),C(t._dialog,this.def).default({transform:"translate3d(-50%, -50%, 0) scale3d(1.3, 1.3, 1)",opacity:0},{transform:"translate3d(-50%, -50%, 0) scale3d(1, 1, 1)",opacity:1}).queue(function(t){e(),t()}))}
/**
       * @param {Object} dialog
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){e=e||function(){},C.runAll(C(t._mask,this.def).default({opacity:1},{opacity:0}),C(t._dialog,this.def).default({opacity:1},{opacity:0}).queue(function(t){e(),t()}))}}]),o}(),an={".alert-dialog":"alert-dialog--*",".alert-dialog-container":"alert-dialog-container--*",".alert-dialog-title":"alert-dialog-title--*",".alert-dialog-content":"alert-dialog-content--*",".alert-dialog-footer":"alert-dialog-footer--*",".alert-dialog-footer--rowfooter":"alert-dialog-footer--rowfooter--*",".alert-dialog-button--rowfooter":"alert-dialog-button--rowfooter--*",".alert-dialog-button--primal":"alert-dialog-button--primal--*",".alert-dialog-button":"alert-dialog-button--*","ons-alert-dialog-button":"alert-dialog-button--*",".alert-dialog-mask":"alert-dialog-mask--*",".text-input":"text-input--*"},rn={none:en,default:function(){return r.isAndroid()?nn:on},fade:function(){return r.isAndroid()?nn:on}},t=function(){d(n,Ge);var e=f(n);
/**
     * @event preshow
     * @description
     *   [en]Fired just before the alert dialog is displayed.[/en]
     *   [ja]アラートダイアログが表示される直前に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.alertDialog
     *   [en]Alert dialog object.[/en]
     *   [ja]アラートダイアログのオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Execute to stop the dialog from showing.[/en]
     *   [ja]この関数を実行すると、アラートダイアログの表示を止めます。[/ja]
     */
/**
     * @event postshow
     * @description
     *   [en]Fired just after the alert dialog is displayed.[/en]
     *   [ja]アラートダイアログが表示された直後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.alertDialog
     *   [en]Alert dialog object.[/en]
     *   [ja]アラートダイアログのオブジェクト。[/ja]
     */
/**
     * @event prehide
     * @description
     *   [en]Fired just before the alert dialog is hidden.[/en]
     *   [ja]アラートダイアログが隠れる直前に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.alertDialog
     *   [en]Alert dialog object.[/en]
     *   [ja]アラートダイアログのオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Execute to stop the dialog from hiding.[/en]
     *   [ja]この関数を実行すると、アラートダイアログが閉じようとするのを止めます。[/ja]
     */
/**
     * @event posthide
     * @description
     * [en]Fired just after the alert dialog is hidden.[/en]
     * [ja]アラートダイアログが隠れた後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.alertDialog
     *   [en]Alert dialog object.[/en]
     *   [ja]アラートダイアログのオブジェクト。[/ja]
     */
/**
     * @event dialogcancel
     * @description
     * [en]Fired when the dialog is canceled.[/en]
     * [ja][/ja]
     */
/**
     * @attribute modifier
     * @type {String}
     * @description
     *  [en]The appearance of the dialog.[/en]
     *  [ja]ダイアログの見た目を指定します。[/ja]
     */
/**
     * @attribute cancelable
     * @description
     *  [en]If this attribute is set the dialog can be closed by tapping the background or by pressing the back button on Android devices.[/en]
     *  [ja]この属性を設定すると、ダイアログの背景をタップしたりAndroidデバイスのバックボタンを押すとダイアログが閉じるようになります。[/ja]
     */
/**
     * @attribute disabled
     * @description
     *  [en]If this attribute is set the dialog is disabled.[/en]
     *  [ja]この属性がある時、アラートダイアログはdisabled状態になります。[/ja]
     */
/**
     * @attribute animation
     * @type {String}
     * @default default
     * @description
     *  [en]The animation used when showing and hiding the dialog. Can be either `"none"` or `"default"`.[/en]
     *  [ja]ダイアログを表示する際のアニメーション名を指定します。デフォルトでは"none"か"default"が指定できます。[/ja]
     */
/**
     * @attribute animation-options
     * @type {Expression}
     * @description
     *  [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *  [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。例：{duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
     */
/**
     * @attribute mask-color
     * @type {String}
     * @default rgba(0, 0, 0, 0.2)
     * @description
     *  [en]Color of the background mask. Default is "rgba(0, 0, 0, 0.2)".[/en]
     *  [ja]背景のマスクの色を指定します。"rgba(0, 0, 0, 0.2)"がデフォルト値です。[/ja]
     */
/**
     * @attribute visible
     * @type {Boolean}
     * @description
     *   [en]Whether the alert dialog is visible or not.[/en]
     *   [ja]要素が見える場合に`true`。[/ja]
     */function n(){var t;return l(this,n),M(a(t=e.call(this)),function(){return t._compile()}),t}return c(n,[{key:"_scheme",get:function(){return an}
/**
       * @return {Element}
       */},{key:"_mask",get:function(){return b.findChild(this,".alert-dialog-mask")}
/**
       * @return {Element}
       */},{key:"_dialog",get:function(){return b.findChild(this,".alert-dialog")}
/**
       * @return {Element}
       */},{key:"_titleElement",get:function(){return b.findChild(this._dialog.children[0],".alert-dialog-title")}
/**
       * @return {Element}
       */},{key:"_contentElement",get:function(){return b.findChild(this._dialog.children[0],".alert-dialog-content")}},{key:"_updateAnimatorFactory",value:function(){return new w({animators:rn,baseClass:en,baseClassName:"AlertDialogAnimator",defaultAnimation:this.getAttribute("animation")})}},{key:"_compile",value:function(){g.prepare(this),this.style.display="none",this.style.zIndex=10001;
/**
         * Expected result after compile:
         *
         * <ons-alert-dialog style="none">
         *   <div class="alert-dialog-mask"></div>
         *   <div class="alert-dialog">
         *     <div class="alert-dialog-container">...</div>
         *   </div>
         * </ons-alert-dialog>
         */
var t,e=document.createDocumentFragment();if(!this._mask&&!this._dialog)for(;this.firstChild;)e.appendChild(this.firstChild);this._mask||((t=document.createElement("div")).classList.add("alert-dialog-mask"),this.insertBefore(t,this.children[0])),this._dialog||((t=document.createElement("div")).classList.add("alert-dialog"),this.insertBefore(t,null)),b.findChild(this._dialog,".alert-dialog-container")||((t=document.createElement("div")).classList.add("alert-dialog-container"),this._dialog.appendChild(t)),this._dialog.children[0].appendChild(e),this._dialog.style.zIndex=20001,this._mask.style.zIndex=2e4,v.initModifier(this,this._scheme)}
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the element is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
/**
       * @property cancelable
       * @type {Boolean}
       * @description
       *   [en]Whether the dialog is cancelable or not. A cancelable dialog can be closed by tapping the background or by pressing the back button on Android devices.[/en]
       *   [ja]そのダイアログがキャンセル可能かどうかを表します。キャンセル可能なダイアログは、背景をタップするかAndroidデバイスのバックボタンを押すことで閉じることが出来るようになります。[/ja]
       */
/**
       * @property maskColor
       * @type {String}
       * @default rgba(0, 0, 0, 0.2)
       * @description
       *  [en]Color of the background mask. Default is "rgba(0, 0, 0, 0.2)".[/en]
       *  [ja]背景のマスクの色を指定します。"rgba(0, 0, 0, 0.2)"がデフォルト値です。[/ja]
       */
/**
       * @method show
       * @signature show([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクトです。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name. Available animations are `"fade"` and `"none"`.[/en]
       *   [ja]アニメーション名を指定します。指定できるのは、"fade", "none"のいずれかです。[/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g.  `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. <code>{duration: 0.2, delay: 0.4, timing: 'ease-in'}</code> [/ja]
       * @param {Function} [options.callback]
       *   [en]Function to execute after the dialog has been revealed.[/en]
       *   [ja]ダイアログが表示され終わった時に呼び出されるコールバックを指定します。[/ja]
       * @description
       *   [en]Show the alert dialog.[/en]
       *   [ja]ダイアログを表示します。[/ja]
       * @return {Promise}
       *   [en]A `Promise` object that resolves to the displayed element.[/en]
       *   [ja]表示される要素を解決する`Promise`オブジェクトを返します。[/ja]
       */
/**
       * @method hide
       * @signature hide([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name. Available animations are `"fade"` and `"none"`.[/en]
       *   [ja]アニメーション名を指定します。"fade", "none"のいずれかを指定します。[/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g.  <code>{duration: 0.2, delay: 0.4, timing: 'ease-in'}</code>[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. <code>{duration: 0.2, delay: 0.4, timing: 'ease-in'}</code> [/ja]
       * @param {Function} [options.callback]
       *   [en]Function to execute after the dialog has been hidden.[/en]
       *   [ja]このダイアログが閉じた時に呼び出されるコールバックを指定します。[/ja]
       * @description
       *   [en]Hide the alert dialog.[/en]
       *   [ja]ダイアログを閉じます。[/ja]
       * @return {Promise}
       *   [en]Resolves to the hidden element[/en]
       *   [ja]隠れた要素を解決する`Promise`オブジェクトを返します。[/ja]
       */
/**
       * @property visible
       * @type {Boolean}
       * @description
       *   [en]Whether the dialog is visible or not.[/en]
       *   [ja]要素が見える場合に`true`。[/ja]
       */
/**
       * @property onDeviceBackButton
       * @type {Object}
       * @description
       *   [en]Back-button handler.[/en]
       *   [ja]バックボタンハンドラ。[/ja]
       */
/**
       * @property animationOptions
       * @type {Object}
       * @description
       *   [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。例：{duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
       */
/**
       * @param {String} name
       * @param {DialogAnimator} Animator
       */}],[{key:"registerAnimator",value:function(t,e){e.prototype instanceof en||b.throwAnimator("AlertDialog"),rn[t]=e}},{key:"animators",get:function(){return rn}},{key:"AlertDialogAnimator",get:function(){return en}}]),n}(),t=(i.AlertDialog=t,customElements.define("ons-alert-dialog",t),function(){d(e,tn);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e,[{key:"_scheme",get:
/**
       * @attribute modifier
       * @type {String}
       * @description
       *   [en]The appearance of the button.[/en]
       *   [ja]ボタンの表現を指定します。[/ja]
       */
/**
       * @attribute disabled
       * @description
       *   [en]Specify if button should be disabled.[/en]
       *   [ja]ボタンを無効化する場合は指定してください。[/ja]
       */
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the element is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
function(){return{"":"alert-dialog-button--*"}}},{key:"_defaultClassName",get:function(){return"alert-dialog-button"}},{key:"_rippleOpt",get:function(){return[this,void 0,{modifier:"light-gray"}]}}]),e}()),sn=(i.AlertDialogButton=t,customElements.define("ons-alert-dialog-button",t),"back-button"),ln={"":"back-button--*",".back-button__icon":"back-button--*__icon",".back-button__label":"back-button--*__label"},t=function(){d(o,D);var i=f(o);
/**
     * @attribute modifier
     * @type {String}
     * @description
     *  [en]The appearance of the back button.[/en]
     *  [ja]バックボタンの見た目を指定します。[/ja]
     */function o(){l(this,o),M(a(t=i.call(this)),function(){t._compile()}),t._options={},t._boundOnClick=t._onClick.bind(a(t));var t,e=b.defineListenerProperty(a(t),"click"),n=e.onConnected,e=e.onDisconnected;return t._connectOnClick=n,t._disconnectOnClick=e,t}return c(o,[{key:"_updateIcon",value:function(){(0<arguments.length&&void 0!==arguments[0]?arguments[0]:b.findChild(this,".back-button__icon")).innerHTML="android"===g.getPlatform(this)||b.hasModifier(this,"material")?'\n  <?xml version="1.0" encoding="UTF-8"?>\n  <svg width="16px" height="16px" viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n      <title>md-back-button-icon</title>\n      <desc>Created with Sketch.</desc>\n      <defs></defs>\n      <g id="toolbar-back-button" stroke="none" stroke-width="1" fill-rule="evenodd">\n          <g id="android" transform="translate(-32.000000, -32.000000)" fill-rule="nonzero">\n              <polygon id="md-back-button-icon" points="48 39 35.83 39 41.42 33.41 40 32 32 40 40 48 41.41 46.59 35.83 41 48 41"></polygon>\n          </g>\n      </g>\n  </svg>\n':'\n  <?xml version="1.0" encoding="UTF-8"?>\n  <svg width="13px" height="21px" viewBox="0 0 13 21" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n      <title>ios-back-button-icon</title>\n      <desc>Created with Sketch.</desc>\n      <defs></defs>\n      <g id="toolbar-back-button" stroke="none" stroke-width="1" fill-rule="evenodd">\n          <g id="ios" transform="translate(-34.000000, -30.000000)">\n              <polygon id="ios-back-button-icon" points="34 40.5 44.5 30 46.5 32 38 40.5 46.5 49 44.5 51"></polygon>\n          </g>\n      </g>\n  </svg>\n'}},{key:"_compile",value:function(){if(g.prepare(this),this.classList.add(sn),!b.findChild(this,".back-button__label")){for(var t=b.create("span.back-button__label");this.childNodes[0];)t.appendChild(this.childNodes[0]);this.appendChild(t)}var e;b.findChild(this,".back-button__icon")||(e=b.create("span.back-button__icon"),this._updateIcon(e),this.insertBefore(e,this.children[0])),b.updateRipple(this,void 0,{center:"",size:"contain",background:"transparent"}),v.initModifier(this,ln)}
/**
       * @property options
       * @type {Object}
       * @description
       *   [en]Options object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       */
/**
       * @property options.animation
       * @type {String}
       * @description
       *   [en]Animation name. Available animations are "slide", "lift", "fade" and "none".
       *     These are platform based animations. For fixed animations, add "-ios" or "-md"
       *     suffix to the animation name. E.g. "lift-ios", "lift-md". Defaults values are "slide-ios" and "fade-md".
       *   [/en]
       *   [ja][/ja]
       */
/**
       * @property options.animationOptions
       * @type {String}
       * @description
       *   [en]Specify the animation's duration, delay and timing. E.g.  `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}` [/ja]
       */
/**
       * @property options.callback
       * @type {String}
       * @description
       *   [en]Function that is called when the transition has ended.[/en]
       *   [ja]このメソッドによる画面遷移が終了した際に呼び出される関数オブジェクトを指定します。[/ja]
       */},{key:"options",get:function(){return this._options},set:function(t){this._options=t}
/**
       * @property onClick
       * @type {Function}
       * @description
       *   [en]Used to override the default back button behavior.[/en]
       *   [ja][/ja]
       */},{key:"_onClick",value:function(e){var n=this;setTimeout(function(){var t;e.defaultPrevented||(t=b.findParent(n,"ons-navigator"))&&t.popPage(s(s({},n.options),{},{onsBackButton:!0}))})}},{key:"connectedCallback",value:function(){this.addEventListener("click",this._boundOnClick,!1),this._connectOnClick()}},{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"class":b.restoreClass(this,sn,ln);break;case"modifier":v.onModifierChanged(e,n,this,ln)&&this._updateIcon()}}},{key:"disconnectedCallback",value:function(){this.removeEventListener("click",this._boundOnClick,!1),this._disconnectOnClick()}},{key:"show",value:function(){this.style.display="inline-block"}},{key:"hide",value:function(){this.style.display="none"}}],[{key:"observedAttributes",get:function(){return["modifier","class"]}}]),o}(),cn=(i.BackButton=t,customElements.define("ons-back-button",t),"bottom-bar"),un={"":"bottom-bar--*"},t=function(){d(n,D);var e=f(n);
/**
     * @attribute modifier
     * @type {String}
     * @description
     *   [en]The appearance of the toolbar.[/en]
     *   [ja]ツールバーの見た目の表現を指定します。[/ja]
     */function n(){var t;return l(this,n),(t=e.call(this)).classList.add(cn),v.initModifier(a(t),un),t}return c(n,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"class":b.restoreClass(this,cn,un);break;case"modifier":v.onModifierChanged(e,n,this,un)}}}],[{key:"observedAttributes",get:function(){return["modifier","class"]}}]),n}(),t=(i.BottomToolbar=t,customElements.define("ons-bottom-toolbar",t),function(){d(e,tn);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e,[{key:"_scheme",get:
/**
       * @attribute modifier
       * @type {String}
       * @description
       *  [en]The appearance of the button.[/en]
       *  [ja]ボタンの表現を指定します。[/ja]
       */
/**
       * @attribute ripple
       * @description
       *  [en]If this attribute is defined, the button will have a ripple effect.[/en]
       *  [ja][/ja]
       */
/**
       * @property ripple
       * @type {Boolean}
       * @description
       *  [en]Whether the button has a ripple effect or not.[/en]
       *  [ja][/ja]
       */
/**
       * @attribute disabled
       * @description
       *   [en]Specify if button should be disabled.[/en]
       *   [ja]ボタンを無効化する場合は指定します。[/ja]
       */
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the button is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
function(){return{"":"button--*"}}},{key:"_defaultClassName",get:function(){return"button"}}]),e}()),dn=(i.Button=t,customElements.define("ons-button",t),{"":"card--*",".card__title":"card--*__title",".card__content":"card--*__content"}),t=function(){d(n,D);var e=f(n);
/**
     * @attribute modifier
     * @type {String}
     * @description
     *   [en]The appearance of the card.[/en]
     *   [ja]リストの表現を指定します。[/ja]
     */function n(){var t;return l(this,n),M(a(t=e.call(this)),function(){t._compile()}),t}return c(n,[{key:"_compile",value:function(){for(var t=0;t<this.children.length;t++){var e=this.children[t];e.classList.contains("title")?e.classList.add("card__title"):e.classList.contains("content")&&e.classList.add("card__content")}g.prepare(this),this.classList.add("card"),v.initModifier(this,dn)}},{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"class":b.restoreClass(this,"card",dn);break;case"modifier":v.onModifierChanged(e,n,this,dn)}}}],[{key:"observedAttributes",get:function(){return["modifier","class"]}}]),n}(),hn=(i.Card=t,customElements.define("ons-card",t),{"":"carousel-item--*"}),t=function(){d(n,D);var e=f(n);function n(){var t;return l(this,n),(t=e.call(this)).style.width="100%",v.initModifier(a(t),hn),t}return c(n,[{key:"attributeChangedCallback",value:function(t,e,n){if("modifier"===t)return v.onModifierChanged(e,n,this,hn)}}],[{key:"observedAttributes",get:function(){return["modifier"]}}]),n}(),fn=(i.CarouselItem=t,customElements.define("ons-carousel-item",t),{vertical:{axis:"Y",size:"Height",dir:["up","down"],t3d:["0px, ","px, 0px"]},horizontal:{axis:"X",size:"Width",dir:["left","right"],t3d:["","px, 0px, 0px"]}}),pn=function(){function t(e){function n(){return!1}var i=this;l(this,t);"getInitialIndex getBubbleWidth isVertical isOverScrollable isCentered\n    isAutoScrollable refreshHook preChangeHook postChangeHook overScrollHook".split(/\s+/).forEach(function(t){return i[t]=e[t]||n}),this.getElement=e.getElement,// Required
this.scrollHook=e.scrollHook,// Optional
this.itemSize=e.itemSize||"100%",this.getAutoScrollRatio=function(){var t=e.getAutoScrollRatio&&e.getAutoScrollRatio.apply(e,arguments);return((t="number"==typeof t&&t==t?t:.5)<0||1<t)&&b.throw("Invalid auto-scroll-ratio "+t+". Must be between 0 and 1"),t},
// Prevent clicks only on desktop
this.shouldBlock="other"===b.globals.actualMobileOS,
// Bind handlers
this.onDragStart=this.onDragStart.bind(this),this.onDrag=this.onDrag.bind(this),this.onDragEnd=this.onDragEnd.bind(this),this.onResize=this.onResize.bind(this),this._shouldFixScroll="ios"===b.globals.actualMobileOS}return c(t,[{key:"init",value:function(){var t=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},n=e.swipeable,e=e.autoRefresh;this.initialized=!0,this.target=this.getElement().children[0],this.blocker=this.getElement().children[1],this.target&&this.blocker||b.throw('Expected "target" and "blocker" elements to exist before initializing Swiper'),this.shouldBlock||(this.blocker.style.display="none"),
// Add classes
this.getElement().classList.add("ons-swiper"),this.target.classList.add("ons-swiper-target"),this.blocker.classList.add("ons-swiper-blocker"),
// Setup listeners
this._gestureDetector=new A(this.getElement(),{dragMinDistance:1,dragLockToAxis:!0,passive:!this._shouldFixScroll}),this._mutationObserver=new MutationObserver(function(){return t.refresh()}),this.updateSwipeable(n),this.updateAutoRefresh(e),
// Setup initial layout
this._scroll=this._offset=this._lastActiveIndex=0,this._updateLayout(),this._setupInitialIndex(),setImmediate(function(){return t.initialized&&t._setupInitialIndex()}),
// Fix rendering glitch on Android 4.1
// Fix for iframes where the width is inconsistent at the beginning
window===window.parent&&0!==this.offsetHeight||window.requestAnimationFrame(function(){return t.initialized&&t.onResize()})}},{key:"dispose",value:function(){this.initialized=!1,this.updateSwipeable(!1),this.updateAutoRefresh(!1),this._gestureDetector&&this._gestureDetector.dispose(),this.target=this.blocker=this._gestureDetector=this._mutationObserver=null,this.setupResize(!1)}},{key:"onResize",value:function(){var t=this._scroll/this.itemNumSize;this._reset(),this.setActiveIndex(t),this.refresh()}},{key:"itemCount",get:function(){return this.target.children.length}},{key:"itemNumSize",get:function(){return"number"==typeof this._itemNumSize&&this._itemNumSize==this._itemNumSize||(this._itemNumSize=this._calculateItemSize()),this._itemNumSize}},{key:"maxScroll",get:function(){var t=this.itemCount*this.itemNumSize-this.targetSize;return Math.ceil(t<0?0:t);// Need to return an integer value.
}},{key:"_calculateItemSize",value:function(){var t=this.itemSize.match(/^(\d+)(px|%)/),e=(t||b.throw("Invalid state: swiper's size unit must be '%' or 'px'"),parseInt(t[1],10));return"%"===t[2]?Math.round(e/100*this.targetSize):e}},{key:"_setupInitialIndex",value:function(){this._reset(),this._lastActiveIndex=Math.max(Math.min(Number(this.getInitialIndex()),this.itemCount),0),this._scroll=this._offset+this.itemNumSize*this._lastActiveIndex,this._scrollTo(this._scroll)}},{key:"_setSwiping",value:function(t){this.target.classList.toggle("swiping",t);// Hides everything except shown pages
}},{key:"setActiveIndex",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},t=(this._setSwiping(!0),t=Math.max(0,Math.min(t,this.itemCount-1)),Math.max(0,Math.min(this.maxScroll,this._offset+this.itemNumSize*t)));return this._changeTo(t,e)}},{key:"getActiveIndex",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this._scroll,e=(t-=this._offset,this.itemCount),n=this.itemNumSize;if(0===this.itemNumSize||!b.isInteger(t))return this._lastActiveIndex;if(t<=0)return 0;for(var i=0;i<e;i++)if(n*i<=t&&t<n*(i+1))return i;return e-1}},{key:"setupResize",value:function(t){window[(t?"add":"remove")+"EventListener"]("resize",this.onResize,!0)}},{key:"show",value:function(){var t=this;this.setupResize(!0),this.onResize(),setTimeout(function(){return t.target&&t.target.classList.add("active")},1e3/60)}},{key:"hide",value:function(){this.setupResize(!1),this.target.classList.remove("active")}},{key:"updateSwipeable",value:function(t){this._gestureDetector&&(this._gestureDetector[t=t?"on":"off"]("drag",this.onDrag),this._gestureDetector[t]("dragstart",this.onDragStart),this._gestureDetector[t]("dragend",this.onDragEnd))}},{key:"updateAutoRefresh",value:function(t){this._mutationObserver&&(t?this._mutationObserver.observe(this.target,{childList:!0}):this._mutationObserver.disconnect())}},{key:"updateItemSize",value:function(t){this.itemSize=t||"100%",this.refresh()}},{key:"toggleBlocker",value:function(t){this.blocker.style.pointerEvents=t?"auto":"none"}},{key:"_canConsumeGesture",value:function(t){var t=t.direction,e=0===this._scroll&&!this.isOverScrollable(),n=this._scroll===this.maxScroll&&!this.isOverScrollable();return this.isVertical()?"down"===t&&!e||"up"===t&&!n:"right"===t&&!e||"left"===t&&!n}},{key:"onDragStart",value:function(t){var e,n,i,o,a=this;this._ignoreDrag=t.consumed||!b.isValidGesture(t),this._ignoreDrag||(e=t.consume,t.consume=function(){e&&e(),a._ignoreDrag=!0},this._canConsumeGesture(t.gesture)&&(n=t.gesture.center&&t.gesture.center.clientX||0,i=this.getBubbleWidth()||0,o=function(){e&&e(),t.consumed=!0,a._started=!0,// Avoid starting drag from outside
a.shouldBlock&&a.toggleBlocker(!0),a._setSwiping(!0),b.iosPreventScroll(a._gestureDetector)},
// Let parent elements consume the gesture or consume it right away
n<i||n>this.targetSize-i?setImmediate(function(){return!a._ignoreDrag&&o()}):o()))}},{key:"onDrag",value:function(t){t.gesture&&!this._ignoreDrag&&this._started&&(this._continued=!0,// Fix for random 'dragend' without 'drag'
t.stopPropagation(),this._scrollTo(this._scroll-this._getDelta(t),{throttle:!0}))}},{key:"onDragEnd",value:function(t){var e,n;this._started=!1,t.gesture&&!this._ignoreDrag&&this._continued?(this._continued=!1,t.stopPropagation(),(e=this._scroll-this._getDelta(t))===(n=this._normalizeScroll(e))?this._startMomentumScroll(e,t):this._killOverScroll(n),this.shouldBlock&&this.toggleBlocker(!1)):this._ignoreDrag=!0}},{key:"_startMomentumScroll",value:function(t,e){var n=this._getVelocity(e),e=e.gesture.interimDirection===this.dM.dir[this._getDelta(e)<0?0:1],e=this._getAutoScroll(t,n,e),t=Math.abs(e-t)/(n+.01)/1e3,t=Math.min(.25,Math.max(.1,t));this._changeTo(e,{swipe:!0,animationOptions:{duration:t,timing:"cubic-bezier(.4, .7, .5, 1)"}})}},{key:"_killOverScroll",value:function(t){function e(){return n._changeTo(t,{animationOptions:{duration:.4,timing:"cubic-bezier(.1, .4, .1, 1)"}})}var n=this,i=(this._scroll=t,this.dM.dir[Number(0<t)]);this.overScrollHook({direction:i,killOverScroll:e})||e()}},{key:"_changeTo",value:function(t){var e=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},i={activeIndex:this.getActiveIndex(t),lastActiveIndex:this._lastActiveIndex,swipe:n.swipe||!1},o=i.activeIndex!==i.lastActiveIndex,a=o&&this.preChangeHook(i);return this._scroll=a?this._offset+i.lastActiveIndex*this.itemNumSize:t,this._lastActiveIndex=a?i.lastActiveIndex:i.activeIndex,this._scrollTo(this._scroll,n).then(function(){if(t!==e._scroll||a){if(n.reject)return e._setSwiping(!1),Promise.reject("Canceled")}else e._setSwiping(!1),o&&e.postChangeHook(i)})}},{key:"_scrollTo",value:function(e){var t,n=this,i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},o=(i.throttle&&(e<0?e=this.isOverScrollable()?Math.round(.35*e):0:(t=this.maxScroll)<e&&(e=this.isOverScrollable()?t+Math.round(.35*(e-t)):t)),"none"===i.animation?{}:i.animationOptions);return this.scrollHook&&0<this.itemNumSize&&this.scrollHook((e/this.itemNumSize).toFixed(2),i.animationOptions||{}),new Promise(function(t){return C(n.target).queue({transform:n._getTransform(e)},o).play(t)})}},{key:"_getAutoScroll",value:function(n,t,e){var i=this.maxScroll,o=this._offset,a=this.itemNumSize;if(!this.isAutoScrollable())return Math.max(0,Math.min(i,n));for(var r=[],s=o;s<i;s+=a)r.push(s);r.push(i);var l=(r=r.sort(function(t,e){return Math.abs(t-n)-Math.abs(e-n)}).filter(function(t,e){return!e||t!==r[e-1]}))[0],o=this._lastActiveIndex*a+o,c=Math.abs(n-o)/a;return c<=this.getAutoScrollRatio(e,t,a)?l=o:c<1&&r[0]===o&&1<r.length&&(l=r[1]),Math.max(0,Math.min(i,l))}},{key:"_reset",value:function(){this._targetSize=this._itemNumSize=void 0}},{key:"_normalizeScroll",value:function(t){return Math.max(Math.min(t,this.maxScroll),0)}},{key:"refresh",value:function(){var t;this._reset(),this._updateLayout(),b.isInteger(this._scroll)?(t=this._normalizeScroll(this._scroll))!==this._scroll?this._killOverScroll(t):this._changeTo(t):this._setupInitialIndex(),this.refreshHook()}},{key:"targetSize",get:function(){return this._targetSize||(this._targetSize=this.target["offset".concat(this.dM.size)]),this._targetSize}},{key:"_getDelta",value:function(t){return t.gesture["delta".concat(this.dM.axis)]}},{key:"_getVelocity",value:function(t){return t.gesture["velocity".concat(this.dM.axis)]}},{key:"_getTransform",value:function(t){return"translate3d(".concat(this.dM.t3d[0]).concat(-t).concat(this.dM.t3d[1],")")}},{key:"_updateLayout",value:function(){this.dM=fn[this.isVertical()?"vertical":"horizontal"],this.target.classList.toggle("ons-swiper-target--vertical",this.isVertical());for(var t=this.target.children[0];t;t=t.nextElementSibling)t.style[this.dM.size.toLowerCase()]=this.itemSize;this.isCentered()&&(this._offset=(this.targetSize-this.itemNumSize)/-2||0)}}]),t}(),t=function(){d(o,D);var i=f(o);
/**
     * @event postchange
     * @description
     *   [en]Fired just after the current carousel item has changed.[/en]
     *   [ja]現在表示しているカルーセルの要素が変わった時に発火します。[/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクトです。[/ja]
     * @param {Object} event.carousel
     *   [en]Carousel object.[/en]
     *   [ja]イベントが発火したCarouselオブジェクトです。[/ja]
     * @param {Number} event.activeIndex
     *   [en]Current active index.[/en]
     *   [ja]現在アクティブになっている要素のインデックス。[/ja]
     * @param {Number} event.lastActiveIndex
     *   [en]Previous active index.[/en]
     *   [ja]以前アクティブだった要素のインデックス。[/ja]
     */
/**
     * @event prechange
     * @description
     *   [en]Fired just before the current carousel item changes.[/en]
     *   [ja][/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクトです。[/ja]
     * @param {Object} event.carousel
     *   [en]Carousel object.[/en]
     *   [ja]イベントが発火したCarouselオブジェクトです。[/ja]
     * @param {Number} event.activeIndex
     *   [en]Current active index.[/en]
     *   [ja]現在アクティブになっている要素のインデックス。[/ja]
     * @param {Number} event.lastActiveIndex
     *   [en]Previous active index.[/en]
     *   [ja]以前アクティブだった要素のインデックス。[/ja]
     */
/**
     * @event refresh
     * @description
     *   [en]Fired when the carousel has been refreshed.[/en]
     *   [ja]カルーセルが更新された時に発火します。[/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクトです。[/ja]
     * @param {Object} event.carousel
     *   [en]Carousel object.[/en]
     *   [ja]イベントが発火したCarouselオブジェクトです。[/ja]
     */
/**
     * @event overscroll
     * @description
     *   [en]Fired when the carousel has been overscrolled.[/en]
     *   [ja]カルーセルがオーバースクロールした時に発火します。[/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクトです。[/ja]
     * @param {Object} event.carousel
     *   [en]Fired when the carousel has been refreshed.[/en]
     *   [ja]カルーセルが更新された時に発火します。[/ja]
     * @param {Number} event.activeIndex
     *   [en]Current active index.[/en]
     *   [ja]現在アクティブになっている要素のインデックス。[/ja]
     * @param {String} event.direction
     *   [en]Can be one of either "up", "down", "left" or "right".[/en]
     *   [ja]オーバースクロールされた方向が得られます。"up", "down", "left", "right"のいずれかの方向が渡されます。[/ja]
     * @param {Function} event.waitToReturn
     *   [en]Takes a <code>Promise</code> object as an argument. The carousel will not scroll back until the promise has been resolved or rejected.[/en]
     *   [ja]この関数はPromiseオブジェクトを引数として受け取ります。渡したPromiseオブジェクトがresolveされるかrejectされるまで、カルーセルはスクロールバックしません。[/ja]
     */
/**
     * @event swipe
     * @description
     *   [en]Fires when the carousel swipes.[/en]
     *   [ja][/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクト。[/ja]
     * @param {Number} event.index
     *   [en]Current index.[/en]
     *   [ja]現在アクティブになっているons-carouselのインデックスを返します。[/ja]
     * @param {Object} event.options
     *   [en]Animation options object.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute direction
     * @type {String}
     * @description
     *   [en]The direction of the carousel. Can be either "horizontal" or "vertical". Default is "horizontal".[/en]
     *   [ja]カルーセルの方向を指定します。"horizontal"か"vertical"を指定できます。"horizontal"がデフォルト値です。[/ja]
     */
/**
     * @attribute fullscreen
     * @description
     *   [en]If this attribute is set the carousel will cover the whole screen.[/en]
     *   [ja]この属性があると、absoluteポジションを使ってカルーセルが自動的に画面いっぱいに広がります。[/ja]
     */
/**
     * @property fullscreen
     * @type {Boolean}
     * @description
     *   [en]If this property is set the carousel will cover the whole screen.[/en]
     *   [ja]この属性があると、absoluteポジションを使ってカルーセルが自動的に画面いっぱいに広がります。[/ja]
     */
/**
     * @attribute overscrollable
     * @description
     *   [en]If this attribute is set the carousel will be scrollable over the edge. It will bounce back when released.[/en]
     *   [ja]この属性がある時、タッチやドラッグで端までスクロールした時に、バウンドするような効果が当たります。[/ja]
     */
/**
     * @attribute centered
     * @description
     *   [en]If this attribute is set the carousel then the selected item will be in the center of the carousel instead of the beginning. Useful only when the items are smaller than the carousel. [/en]
     *   [ja]この属性がある時、選んでいるons-carousel-itemはカルーセルの真ん中へ行きます。項目がカルーセルよりも小さい場合にのみ、これは便利です。[/ja]
     */
/**
     * @attribute item-width
     * @type {String}
     * @description
     *    [en]ons-carousel-item's width. Only works when the direction is set to "horizontal".[/en]
     *    [ja]ons-carousel-itemの幅を指定します。この属性は、direction属性に"horizontal"を指定した時のみ有効になります。[/ja]
     */
/**
     * @attribute item-height
     * @type {String}
     * @description
     *   [en]ons-carousel-item's height. Only works when the direction is set to "vertical".[/en]
     *   [ja]ons-carousel-itemの高さを指定します。この属性は、direction属性に"vertical"を指定した時のみ有効になります。[/ja]
     */
/**
     * @attribute auto-scroll
     * @description
     *   [en]If this attribute is set the carousel will be automatically scrolled to the closest item border when released.[/en]
     *   [ja]この属性がある時、一番近いcarousel-itemの境界まで自動的にスクロールするようになります。[/ja]
     */
/**
     * @attribute auto-scroll-ratio
     * @type {Number}
     * @description
     *    [en]A number between 0.0 and 1.0 that specifies how much the user must drag the carousel in order for it to auto scroll to the next item.[/en]
     *    [ja]0.0から1.0までの値を指定します。カルーセルの要素をどれぐらいの割合までドラッグすると次の要素に自動的にスクロールするかを指定します。[/ja]
     */
/**
     * @attribute swipeable
     * @description
     *   [en]If this attribute is set the carousel can be scrolled by drag or swipe.[/en]
     *   [ja]この属性がある時、カルーセルをスワイプやドラッグで移動できるようになります。[/ja]
     */
/**
     * @attribute disabled
     * @description
     *   [en]If this attribute is set the carousel is disabled.[/en]
     *   [ja]この属性がある時、dragやtouchやswipeを受け付けなくなります。[/ja]
     */
/**
     * @attribute initial-index
     * @initonly
     * @default 0
     * @type {Number}
     * @description
     *   [en]Specify the index of the ons-carousel-item to show initially. Default is 0. If active-index is set, initial-index is ignored.[/en]
     *   [ja]最初に表示するons-carousel-itemを0始まりのインデックスで指定します。デフォルト値は 0 です。[/ja]
     */
/**
     * @attribute auto-refresh
     * @description
     *   [en]When this attribute is set the carousel will automatically refresh when the number of child nodes change.[/en]
     *   [ja]この属性がある時、子要素の数が変わるとカルーセルは自動的に更新されるようになります。[/ja]
     */
/**
     * @property autoRefresh
     * @type {Boolean}
     * @description
     *   [en]When this property is set the carousel will automatically refresh when the number of child nodes change.[/en]
     *   [ja]この属性がある時、子要素の数が変わるとカルーセルは自動的に更新されるようになります。[/ja]
     */
/**
     * @attribute animation
     * @type {String}
     * @description
     *   [en]If this attribute is set to `"none"` the transitions will not be animated.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute animation-options
     * @type {Expression}
     * @description
     *   [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *   [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。例：{duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
     */function o(){l(this,o),t=i.call(this);var t,e=b.defineListenerProperty(a(t),"swipe"),n=e.onConnected,e=e.onDisconnected;return t._connectOnSwipe=n,t._disconnectOnSwipe=e,M(a(t),function(){return t._compile()}),t}return c(o,[{key:"_compile",value:function(){var t=this.children[0]&&"ONS-CAROUSEL-ITEM"!==this.children[0].tagName&&this.children[0]||document.createElement("div");if(!t.parentNode){for(;this.firstChild;)t.appendChild(this.firstChild);this.appendChild(t)}this.children[1]||this.appendChild(document.createElement("div")),this.appendChild=this.appendChild.bind(t),this.insertBefore=this.insertBefore.bind(t)}},{key:"connectedCallback",value:function(){var n=this;this._swiper||(this._swiper=new pn({getElement:function(){return n},getInitialIndex:function(){return n.getAttribute("active-index")||n.getAttribute("initial-index")},getAutoScrollRatio:function(){return n.autoScrollRatio},isVertical:function(){return n.vertical},isOverScrollable:function(){return n.overscrollable},isCentered:function(){return n.centered},isAutoScrollable:function(){return n.autoScroll},itemSize:this.itemSize,overScrollHook:this._onOverScroll.bind(this),preChangeHook:this._onPreChange.bind(this),postChangeHook:this._onPostChange.bind(this),refreshHook:this._onRefresh.bind(this),scrollHook:function(t,e){return b.triggerElementEvent(n,"swipe",{index:t,options:e})}}),M(this,function(){return n._swiper.init({swipeable:n.hasAttribute("swipeable"),autoRefresh:n.hasAttribute("auto-refresh")})})),this._connectOnSwipe()}},{key:"disconnectedCallback",value:function(){this._swiper&&this._swiper.initialized&&(this._swiper.dispose(),this._swiper=null),this._disconnectOnSwipe()}},{key:"attributeChangedCallback",value:function(t,e,n){if(this._swiper)switch(t){case"swipeable":this._swiper.updateSwipeable(this.hasAttribute("swipeable"));break;case"auto-refresh":this._swiper.updateAutoRefresh(this.hasAttribute("auto-refresh"));break;case"item-height":this.vertical&&this._swiper.updateItemSize(this.itemSize);break;case"item-width":this.vertical||this._swiper.updateItemSize(this.itemSize);break;case"direction":this._swiper.refresh();break;case"active-index":this.getActiveIndex()!==this.activeIndex&&this.setActiveIndex(this.activeIndex)}}},{key:"_show",value:function(){this._swiper.show()}},{key:"_hide",value:function(){this._swiper.hide()}},{key:"_onOverScroll",value:function(t){var e=t.direction,n=t.killOverScroll,i=!1;return b.triggerElementEvent(this,"overscroll",{carousel:this,activeIndex:this.getActiveIndex(),direction:e,waitToReturn:function(t){i=!0,t.then(n)}}),i}},{key:"_onPreChange",value:function(t){var e=t.activeIndex,t=t.lastActiveIndex;b.triggerElementEvent(this,"prechange",{carousel:this,activeIndex:e,lastActiveIndex:t})}},{key:"_onPostChange",value:function(t){var e=t.activeIndex,t=t.lastActiveIndex;this.activeIndex=e,b.triggerElementEvent(this,"postchange",{carousel:this,activeIndex:e,lastActiveIndex:t})}},{key:"_onRefresh",value:function(){b.triggerElementEvent(this,"refresh",{carousel:this})}
/**
       * @method setActiveIndex
       * @signature setActiveIndex(index, [options])
       * @param {Number} index
       *   [en]The index that the carousel should be set to.[/en]
       *   [ja]carousel要素のインデックスを指定します。[/ja]
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja][/ja]
       * @param {Function} [options.callback]
       *   [en]A function that will be called after the animation is finished.[/en]
       *   [ja][/ja]
       * @param {String} [options.animation]
       *   [en]If this attribute is set to `"none"` the transitions will not be animated.[/en]
       *   [ja][/ja]
       * @param {Object} [options.animationOptions]
       *   [en]An object that can be used to specify duration, delay and timing function of the animation.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Specify the index of the `<ons-carousel-item>` to show.[/en]
       *   [ja]表示するons-carousel-itemをindexで指定します。[/ja]
       * @return {Promise}
       *   [en]Resolves to the carousel element.[/en]
       *   [ja][/ja]
       */},{key:"setActiveIndex",value:function(t){var e=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=s({animation:this.getAttribute("animation"),animationOptions:this.animationOptions||{duration:.3,timing:"cubic-bezier(.4, .7, .5, 1)"}},n);return this._swiper.setActiveIndex(t,n).then(function(){return n.callback instanceof Function&&n.callback(e),Promise.resolve(e)})}
/**
       * @method getActiveIndex
       * @signature getActiveIndex()
       * @return {Number}
       *   [en]The current carousel item index.[/en]
       *   [ja]現在表示しているカルーセル要素のインデックスが返されます。[/ja]
       * @description
       *   [en]Returns the index of the currently visible `<ons-carousel-item>`.[/en]
       *   [ja]現在表示されているons-carousel-item要素のインデックスを返します。[/ja]
       */},{key:"getActiveIndex",value:function(){return this._swiper.getActiveIndex()}
/**
       * @method next
       * @signature next([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja][/ja]
       * @param {Function} [options.callback]
       *   [en]A function that will be executed after the animation has finished.[/en]
       *   [ja][/ja]
       * @param {String} [options.animation]
       *   [en]If this attribute is set to `"none"` the transitions will not be animated.[/en]
       *   [ja][/ja]
       * @param {Object} [options.animationOptions]
       *   [en]An object that can be used to specify the duration, delay and timing function of the animation.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en]Resolves to the carousel element[/en]
       *   [ja][/ja]
       * @description
       *   [en]Show next `<ons-carousel-item>`.[/en]
       *   [ja]次のons-carousel-itemを表示します。[/ja]
       */},{key:"next",value:function(t){return this.setActiveIndex(this.getActiveIndex()+1,t)}
/**
       * @method prev
       * @signature prev([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja][/ja]
       * @param {Function} [options.callback]
       *   [en]A function that will be executed after the animation has finished.[/en]
       *   [ja][/ja]
       * @param {String} [options.animation]
       *   [en]If this attribute is set to `"none"` the transitions will not be animated.[/en]
       *   [ja][/ja]
       * @param {Object} [options.animationOptions]
       *   [en]An object that can be used to specify the duration, delay and timing function of the animation.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en]Resolves to the carousel element[/en]
       *   [ja][/ja]
       * @description
       *   [en]Show previous `<ons-carousel-item>`.[/en]
       *   [ja]前のons-carousel-itemを表示します。[/ja]
       */},{key:"prev",value:function(t){return this.setActiveIndex(this.getActiveIndex()-1,t)}
/**
       * @method first
       * @signature first()
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja][/ja]
       * @param {Function} [options.callback]
       *   [en]A function that will be executed after the animation has finished.[/en]
       *   [ja][/ja]
       * @param {String} [options.animation]
       *   [en]If this is set to `"none"`, the transitions will not be animated.[/en]
       *   [ja][/ja]
       * @param {Object} [options.animationOptions]
       *   [en]An object that can be used to specify the duration, delay and timing function of the animation.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en]Resolves to the carousel element[/en]
       *   [ja][/ja]
       * @description
       *   [en]Show first `<ons-carousel-item>`.[/en]
       *   [ja]最初のons-carousel-itemを表示します。[/ja]
       */},{key:"first",value:function(t){return this.setActiveIndex(0,t)}
/**
       * @method last
       * @signature last()
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja][/ja]
       * @param {Function} [options.callback]
       *   [en]A function that will be executed after the animation has finished.[/en]
       *   [ja][/ja]
       * @param {String} [options.animation]
       *   [en]If this attribute is set to `"none"` the transitions will not be animated.[/en]
       *   [ja][/ja]
       * @param {Object} [options.animationOptions]
       *   [en]An object that can be used to specify the duration, delay and timing function of the animation.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en]Resolves to the carousel element[/en]
       *   [ja]Resolves to the carousel element[/ja]
       * @description
       *   [en]Show last ons-carousel item.[/en]
       *   [ja]最後のons-carousel-itemを表示します。[/ja]
       */},{key:"last",value:function(t){this.setActiveIndex(Math.max(this.itemCount-1,0),t)}
/**
       * @method refresh
       * @signature refresh()
       * @description
       *   [en]Update the layout of the carousel. Used when adding `<ons-carousel-items>` dynamically or to automatically adjust the size.[/en]
       *   [ja]レイアウトや内部の状態を最新のものに更新します。ons-carousel-itemを動的に増やしたり、ons-carouselの大きさを動的に変える際に利用します。[/ja]
       */},{key:"refresh",value:function(){this._swiper.refresh()}
/**
       * @property itemCount
       * @readonly
       * @type {Number}
       * @description
       *   [en]The number of carousel items.[/en]
       *   [ja]カルーセル要素の数です。[/ja]
       */},{key:"itemCount",get:function(){return this._swiper.itemCount}
/**
       * @property swipeable
       * @type {Boolean}
       * @description
       *   [en]true if the carousel is swipeable.[/en]
       *   [ja]swipeableであればtrueを返します。[/ja]
       */
/**
       * @property onSwipe
       * @type {Function}
       * @description
       *   [en]Hook called whenever the user slides the carousel. It gets a decimal index and an animationOptions object as arguments.[/en]
       *   [ja][/ja]
       */
/**
       * @property autoScroll
       * @type {Boolean}
       * @description
       *   [en]true if auto scroll is enabled.[/en]
       *   [ja]オートスクロールが有効であればtrueを返します。[/ja]
       */},{key:"vertical",get:function(){return"vertical"===this.getAttribute("direction")}},{key:"itemSize",get:function(){var t=(this.getAttribute("item-".concat(this.vertical?"height":"width"))||"").trim();return t.match(/^\d+(px|%)$/)?t:"100%"}
/**
       * @property autoScrollRatio
       * @type {Number}
       * @description
       *   [en]The current auto scroll ratio. [/en]
       *   [ja]現在のオートスクロールのratio値。[/ja]
       */},{key:"autoScrollRatio",get:function(){return parseFloat(this.getAttribute("auto-scroll-ratio"))},set:function(t){this.setAttribute("auto-scroll-ratio",t)}
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the carousel is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
/**
       * @property overscrollable
       * @type {Boolean}
       * @description
       *   [en]Whether the carousel is overscrollable or not.[/en]
       *   [ja]overscrollできればtrueを返します。[/ja]
       */
/**
       * @property centered
       * @type {Boolean}
       * @description
       *   [en]Whether the carousel is centered or not.[/en]
       *   [ja]centered状態になっていればtrueを返します。[/ja]
       */},{key:"animationOptions",get:
/**
       * @property animationOptions
       * @type {Object}
       * @description
       *   [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。例：{duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
       */
function(){var t=this.getAttribute("animation-options");return t&&b.animationOptionsParse(t)},set:function(t){null==t?this.removeAttribute("animation-options"):this.setAttribute("animation-options",JSON.stringify(t))}
/**
       * @attribute active-index
       * @type {Number}
       * @description
       *   [en]Specify the index of the carousel item that should be shown.[/en]
       *   [ja][/ja]
       */
/**
       * @property activeIndex
       * @type {Number}
       * @description
       *   [en]Specify the index of the carousel item that should be shown.[/en]
       *   [ja][/ja]
       */},{key:"activeIndex",get:function(){return parseInt(this.getAttribute("active-index"))},set:function(t){null!=t&&this.setAttribute("active-index",t)}}],[{key:"observedAttributes",get:function(){return["swipeable","auto-refresh","direction","item-height","item-width","active-index"]}},{key:"events",get:function(){return["postchange","refresh","overscroll","prechange","swipe"]}}]),o}(),t=(b.defineBooleanProperties(t,["swipeable","disabled","overscrollable","auto-scroll","centered","fullscreen","auto-refresh"]),i.Carousel=t,customElements.define("ons-carousel",t),function(){d(n,D);var e=f(n);function n(){var t;return l(this,n),(t=e.call(this)).getAttribute("width")&&t._updateWidth(),t}return c(n,[{key:"attributeChangedCallback",value:function(t,e,n){"width"===t&&this._updateWidth()}},{key:"_updateWidth",value:function(){var t=this.getAttribute("width");t?(t=t.trim().match(/^\d+$/)?t+"%":t,u(this,{flex:"0 0 "+t,maxWidth:t})):u.clear(this,"flex maxWidth")}}],[{key:"observedAttributes",get:function(){return["width"]}}]),n}()),mn=(i.Col=t,customElements.define("ons-col",t),function(){d(o,Xe);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"linear":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.2:t;return l(this,o),i.call(this,{timing:e,delay:n,duration:t})}
/**
     * @param {HTMLElement} dialog
     * @param {Function} done
     */return c(o,[{key:"show",value:function(t,e){e()}
/**
       * @param {HTMLElement} dialog
       * @param {Function} done
       */},{key:"hide",value:function(t,e){e()}}]),o}()),gn=function(){d(o,mn);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"ease-in-out":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.3:t;return l(this,o),i.call(this,{timing:e,delay:n,duration:t})}
/**
     * @param {Object} dialog
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){e=e||function(){},C.runAll(C(t._mask,this.def).default({opacity:0},{opacity:1}),C(t._dialog,this.def).default({transform:"translate3d(-50%, -60%, 0)",opacity:0},{transform:"translate3d(-50%, -50%, 0)",opacity:1}).queue(function(t){e(),t()}))}
/**
       * @param {Object} dialog
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){e=e||function(){},C.runAll(C(t._mask,this.def).default({opacity:1},{opacity:0}),C(t._dialog,this.def).default({transform:"translate3d(-50%, -50%, 0)",opacity:1},{transform:"translate3d(-50%, -60%, 0)",opacity:0}).queue(function(t){e(),t()}))}}]),o}(),vn=function(){d(o,mn);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"ease-in-out":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.2:t;// avoid Forced Synchronous Layout
return l(this,o),(e=i.call(this,{timing:e,delay:n,duration:t})).bodyHeight=document.body.clientHeight,e}
/**
     * @param {Object} dialog
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){e=e||function(){},C.runAll(C(t._mask,this.def).default({opacity:0},{opacity:1}),C(t._dialog,this.def).default({transform:"translate3d(-50%, ".concat(this.bodyHeight/2-1,"px, 0)")},{transform:"translate3d(-50%, -50%, 0)"}).queue(function(t){e(),t()}))}
/**
       * @param {Object} dialog
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){e=e||function(){},C.runAll(C(t._mask,this.def).default({opacity:1},{opacity:0}),C(t._dialog,this.def).default({transform:"translate3d(-50%, -50%, 0)"},{transform:"translate3d(-50%, ".concat(this.bodyHeight/2-1,"px, 0)")}).queue(function(t){e(),t()}))}}]),o}(),_n={".dialog":"dialog--*",".dialog-container":"dialog-container--*",".dialog-mask":"dialog-mask--*"},bn={default:function(){return r.isAndroid()?gn:vn},slide:function(){d(o,mn);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"cubic-bezier(.1, .7, .4, 1)":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.2:t;// avoid Forced Synchronous Layout
return l(this,o),(e=i.call(this,{timing:e,delay:n,duration:t})).bodyHeight=document.body.clientHeight,e}
/**
     * @param {Object} dialog
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){e=e||function(){},C.runAll(C(t._mask,this.def).default({opacity:0},{opacity:1}),C(t._dialog,this.def).default(
// FIXME: This should avoid Forced Synchronous Layout. Otherwise, fade animation of mask will be broken.
{transform:"translate3d(-50%, ".concat(-this.bodyHeight/2+1-t._dialog.clientHeight,"px, 0)")},{transform:"translate3d(-50%, -50%, 0)"}).queue(function(t){e(),t()}))}
/**
       * @param {Object} dialog
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){e=e||function(){},C.runAll(C(t._mask,this.def).default({opacity:1},{opacity:0}),C(t._dialog,this.def).default({transform:"translate3d(-50%, -50%, 0)"},
// FIXME: This should avoid Forced Synchronous Layout. Otherwise, fade animation of mask will be broken.
{transform:"translate3d(-50%, ".concat(-this.bodyHeight/2+1-t._dialog.clientHeight,"px, 0)")}).queue(function(t){e(),t()}))}}]),o}(),none:mn},t=function(){d(n,Ge);var e=f(n);
/**
     * @event preshow
     * @description
     * [en]Fired just before the dialog is displayed.[/en]
     * [ja]ダイアログが表示される直前に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.dialog
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Execute this function to stop the dialog from being shown.[/en]
     *   [ja]この関数を実行すると、ダイアログの表示がキャンセルされます。[/ja]
     */
/**
     * @event postshow
     * @description
     * [en]Fired just after the dialog is displayed.[/en]
     * [ja]ダイアログが表示された直後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.dialog
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     */
/**
     * @event prehide
     * @description
     * [en]Fired just before the dialog is hidden.[/en]
     * [ja]ダイアログが隠れる直前に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.dialog
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Execute this function to stop the dialog from being hidden.[/en]
     *   [ja]この関数を実行すると、ダイアログの非表示がキャンセルされます。[/ja]
     */
/**
     * @event posthide
     * @description
     * [en]Fired just after the dialog is hidden.[/en]
     * [ja]ダイアログが隠れた後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.dialog
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     */
/**
     * @event dialogcancel
     * @description
     * [en]Fired when the dialog is canceled.[/en]
     * [ja][/ja]
     */
/**
     * @attribute modifier
     * @type {String}
     * @description
     *  [en]The appearance of the dialog.[/en]
     *  [ja]ダイアログの表現を指定します。[/ja]
     */
/**
     * @attribute cancelable
     * @description
     *  [en]If this attribute is set the dialog can be closed by tapping the background or by pressing the back button on Android devices.[/en]
     *  [ja][/ja]
     */
/**
     * @attribute disabled
     * @description
     *  [en]If this attribute is set the dialog is disabled.[/en]
     *  [ja]この属性がある時、ダイアログはdisabled状態になります。[/ja]
     */
/**
     * @attribute animation
     * @type {String}
     * @default default
     * @description
     *  [en]The animation used when showing and hiding the dialog. Can be either `"none"` or `"default"`.[/en]
     *  [ja]ダイアログを表示する際のアニメーション名を指定します。"none"もしくは"default"を指定できます。[/ja]
     */
/**
     * @attribute animation-options
     * @type {Expression}
     * @description
     *  [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *  [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。e.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`[/ja]
     */
/**
     * @property animationOptions
     * @type {Object}
     * @description
     *   [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *   [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。例：{duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
     */
/**
     * @attribute mask-color
     * @type {String}
     * @default rgba(0, 0, 0, 0.2)
     * @description
     *  [en]Color of the background mask. Default is `"rgba(0, 0, 0, 0.2)"`.[/en]
     *  [ja]背景のマスクの色を指定します。"rgba(0, 0, 0, 0.2)"がデフォルト値です。[/ja]
     */
/**
     * @attribute visible
     * @type {Boolean}
     * @description
     *   [en]Whether the dialog is visible or not.[/en]
     *   [ja]要素が見える場合に`true`。[/ja]
     */function n(){var t;return l(this,n),M(a(t=e.call(this)),function(){return t._compile()}),t}return c(n,[{key:"_scheme",get:function(){return _n}},{key:"_mask",get:function(){return b.findChild(this,".dialog-mask")}},{key:"_dialog",get:function(){return b.findChild(this,".dialog")}},{key:"_updateAnimatorFactory",value:function(){return new w({animators:bn,baseClass:mn,baseClassName:"DialogAnimator",defaultAnimation:this.getAttribute("animation")})}},{key:"_compile",value:function(){
/* Expected result:
         *   <ons-dialog>
         *     <div class="dialog-mask"></div>
         *     <div class="dialog">
         *       <div class="dialog-container">...</div>
         *     </div>
         *   </ons-dialog>
         */
if(g.prepare(this),this.style.display="none",this.style.zIndex=10001,!this._dialog){var t=document.createElement("div"),e=(t.classList.add("dialog"),document.createElement("div"));for(e.classList.add("dialog-container");this.firstChild;)e.appendChild(this.firstChild);t.appendChild(e),this.appendChild(t)}this._mask||((t=document.createElement("div")).classList.add("dialog-mask"),this.insertBefore(t,this.firstChild)),this._dialog.style.zIndex=20001,this._mask.style.zIndex=2e4,this.setAttribute("status-bar-fill",""),v.initModifier(this,this._scheme)}
/**
       * @property onDeviceBackButton
       * @type {Object}
       * @description
       *   [en]Back-button handler.[/en]
       *   [ja]バックボタンハンドラ。[/ja]
       */
/**
       * @method show
       * @signature show([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name. Available animations are `"none"` and `"slide"`.[/en]
       *   [ja]アニメーション名を指定します。"none", "slide"のいずれかを指定します。[/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}` [/ja]
       * @param {Function} [options.callback]
       *   [en]This function is called after the dialog has been revealed.[/en]
       *   [ja]ダイアログが表示され終わった後に呼び出される関数オブジェクトを指定します。[/ja]
       * @description
       *  [en]Show the dialog.[/en]
       *  [ja]ダイアログを開きます。[/ja]
       * @return {Promise} Resolves to the displayed element.
       */
/**
       * @method hide
       * @signature hide([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name. Available animations are `"none"` and `"slide"`.[/en]
       *   [ja]アニメーション名を指定します。"none", "slide"のいずれかを指定できます。[/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`[/ja]
       * @param {Function} [options.callback]
       *   [en]This functions is called after the dialog has been hidden.[/en]
       *   [ja]ダイアログが隠れた後に呼び出される関数オブジェクトを指定します。[/ja]
       * @description
       *   [en]Hide the dialog.[/en]
       *   [ja]ダイアログを閉じます。[/ja]
       * @return {Promise}
       *   [en]Resolves to the hidden element[/en]
       *   [ja][/ja]
       */
/**
       * @property visible
       * @type {Boolean}
       * @description
       *   [en]Whether the dialog is visible or not.[/en]
       *   [ja]要素が見える場合に`true`。[/ja]
       */
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the dialog is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
/**
       * @property cancelable
       * @type {Boolean}
       * @description
       *   [en]Whether the dialog is cancelable or not. A cancelable dialog can be closed by tapping the background or by pressing the back button on Android devices.[/en]
       *   [ja][/ja]
       */
/**
       * @property maskColor
       * @type {String}
       * @default rgba(0, 0, 0, 0.2)
       * @description
       *  [en]Color of the background mask. Default is "rgba(0, 0, 0, 0.2)".[/en]
       *  [ja]背景のマスクの色を指定します。"rgba(0, 0, 0, 0.2)"がデフォルト値です。[/ja]
       */
/**
       * @param {String} name
       * @param {DialogAnimator} Animator
       */}],[{key:"registerAnimator",value:function(t,e){e.prototype instanceof mn||b.throwAnimator("Dialog"),bn[t]=e}},{key:"animators",get:function(){return bn}},{key:"DialogAnimator",get:function(){return mn}}]),n}(),yn=(i.Dialog=t,customElements.define("ons-dialog",t),{"":"fab--*",".fab__icon":"fab--*__icon"}),t=function(){d(n,D);var e=f(n);
/**
     * @attribute modifier
     * @type {String}
     * @description
     *  [en]The appearance of the button.[/en]
     *  [ja]ボタンの表現を指定します。[/ja]
     */
/**
     * @attribute ripple
     * @description
     *  [en]If this attribute is defined, the button will have a ripple effect when tapped.[/en]
     *  [ja][/ja]
     */
/**
     * @property ripple
     * @type {Boolean}
     * @description
     *  [en]If this property is defined, the button will have a ripple effect when tapped.[/en]
     *  [ja][/ja]
     */
/**
     * @attribute position
     * @type {String}
     * @description
     *  [en]The position of the button. Should be a string like `"bottom right"` or `"top left"`. If this attribute is not defined it will be displayed as an inline element.[/en]
     *  [ja][/ja]
     */
/**
     * @attribute disabled
     * @description
     *   [en]Specify if button should be disabled.[/en]
     *   [ja]ボタンを無効化する場合は指定します。[/ja]
     */function n(){var t;return l(this,n),
// The following statements can be executed before contentReady
// since these do not access the children
(t=e.call(this))._hide(),t.classList.add("fab"),M(a(t),function(){t._compile()}),t}return c(n,[{key:"_compile",value:function(){var e;g.prepare(this),b.findChild(this,".fab__icon")||((e=document.createElement("span")).classList.add("fab__icon"),b.arrayFrom(this.childNodes).forEach(function(t){t.tagName&&"ons-ripple"===t.tagName.toLowerCase()||e.appendChild(t)}),this.appendChild(e)),this._updateRipple(),v.initModifier(this,yn),this._updatePosition()}},{key:"connectedCallback",value:function(){var t=this;setImmediate(function(){return t._show()})}},{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"class":b.restoreClass(this,"fab",yn);break;case"modifier":v.onModifierChanged(e,n,this,yn);break;case"ripple":this._updateRipple();break;case"position":this._updatePosition()}}},{key:"_show",value:function(){this._manuallyHidden||
// if user has not called ons-fab.hide()
this._toggle(!0)}},{key:"_hide",value:function(){var t=this;setImmediate(function(){return t._toggle(!1)})}},{key:"_updateRipple",value:function(){b.updateRipple(this)}},{key:"_updatePosition",value:function(){var t=this.getAttribute("position");switch(this.classList.remove("fab--top__left","fab--bottom__right","fab--bottom__left","fab--top__right","fab--top__center","fab--bottom__center"),t){case"top right":case"right top":this.classList.add("fab--top__right");break;case"top left":case"left top":this.classList.add("fab--top__left");break;case"bottom right":case"right bottom":this.classList.add("fab--bottom__right");break;case"bottom left":case"left bottom":this.classList.add("fab--bottom__left");break;case"center top":case"top center":this.classList.add("fab--top__center");break;case"center bottom":case"bottom center":this.classList.add("fab--bottom__center")}}
/**
       * @method show
       * @signature show()
       * @description
       *  [en]Show the floating action button.[/en]
       *  [ja][/ja]
       */},{key:"show",value:function(){this.toggle(!0)}
/**
       * @method hide
       * @signature hide()
       * @description
       *  [en]Hide the floating action button.[/en]
       *  [ja][/ja]
       */},{key:"hide",value:function(){this.toggle(!1)}
/**
       * @method toggle
       * @signature toggle()
       * @description
       *   [en]Toggle the visibility of the button.[/en]
       *   [ja][/ja]
       */},{key:"toggle",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:!this.visible;this._manuallyHidden=!t,this._toggle(t)}},{key:"_toggle",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:!this.visible,e=0<=(this.getAttribute("position")||"").indexOf("bottom")?"translate3d(0px, -".concat(b.globals.fabOffset||0,"px, 0px)"):"";u(this,{transform:"".concat(e," scale(").concat(Number(t),")")})}
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the element is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
/**
       * @property visible
       * @readonly
       * @type {Boolean}
       * @description
       *   [en]Whether the element is visible or not.[/en]
       *   [ja]要素が見える場合に`true`。[/ja]
       */},{key:"visible",get:function(){return-1===this.style.transform.indexOf("scale(0)")&&"none"!==this.style.display}}],[{key:"observedAttributes",get:function(){return["modifier","ripple","position","class"]}}]),n}(),t=(b.defineBooleanProperties(t,["disabled","ripple"]),i.Fab=t,customElements.define("ons-fab",t),function(){d(n,D);var e=f(n);function n(){var t;return l(this,n),(t=e.call(this))._gestureDetector=new A(a(t),{passive:!0}),t}return c(n)}()),kn=(i.GestureDetector=t,customElements.define("ons-gesture-detector",t),"fa"),t=function(){d(n,D);var e=f(n);
/**
     * @attribute icon
     * @type {String}
     * @description
     *   [en]
     *     The icon name. `"md-"` prefix for Material Icons, `"fa-"` for Font Awesome and `"ion-"` prefix for Ionicons.
     *
     *     See all available icons on the element description (at the top).
     *
     *     Icons can also be styled based on modifier presence. Add comma-separated icons with `"modifierName:"` prefix.
     *
     *     The code `<ons-icon icon="ion-edit, material:md-edit"></ons-icon>` will display `"md-edit"` for Material Design and `"ion-edit"` as the default icon.
     *
     *     `fa-` prefix is added automatically if none is provided. Check [See also](#seealso) section for more information.
     *   [/en]
     *   [ja][/ja]
     */
/**
     * @attribute size
     * @type {String}
     * @description
     *   [en]
     *     The sizes of the icon. Valid values are lg, 2x, 3x, 4x, 5x, or in the size in pixels.
     *     Icons can also be styled based on modifier presence. Add comma-separated icons with `"modifierName:"` prefix.
     *
     *     The code:
     *
     *     ```
     *     <ons-icon
     *       icon="ion-edit"
     *       size="32px, material:24px">
     *     </ons-icon>
     *     ```
     *
     *     will render as a `24px` icon if the `"material"` modifier is present and `32px` otherwise.
     *   [/en]
     *   [ja][/ja]
     */
/**
     * @attribute rotate
     * @type {Number}
     * @description
     *   [en]Number of degrees to rotate the icon. Valid values are 90, 180 and 270.[/en]
     *   [ja]アイコンを回転して表示します。90, 180, 270から指定できます。[/ja]
     */
/**
     * @attribute fixed-width
     * @type {Boolean}
     * @default false
     * @description
     *  [en]When used in a list, you want the icons to have the same width so that they align vertically by defining this attribute.[/en]
     *  [ja][/ja]
     */
/**
     * @property fixedWidth
     * @type {Boolean}
     * @default false
     * @description
     *  [en]When used in a list, you want the icons to have the same width so that they align vertically by defining this attribute.[/en]
     *  [ja][/ja]
     */
/**
     * @attribute spin
     * @description
     *   [en]Specify whether the icon should be spinning.[/en]
     *   [ja]アイコンを回転するかどうかを指定します。[/ja]
     */
/**
     * @property spin
     * @type {Boolean}
     * @description
     *   [en]Specify whether the icon should be spinning.[/en]
     *   [ja]アイコンを回転するかどうかを指定します。[/ja]
     */function n(){var t;return l(this,n),M(a(t=e.call(this)),function(){t._compile()}),t}return c(n,[{key:"attributeChangedCallback",value:function(t,e,n){this._cleanClassAttribute("icon"===t?e:this.getAttribute("icon"),"modifier"===t?e:void 0),this._update()}},{key:"_compile",value:function(){g.prepare(this),this._update()}},{key:"_update",value:function(){var e=this,t=this._buildClassAndStyle(this._parseAttr("icon"),this._parseAttr("size")),n=t.classList,t=t.style;b.extend(this.style,t),n.forEach(function(t){return e.classList.add(t)})}},{key:"_parseAttr",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.getAttribute("modifier")||"",t=(this.getAttribute(t)||t||"").split(/\s*,\s*/),n=t[0],t=((t=t[1])||"").split(/\s*:\s*/);return(e&&RegExp("(^|\\s+)".concat(t[0],"($|\\s+)"),"i").test(e)?t[1]:n)||""}
/**
       * Remove unneeded class value.
       */},{key:"_cleanClassAttribute",value:function(t,e){var n=this,t=this._prefixIcon(this._parseAttr(t,e)),e=t.className,t=t.prefix,t=e!==t?"|".concat(t,"$|").concat(t,"-"):"|".concat(e,"$")||"",i=new RegExp("^(fa$|fa-|ion-|zmdi$|zmdi-|ons-icon--".concat(t,")"));b.arrayFrom(this.classList).filter(function(t){return i.test(t)}).forEach(function(t){return n.classList.remove(t)})}},{key:"_prefixIcon",value:function(t){t=kn+(kn?"-":"")+t;return{className:t,prefix:t.split("-")[0]}}},{key:"_buildClassAndStyle",value:function(t,e){var n,i=["ons-icon"],o={};
// Icon
return 0===t.indexOf("ion-")?(i.push(t),i.push("ons-icon--ion")):0===t.indexOf("fa-")?(i.push(t),
// default icon style to Font Awesome Solid if icon style is not specified already
this.classList.contains("far")||this.classList.contains("fab")||this.classList.contains("fal")||i.push("fa")):0===t.indexOf("md-")?(i.push("zmdi"),i.push("zmdi-"+t.split(/-(.+)?/)[1])):(n=(t=this._prefixIcon(t)).className,(t=t.prefix)&&i.push(t),n&&i.push(n)),
// Size
e.match(/^[1-5]x|lg$/)?(i.push("ons-icon--"+e),this.style.removeProperty("font-size")):o.fontSize=e,{classList:i,style:o}}}],[{key:"observedAttributes",get:function(){return["icon","size","modifier","class"]}},{key:"setAutoPrefix",value:function(t){kn=t?"string"==typeof t&&t||"fa":""}}]),n}(),wn=(b.defineBooleanProperties(t,["fixed-width","spin"]),i.Icon=t,customElements.define("ons-icon",t),function(){function n(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;l(this,n),"object"===o(t)&&null!==t||b.throw('"delegate" parameter must be an object'),this._userDelegate=t,e instanceof Element||null===e||b.throw('"templateElement" parameter must be an instance of Element or null'),this._templateElement=e}return c(n,[{key:"itemHeight",get:function(){return this._userDelegate.itemHeight}
/**
       * @return {Boolean}
       */},{key:"hasRenderFunction",value:function(){return this._userDelegate._render instanceof Function}
/**
       * @return {void}
       */},{key:"_render",value:function(){this._userDelegate._render.apply(this._userDelegate,arguments)}
/**
       * @param {Number} index
       * @param {Function} done A function that take item object as parameter.
       */},{key:"loadItemElement",value:function(t,e){this._userDelegate.loadItemElement instanceof Function?this._userDelegate.loadItemElement(t,e):((t=this._userDelegate.createItemContent(t,this._templateElement))instanceof Element||b.throw('"createItemContent" must return an instance of Element'),e({element:t}))}
/**
       * @return {Number}
       */},{key:"countItems",value:function(){var t=this._userDelegate.countItems();return"number"!=typeof t&&b.throw('"countItems" must return a number'),t}
/**
       * @param {Number} index
       * @param {Object} item
       * @param {Element} item.element
       */},{key:"updateItem",value:function(t,e){this._userDelegate.updateItemContent instanceof Function&&this._userDelegate.updateItemContent(t,e)}
/**
       * @return {Number}
       */},{key:"calculateItemHeight",value:function(t){return this._userDelegate.calculateItemHeight instanceof Function?("number"!=typeof(t=this._userDelegate.calculateItemHeight(t))&&b.throw('"calculateItemHeight" must return a number'),t):0}
/**
       * @param {Number} index
       * @param {Object} item
       */},{key:"destroyItem",value:function(t,e){this._userDelegate.destroyItem instanceof Function&&this._userDelegate.destroyItem(t,e)}
/**
       * @return {void}
       */},{key:"destroy",value:function(){this._userDelegate.destroy instanceof Function&&this._userDelegate.destroy(),this._userDelegate=this._templateElement=null}}]),n}()),En=function(){
/**
     * @param {Element} wrapperElement
     * @param {LazyRepeatDelegate} delegate
     */
function n(t,e){l(this,n),e instanceof wn||b.throw('"delegate" parameter must be an instance of LazyRepeatDelegate'),this._wrapperElement=t,this._delegate=e,this._insertIndex=this._wrapperElement.children[0]&&"ONS-LAZY-REPEAT"===this._wrapperElement.children[0].tagName?1:0,"ons-list"===t.tagName.toLowerCase()&&t.classList.add("lazy-list"),this._pageContent=this._findPageContentElement(t),this._pageContent||b.throw("LazyRepeat must be descendant of a Page element"),this.lastScrollTop=this._pageContent.scrollTop,this.padding=0,this._topPositions=[0],this._renderedItems={},this._delegate.itemHeight||this._delegate.calculateItemHeight(0)||(this._unknownItemHeight=!0),this._addEventListeners(),this._onChange()}return c(n,[{key:"padding",get:function(){return parseInt(this._wrapperElement.style.paddingTop,10)},set:function(t){this._wrapperElement.style.paddingTop=t+"px"}},{key:"_findPageContentElement",value:function(t){var e=b.findParent(t,".page__content");if(e)return e;e=b.findParent(t,"ons-page");if(e){t=b.findChild(e,".content");if(t)return t}return null}},{key:"_checkItemHeight",value:function(n){var i=this;this._delegate.loadItemElement(0,function(t){i._unknownItemHeight||b.throw("Invalid state"),i._wrapperElement.appendChild(t.element);function e(){i._delegate.destroyItem(0,t),t.element&&t.element.remove(),delete i._unknownItemHeight,n()}i._itemHeight=t.element.offsetHeight,0<i._itemHeight?e():(
// retry to measure offset height
// dirty fix for angular2 directive
i._wrapperElement.style.visibility="hidden",t.element.style.visibility="hidden",setImmediate(function(){i._itemHeight=t.element.offsetHeight,0==i._itemHeight&&b.throw('Invalid state: "itemHeight" must be greater than zero'),i._wrapperElement.style.visibility="",e()}))})}},{key:"staticItemHeight",get:function(){return this._delegate.itemHeight||this._itemHeight}},{key:"_countItems",value:function(){return this._delegate.countItems()}},{key:"_getItemHeight",value:function(t){
// Item is rendered
return Object.prototype.hasOwnProperty.call(this._renderedItems,t)?(Object.prototype.hasOwnProperty.call(this._renderedItems[t],"height")||(this._renderedItems[t].height=this._renderedItems[t].element.offsetHeight),this._renderedItems[t].height):
// Item is not rendered, scroll up
this._topPositions[t+1]&&this._topPositions[t]?this._topPositions[t+1]-this._topPositions[t]:this.staticItemHeight||this._delegate.calculateItemHeight(t)}},{key:"_calculateRenderedHeight",value:function(){var n=this;return Object.keys(this._renderedItems).reduce(function(t,e){return t+n._getItemHeight(+e)},0)}},{key:"_onChange",value:function(){this._render()}},{key:"_lastItemRendered",value:function(){return Math.max.apply(Math,m(Object.keys(this._renderedItems)))}},{key:"_firstItemRendered",value:function(){return Math.min.apply(Math,m(Object.keys(this._renderedItems)))}},{key:"refresh",value:function(){var t={forceScrollDown:!0},e=this._firstItemRendered();b.isInteger(e)&&(this._wrapperElement.style.height=this._topPositions[e]+this._calculateRenderedHeight()+"px",this.padding=this._topPositions[e],t.forceFirstIndex=e),this._removeAllElements(),this._render(t),this._wrapperElement.style.height="inherit"}},{key:"_render",value:function(){var e=this,t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},n=t.forceScrollDown,n=void 0!==n&&n,i=t.forceFirstIndex,t=t.forceLastIndex;if(this._unknownItemHeight)return this._checkItemHeight(this._render.bind(this,arguments[0]));for(var o=!n&&this.lastScrollTop>this._pageContent.scrollTop,a=(this.lastScrollTop=this._pageContent.scrollTop,{}),n=this._wrapperElement.getBoundingClientRect().top,r=4*window.innerHeight-n,s=this._countItems(),l=i||Math.max(0,this._calculateStartIndex(n)-30),c=l,u=this._topPositions[c];c<s&&u<r;c++)c>=this._topPositions.length&&(
// perf optimization
this._topPositions.length+=100),this._topPositions[c]=u,u+=this._getItemHeight(c);if(this._delegate.hasRenderFunction&&this._delegate.hasRenderFunction())return this._delegate._render(l,c,function(){e.padding=e._topPositions[l]});if(o)for(var d=c-1;l<=d;d--)a[d]=!0,this._renderElement(d,o);else// Recalculate for 0 or undefined
for(var h=t||Math.max.apply(Math,[c-1].concat(m(Object.keys(this._renderedItems)))),f=l;f<=h;f++)a[f]=!0,this._renderElement(f,o);Object.keys(this._renderedItems).forEach(function(t){return a[t]||e._removeElement(t,o)})}
/**
       * @param {Number} index
       * @param {Boolean} isScrollUp
       */},{key:"_renderElement",value:function(e,n){var i=this,t=this._renderedItems[e];t?this._delegate.updateItem(e,t):this._delegate.loadItemElement(e,function(t){n?(i._wrapperElement.insertBefore(t.element,i._wrapperElement.children[i._insertIndex]),i.padding=i._topPositions[e],t.height=i._topPositions[e+1]-i._topPositions[e]):i._wrapperElement.appendChild(t.element),i._renderedItems[e]=t})}
/**
       * @param {Number} index
       * @param {Boolean} isScrollUp
       */},{key:"_removeElement",value:function(t){var e=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=this._renderedItems[t=+t];this._delegate.destroyItem(t,n),e?this._topPositions[t+1]=void 0:this.padding=this.padding+this._getItemHeight(t),n.element.parentElement&&n.element.parentElement.removeChild(n.element),delete this._renderedItems[t]}},{key:"_removeAllElements",value:function(){var e=this;Object.keys(this._renderedItems).forEach(function(t){return e._removeElement(t)})}},{key:"_recalculateTopPositions",value:function(t,e){for(var n=t;n<=e;n++)this._topPositions[n+1]=this._topPositions[n]+this._getItemHeight(n)}},{key:"_calculateStartIndex",value:function(t){
// Binary search for index at top of screen so we can speed up rendering.
for(var e=this._firstItemRendered(),n=this._lastItemRendered(),i=(
// Fix for Safari scroll and Angular 2
this._recalculateTopPositions(e,n),0),o=this._countItems()-1;;){var a=Math.floor((i+o)/2),r=t+this._topPositions[a];if(o<i)return 0;if(r<=0&&0<r+this._getItemHeight(a))return a;isNaN(r)||0<=r?o=a-1:i=a+1}}},{key:"_debounce",value:function(i,o,a){var r;return function(){var t=arguments,e=this,n=a&&!r;clearTimeout(r),n?i.apply(this,arguments):r=setTimeout(function(){r=null,i.apply(e,t)},o)}}},{key:"_doubleFireOnTouchend",value:function(){this._render(),this._debounce(this._render.bind(this),100)}},{key:"_addEventListeners",value:function(){b.bindListeners(this,["_onChange","_doubleFireOnTouchend"]),r.isIOS()&&(this._boundOnChange=this._debounce(this._boundOnChange,30)),this._pageContent.addEventListener("scroll",this._boundOnChange,!0),r.isIOS()&&(b.addEventListener(this._pageContent,"touchmove",this._boundOnChange,{capture:!0,passive:!0}),this._pageContent.addEventListener("touchend",this._boundDoubleFireOnTouchend,!0)),window.document.addEventListener("resize",this._boundOnChange,!0)}},{key:"_removeEventListeners",value:function(){this._pageContent.removeEventListener("scroll",this._boundOnChange,!0),r.isIOS()&&(b.removeEventListener(this._pageContent,"touchmove",this._boundOnChange,{capture:!0,passive:!0}),this._pageContent.removeEventListener("touchend",this._boundDoubleFireOnTouchend,!0)),window.document.removeEventListener("resize",this._boundOnChange,!0)}},{key:"destroy",value:function(){this._removeAllElements(),this._delegate.destroy(),this._parentElement=this._delegate=this._renderedItems=null,this._removeEventListeners()}}]),n}(),t=function(){d(e,D);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e,[{key:"connectedCallback",value:function(){
// not very good idea and also not documented
this.hasAttribute("delegate")&&(this.delegate=window[this.getAttribute("delegate")])}
/**
       * @property delegate
       * @type {Object}
       * @description
       *  [en]Specify a delegate object to load and unload item elements.[/en]
       *  [ja]要素のロード、アンロードなどの処理を委譲するオブジェクトを指定します。[/ja]
       */
/**
       * @property delegate.createItemContent
       * @type {Function}
       * @description
       *   [en]
       *     This function should return a `HTMLElement`.
       *
       *     To help rendering the element, the current index and a template is supplied as arguments. The template is the initial content of the `<ons-lazy-repeat>` element.
       *   [/en]
       *   [ja]
       *     この関数は`HTMLElement`を返してください。
       *     要素を生成しやすくするために、現在のアイテムのインデックスとテンプレートが引数に渡されます。
       *     このテンプレートは、`<ons-lazy-repeat>`要素のコンテンツが渡されます。
       *   [/ja]
       */
/**
       * @property delegate.countItems
       * @type {Function}
       * @description
       *   [en]Should return the number of items in the list.[/en]
       *   [ja]リスト内のアイテム数を返してください。[/ja]
       */
/**
       * @property delegate.calculateItemHeight
       * @type {Function}
       * @description
       *   [en]
       *     Should return the height of an item. The index is provided as an argument.
       *
       *     This is important when rendering lists where the items have different height.
       *
       *     The function is optional and if it isn't present the height of the first item will be automatically calculated and used for all other items.
       *   [/en]
       *   [ja]
       *     アイテムの高さ(ピクセル)を返してください。アイテムのインデックス値は引数で渡されます。
       *     この関数は、それぞれのアイムが違った高さを持つリストをレンダリングする際に重要です。
       *     この関数はオプショナルです。もしこの関数が無い場合には、
       *     最初のアイテムの高さが他のすべてのアイテムの高さとして利用されます。
       *   [/ja]
       */
/**
       * @property delegate.destroyItem
       * @type {Function}
       * @description
       *   [en]
       *     This function is used called when an item is removed from the DOM. The index and DOM element is provided as arguments.
       *
       *     The function is optional but may be important in order to avoid memory leaks.
       *   [/en]
       *   [ja]
       *     この関数は、あるアイテムがDOMツリーから除かれた時に呼び出されます。
       *     アイテムのインデックス値とDOM要素が引数として渡されます。
       *     この関数はオプショナルですが、各アイテムの後処理が必要な場合にはメモリーリークを避けるために重要です。
       *   [/ja]
       */},{key:"delegate",get:function(){
// eslint-disable-line getter-return
b.throw("No delegate getter")}
/**
       * @method refresh
       * @signature refresh()
       * @description
       *   [en]Refresh the list. Use this method when the data has changed.[/en]
       *   [ja]リストを更新します。もしデータが変わった場合にはこのメソッドを使ってください。[/ja]
       */,set:function(t){this._lazyRepeatProvider&&this._lazyRepeatProvider.destroy(),!this._templateElement&&this.children[0]&&(this._templateElement=this.removeChild(this.children[0]));t=new wn(t,this._templateElement||null);this._lazyRepeatProvider=new En(this.parentElement,t)}},{key:"refresh",value:function(){this._lazyRepeatProvider&&this._lazyRepeatProvider.refresh()}},{key:"attributeChangedCallback",value:function(t,e,n){}},{key:"disconnectedCallback",value:function(){this._lazyRepeatProvider&&(this._lazyRepeatProvider.destroy(),this._lazyRepeatProvider=null)}}]),e}(),Cn=(k.LazyRepeatDelegate=wn,k.LazyRepeatProvider=En,i.LazyRepeat=t,customElements.define("ons-lazy-repeat",t),"list-header"),An={"":"list-header--*"},t=function(){d(n,D);var e=f(n);
/**
     * @attribute modifier
     * @type {String}
     * @description
     *   [en]The appearance of the list header.[/en]
     *   [ja]ヘッダーの表現を指定します。[/ja]
     */function n(){var t;return l(this,n),(t=e.call(this))._compile(),t}return c(n,[{key:"_compile",value:function(){g.prepare(this),this.classList.add(Cn),v.initModifier(this,An)}},{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"class":b.restoreClass(this,Cn,An);break;case"modifier":v.onModifierChanged(e,n,this,An)}}}],[{key:"observedAttributes",get:function(){return["modifier","class"]}}]),n}(),Sn=(i.ListHeader=t,customElements.define("ons-list-header",t),"list-title"),xn={"":"list-title--*"},t=function(){d(n,D);var e=f(n);function n(){var t;return l(this,n),(t=e.call(this))._compile(),t}return c(n,[{key:"_compile",value:function(){g.prepare(this),this.classList.add(Sn),v.initModifier(this,xn)}},{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"class":b.restoreClass(this,Sn,xn);break;case"modifier":v.onModifierChanged(e,n,this,xn)}}}],[{key:"observedAttributes",get:function(){return["modifier","class"]}}]),n}(),Pn=(i.ListTitle=t,customElements.define("ons-list-title",t),function(){d(o,Xe);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"linear":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.2:t;return l(this,o),i.call(this,{timing:e,delay:n,duration:t})}return c(o,[{key:"showExpansion",value:function(t,e){e()}},{key:"hideExpansion",value:function(t,e){e()}}]),o}()),Ln="list-item",On={".list-item":"list-item--*",".list-item__left":"list-item--*__left",".list-item__center":"list-item--*__center",".list-item__right":"list-item--*__right",".list-item__label":"list-item--*__label",".list-item__title":"list-item--*__title",".list-item__subtitle":"list-item--*__subtitle",".list-item__thumbnail":"list-item--*__thumbnail",".list-item__icon":"list-item--*__icon"},Mn={default:function(){d(e,Pn);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e,[{key:"showExpansion",value:function(t,e){this._animateExpansion(t,!0,e)}},{key:"hideExpansion",value:function(t,e){this._animateExpansion(t,!1,e)}},{key:"_animateExpansion",value:function(t,e,n){var i=t.expandableContent.style.height,o=t.expandableContent.style.display,a=(t.expandableContent.style.height="auto",t.expandableContent.style.display="block",window.getComputedStyle(t.expandableContent)),a=[{height:0,paddingTop:0,paddingBottom:0},{height:a.height,paddingTop:a.paddingTop,paddingBottom:a.paddingBottom}],r=[{transform:"rotate(45deg)"},{transform:"rotate(225deg)"}];
// To animate the opening of the expansion panel correctly, we need to know its
// height. To calculate this, we set its height to auto, and then get the computed
// height and padding. Once this is done, we set the height back to its original value.
// Now that we have the values we need, reset the height back to its original state
t.expandableContent.style.height=i,(i=C(t.expandableContent,{duration:this.duration,property:"height padding-top padding-bottom"})).default.apply(i,m(e?a:a.reverse())).play(function(){t.expandableContent.style.display=o,n&&n()}),t.expandChevron&&(i=C(t.expandChevron,{duration:this.duration,property:"transform"})).default.apply(i,m(e?r:r.reverse())).play()}}]),e}(),none:Pn},t=function(){d(i,D);var n=f(i);
/**
     * @attribute modifier
     * @type {String}
     * @description
     *   [en]The appearance of the list item.[/en]
     *   [ja]各要素の表現を指定します。[/ja]
     */
/**
     * @attribute lock-on-drag
     * @type {Boolean}
     * @description
     *   [en]Prevent vertical scrolling when the user drags horizontally.[/en]
     *   [ja]この属性があると、ユーザーがこの要素を横方向にドラッグしている時に、縦方向のスクロールが起きないようになります。[/ja]
     */
/**
     * @property lockOnDrag
     * @type {Boolean}
     * @description
     *   [en]Prevent vertical scrolling when the user drags horizontally.[/en]
     *   [ja]この属性があると、ユーザーがこの要素を横方向にドラッグしている時に、縦方向のスクロールが起きないようになります。[/ja]
     */
/**
     * @attribute tappable
     * @type {Boolean}
     * @description
     *   [en]Makes the element react to taps. `prevent-tap` attribute can be added to child elements like buttons or inputs to prevent this effect. `ons-*` elements are ignored by default.[/en]
     *   [ja][/ja]
     */
/**
     * @property tappable
     * @type {Boolean}
     * @description
     *   [en]Makes the element react to taps. `prevent-tap` attribute can be added to child elements like buttons or inputs to prevent this effect. `ons-*` elements are ignored by default.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute tap-background-color
     * @type {Color}
     * @description
     *   [en] Changes the background color when tapped. For this to work, the attribute "tappable" needs to be set. The default color is "#d9d9d9". It will display as a ripple effect on Android.[/en]
     *   [ja][/ja]
     */
/**
     * @property tapBackgroundColor
     * @type {Color}
     * @description
     *   [en] Changes the background color when tapped. For this to work, the attribute "tappable" needs to be set. The default color is "#d9d9d9". It will display as a ripple effect on Android.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute keep-tap-background-color
     * @type {Boolean}
     * @description
     *  [en] Prevent from clearing the background color on `"touchmove"`, `"touchcancel"`, `"touchend"`, `"touchleave"`, `"mouseup"`, and `"mouseout"`. For this to work, the attribute "tappable" needs to be set.[/en]
     *  [ja] この属性があると、`"touchmove"`, `"touchcancel"`, `"touchend"`, `"touchleave"`, `"mouseup"`, and `"mouseout"` イベント時に背景色がクリアされないようになります。[/ja]
     */
/**
     * @property keepTapBackgroundColor
     * @type {Boolean}
     * @description
     *   [en] Prevent from clearing the background color on `"touchmove"`, `"touchcancel"`, `"touchend"`, `"touchleave"`, `"mouseup"`, and `"mouseout"`. For this to work, the attribute "tappable" needs to be set.[/en]
     *   [ja] この属性があると、`"touchmove"`, `"touchcancel"`, `"touchend"`, `"touchleave"`, `"mouseup"`, and `"mouseout"` イベント時に背景色がクリアされないようになります。[/ja]
     */
/**
     * @attribute expandable
     * @type {Boolean}
     * @description
     *   [en]Makes the element able to be expanded to reveal extra content. For this to work, the expandable content must be defined in `div.expandable-content`.[/en]
     *   [ja][/ja]
     */
/**
     * @property expandable
     * @initonly
     * @type {Boolean}
     * @description
     *   [en]Makes the element able to be expanded to reveal extra content. For this to work, the expandable content must be defined in `div.expandable-content`.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute expanded
     * @type {Boolean}
     * @description
     *   [en]For expandable list items, specifies whether the expandable content is expanded or not.[/en]
     *   [ja][/ja]
     */
/**
     * @property expanded
     * @type {Boolean}
     * @description
     *   [en]For expandable list items, specifies whether the expandable content is expanded or not.[/en]
     *   [ja][/ja]
     */
/**
     * @event expand
     * @description
     *   [en]For expandable list items, fires when the list item is expanded or contracted.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute animation
     * @type {String}
     * @default default
     * @description
     *  [en]The animation used when showing and hiding the expandable content. Can be either `"default"` or `"none"`.[/en]
     *  [ja][/ja]
     */
/**
     * @property animation
     * @type {String}
     * @default default
     * @description
     *  [en]The animation used when showing and hiding the expandable content. Can be either `"default"` or `"none"`.[/en]
     *  [ja][/ja]
     */function i(){l(this,i),(t=n.call(this))._animatorFactory=t._updateAnimatorFactory();var t,e=/^ons-(?!col$|row$|if$)/i;return t._shouldIgnoreTap=function(t){return t.hasAttribute("prevent-tap")||e.test(t.tagName)},
// show and hide functions for Vue hidable mixin
t.show=t.showExpansion,t.hide=t.hideExpansion,M(a(t),function(){t._compile()}),t}
/**
     * Compiles the list item.
     *
     * Various elements are allowed in the body of a list item:
     *
     *  - div.left, div.right, and div.center are allowed as direct children
     *  - if div.center is not defined, anything that isn't div.left, div.right or div.expandable-content will be put in a div.center
     *  - if div.center is defined, anything that isn't div.left, div.right or div.expandable-content will be ignored
     *  - if list item has expandable attribute:
     *      - div.expandable-content is allowed as a direct child
     *      - div.top is allowed as direct child
     *      - if div.top is defined, anything that isn't div.expandable-content should be inside div.top - anything else will be ignored
     *      - if div.right is not defined, a div.right will be created with a drop-down chevron
     *
     * See the tests for examples.
     */return c(i,[{key:"_compile",value:function(){g.prepare(this),this.classList.add(Ln);var e,n,i,o,a,t,r=[],s=(Array.from(this.childNodes).forEach(function(t){t.nodeType!==Node.ELEMENT_NODE?r.push(t):t.classList.contains("top")?e=t:t.classList.contains("expandable-content")?n=t:r.push(t),"ONS-RIPPLE"!==t.nodeName&&t.remove()}),r=e?Array.from(e.childNodes):r,[]);r.forEach(function(t){t.nodeType!==Node.ELEMENT_NODE?s.push(t):t.classList.contains("left")?i=t:t.classList.contains("right")?o=t:t.classList.contains("center")?a=t:s.push(t)}),this.hasAttribute("expandable")?(this.classList.add("list-item--expandable"),e||(e=document.createElement("div")).classList.add("top"),e.classList.add("list-item__top"),this.appendChild(e),this._top=e,n&&(n.classList.add("list-item__expandable-content"),this.appendChild(n)),o||((o=document.createElement("div")).classList.add("list-item__right","right"),(t=document.createElement("span")).classList.add("list-item__expand-chevron"),o.appendChild(t)),
// The case where the list item should already start expanded.
// Adding the class early stops the animation from running at startup.
this.expanded&&this.classList.add("list-item--expanded")):e=this,a||((a=document.createElement("div")).classList.add("center"),s.forEach(function(t){return a.appendChild(t)})),a.classList.add("list-item__center"),e.appendChild(a),i&&(i.classList.add("list-item__left"),e.appendChild(i)),o&&(o.classList.add("list-item__right"),e.appendChild(o)),b.updateRipple(this),v.initModifier(this,On)}
/**
       * @method showExpansion
       * @signature showExpansion()
       * @description
       *   [en]Show the expandable content if the element is expandable.[/en]
       *   [ja][/ja]
       */},{key:"showExpansion",value:function(){this.expanded=!0}
/**
       * @method hideExpansion
       * @signature hideExpansion()
       * @description
       *   [en]Hide the expandable content if the element expandable.[/en]
       *   [ja][/ja]
       */},{key:"hideExpansion",value:function(){this.expanded=!1}},{key:"toggleExpansion",value:function(){this.expanded=!this.expanded}
/**
       * @method clearTapBackgroundColor
       * @signature clearTapBackgroundColor()
       * @description
       *   [en]Clear backgroundColor changed on tap or click. This method is helpful when `keep-tap-background-color` is `true`. [/en]
       *   [ja]タップやクリックした時に効果が表示されるようになります。このメソッドは `keep-tap-background-color` が `true` のときに使用します。[/ja]
       */},{key:"clearTapBackgroundColor",value:function(){this._clearTapBackgroundColor()}},{key:"_animateExpansion",value:function(){var t,e=this,n=this.expanded&&this.classList.contains("list-item--expanded");
// Stops the animation from running in the case where the list item should start already expanded
!this.hasAttribute("expandable")||this._expanding||n||(this._expanding=!0,n=function(){e._expanding=!1,e.expanded?e.classList.add("list-item--expanded"):e.classList.remove("list-item--expanded")},(t=this._animatorFactory.newAnimator())._animateExpansion?t._animateExpansion(this,this.expanded,n):n())}},{key:"_updateAnimatorFactory",value:function(){return new w({animators:Mn,baseClass:Pn,baseClassName:"ListItemAnimator",defaultAnimation:this.getAttribute("animation")||"default"})}},{key:"expandableContent",get:function(){return this.querySelector(".list-item__expandable-content")}},{key:"expandChevron",get:function(){return this.querySelector(".list-item__expand-chevron")}},{key:"attributeChangedCallback",value:function(t,e,n){var i=this;switch(t){case"class":b.restoreClass(this,Ln,On);break;case"modifier":v.onModifierChanged(e,n,this,On);break;case"ripple":b.updateRipple(this);break;case"animation":this._animatorFactory=this._updateAnimatorFactory();break;case"expanded":M(this,function(){return i._animateExpansion()})}}},{key:"connectedCallback",value:function(){var t=this;M(this,function(){t._setupListeners(!0),t._originalBackgroundColor=t.style.backgroundColor,t.tapped=!1})}},{key:"disconnectedCallback",value:function(){this._setupListeners(!1)}},{key:"_setupListeners",value:function(t){t=(t?"add":"remove")+"EventListener";b[t](this,"touchstart",this._onTouch,{passive:!0}),b[t](this,"touchmove",this._onRelease,{passive:!0}),this[t]("touchcancel",this._onRelease),this[t]("touchend",this._onRelease),this[t]("touchleave",this._onRelease),this[t]("drag",this._onDrag),this[t]("mousedown",this._onTouch),this[t]("mouseup",this._onRelease),this[t]("mouseout",this._onRelease),this._top&&this._top[t]("click",this._onClickTop.bind(this))}},{key:"_onClickTop",value:function(){this._expanding||(this.toggleExpansion(),this.dispatchEvent(new Event("expand")),this.dispatchEvent(new Event("expansion")))}},{key:"_onDrag",value:function(t){t=t.gesture;
// Prevent vertical scrolling if the users pans left or right.
this.hasAttribute("lock-on-drag")&&-1<["left","right"].indexOf(t.direction)&&t.preventDefault()}},{key:"_onTouch",value:function(t){var e=this;this.tapped||this!==t.target&&(this._shouldIgnoreTap(t.target)||b.findParent(t.target,this._shouldIgnoreTap,function(t){return t===e}))||(this.tapped=!0,t={transition:"background-color 0.0s linear 0.02s, box-shadow 0.0s linear 0.02s"},this.hasAttribute("tappable")&&(this.style.backgroundColor&&(this._originalBackgroundColor=this.style.backgroundColor),t.backgroundColor=this.getAttribute("tap-background-color")||"#d9d9d9",t.boxShadow="0px -1px 0px 0px ".concat(t.backgroundColor)),u(this,t))}},{key:"_onRelease",value:function(){this.tapped=!1,this.keepTapBackgroundColor||this._clearTapBackgroundColor(),u.clear(this,"transition boxShadow")}},{key:"_clearTapBackgroundColor",value:function(){this.style.backgroundColor=this._originalBackgroundColor||""}}],[{key:"observedAttributes",get:function(){return["modifier","class","ripple","animation","expanded"]}}]),i}(),Tn=(b.defineBooleanProperties(t,["expanded","expandable","tappable","lock-on-drag","keep-tap-background-color"]),b.defineStringProperties(t,["animation","tap-background-color"]),i.ListItem=t,customElements.define("ons-list-item",t),{"":"list--*"}),t=function(){d(n,D);var e=f(n);
/**
     * @attribute modifier
     * @type {String}
     * @description
     *   [en]The appearance of the list.[/en]
     *   [ja]リストの表現を指定します。[/ja]
     */function n(){var t;return l(this,n),(t=e.call(this))._compile(),t}return c(n,[{key:"_compile",value:function(){g.prepare(this),this.classList.add("list"),v.initModifier(this,Tn)}},{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"class":b.restoreClass(this,"list",Tn);break;case"modifier":v.onModifierChanged(e,n,this,Tn)}}}],[{key:"observedAttributes",get:function(){return["modifier","class"]}}]),n}(),In=(i.List=t,customElements.define("ons-list",t),["autocapitalize","autocomplete","autocorrect","autofocus","disabled","inputmode","max","maxlength","min","minlength","name","pattern","placeholder","readonly","required","size","spellcheck","step","validator","value"]),Dn=function(){d(n,D);var e=f(n);function n(){var t;return l(this,n),(t=e.call(this)).constructor===n&&b.throwAbstract(),M(a(t),function(){return t._compile()}),t._boundDelegateEvent=t._delegateEvent.bind(a(t)),t}return c(n,[{key:"_update",value:function(){}// Optionally implemented
},{key:"_scheme",get:function(){
// eslint-disable-line getter-return
b.throwMember()}},{key:"_template",get:function(){
// eslint-disable-line getter-return
b.throwMember()}},{key:"type",get:function(){
// eslint-disable-line getter-return
b.throwMember()}},{key:"_compile",value:function(){g.prepare(this),this._defaultClassName&&this.classList.add(this._defaultClassName),0===this.children.length&&(this.appendChild(b.createFragment(this._template)),this._setInputId(),this._updateBoundAttributes(),v.initModifier(this,this._scheme))}},{key:"_updateBoundAttributes",value:function(){var e=this;In.forEach(function(t){e.hasAttribute(t)?e._input.setAttribute(t,e.getAttribute(t)):e._input.removeAttribute(t)}),this._update()}},{key:"_delegateEvent",value:function(t){t=new CustomEvent(t.type,{bubbles:!1,cancelable:!0});return this.dispatchEvent(t)}},{key:"_setInputId",value:function(){this.hasAttribute("input-id")&&(this._input.id=this.getAttribute("input-id"))}},{key:"_defaultClassName",get:function(){return""}},{key:"_input",get:function(){return this.querySelector("input")}},{key:"value",get:function(){return null===this._input?this.getAttribute("value"):this._input.value},set:function(t){var e=this;M(this,function(){t instanceof Date&&(t=t.toISOString().substring(0,10)),e._input.value=t,e._update()})}},{key:"connectedCallback",value:function(){var t=this;M(this,function(){t._input.addEventListener("focus",t._boundDelegateEvent),t._input.addEventListener("blur",t._boundDelegateEvent)})}},{key:"disconnectedCallback",value:function(){var t=this;M(this,function(){t._input.removeEventListener("focus",t._boundDelegateEvent),t._input.removeEventListener("blur",t._boundDelegateEvent)})}},{key:"attributeChangedCallback",value:function(t,e,n){var i=this;switch(t){case"modifier":M(this,function(){return v.onModifierChanged(e,n,i,i._scheme)});break;case"input-id":M(this,function(){return i._setInputId()});break;case"class":b.restoreClass(this,this._defaultClassName,this._scheme)}0<=In.indexOf(t)&&M(this,function(){return i._updateBoundAttributes()})}},{key:"blur",value:function(){this._input.blur()}},{key:"focus",value:function(){this._input.focus()}}],[{key:"observedAttributes",get:function(){return["modifier","input-id","class"].concat(In)}}]),n}(),Nn=(b.defineBooleanProperties(Dn,["disabled"]),{".text-input":"text-input--*",".text-input__label":"text-input--*__label"}),t=function(){d(o,Dn);var e=f(o);function o(){var t;return l(this,o),(t=e.call(this))._boundOnInput=t._update.bind(a(t)),t._boundOnFocusin=t._update.bind(a(t)),t}
/* Inherited props */return c(o,[{key:"_update",value:function(){this._updateLabel(),this._updateLabelClass()}},{key:"_scheme",get:function(){return Nn}},{key:"_template",get:function(){return'\n      <input type="'.concat(this.type,'" class="text-input">\n      <span class="text-input__label"></span>\n    ')}},{key:"type",get:function(){var t=this.getAttribute("type");return["checkbox","radio"].indexOf(t)<0&&t||"text"},set:function(t){this.setAttribute("type",t)}
/* Own props */},{key:"_updateLabel",value:function(){var t=this.getAttribute("placeholder")||"";void 0!==this._helper.textContent?this._helper.textContent=t:this._helper.innerText=t}},{key:"_updateLabelClass",value:function(){""===this.value?this._helper.classList.remove("text-input--material__label--active"):this._helper.classList.add("text-input--material__label--active")}},{key:"_helper",get:function(){return this.querySelector("span")}},{key:"connectedCallback",value:function(){var t=this,e=(p(h(o.prototype),"connectedCallback",this).call(this),M(this,function(){t._input.addEventListener("input",t._boundOnInput),t._input.addEventListener("focusin",t._boundOnFocusin)}),this.getAttribute("type"));0<=["checkbox","radio"].indexOf(e)&&b.warn('Warn: <ons-input type="'.concat(e,'"> is deprecated since v2.4.0. Use <ons-').concat(e,"> instead."))}},{key:"disconnectedCallback",value:function(){var t=this;p(h(o.prototype),"disconnectedCallback",this).call(this),M(this,function(){t._input.removeEventListener("input",t._boundOnInput),t._input.removeEventListener("focusin",t._boundOnFocusin)})}},{key:"attributeChangedCallback",value:function(t,e,n){var i=this;"type"===t?M(this,function(){return i._input.setAttribute("type",i.type)}):p(h(o.prototype),"attributeChangedCallback",this).call(this,t,e,n)}
/**
       * @attribute placeholder
       * @type {String}
       * @description
       *   [en]Placeholder text. In Material Design, this placeholder will be a floating label.[/en]
       *   [ja][/ja]
       */
/**
       * @attribute float
       * @description
       *  [en]If this attribute is present, the placeholder will be animated in Material Design.[/en]
       *  [ja]この属性が設定された時、ラベルはアニメーションするようになります。[/ja]
       */
/**
       * @property float
       * @type {Boolean}
       * @description
       *  [en]If this property is present, the placeholder will be animated in Material Design.[/en]
       *  [ja]この属性が設定された時、ラベルはアニメーションするようになります。[/ja]
       */
/**
       * @attribute type
       * @type {String}
       * @description
       *  [en]
       *    Specify the input type. This is the same as the "type" attribute for normal inputs. It expects strict text types such as `text`, `password`, etc. For checkbox, radio button, select or range, please have a look at the corresponding elements.
       *
       *    Please take a look at [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type) for an exhaustive list of possible values. Depending on the platform and browser version some of these might not work.
       *  [/en]
       *  [ja][/ja]
       */
/**
       * @attribute input-id
       * @type {String}
       * @description
       *  [en]Specify the "id" attribute of the inner `<input>` element. This is useful when using `<label for="...">` elements.[/en]
       *  [ja][/ja]
       */
/**
       * @property value
       * @type {String}
       * @description
       *   [en]The current value of the input.[/en]
       *   [ja][/ja]
       */
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the input is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
/**
       * @method focus
       * @signature focus()
       * @description
       *   [en]Focuses the input.[/en]
       *   [ja][/ja]
       */
/**
       * @method blur
       * @signature blur()
       * @description
       *   [en]Removes focus from the input.[/en]
       *   [ja][/ja]
       */}],[{key:"observedAttributes",get:function(){return[].concat(m(p(h(o),"observedAttributes",this)),["type"])}}]),o}(),Bn=(b.defineBooleanProperties(t,["float"]),i.Input=t,customElements.define("ons-input",t),function(){d(i,Dn);var e=f(i);function i(){var t;return l(this,i),(t=e.call(this)).constructor===i&&util.throwAbstract(),M(a(t),function(){t.attributeChangedCallback("checked",null,t.getAttribute("checked"))}),t}
/* Inherited props */return c(i,[{key:"_template",get:function(){return'\n      <input type="'.concat(this.type,'" class="').concat(this._defaultClassName,'__input">\n      <span class="').concat(this._defaultClassName,'__checkmark"></span>\n    ')}
/* Own props */},{key:"_helper",get:function(){return this.querySelector("span")}},{key:"checked",get:function(){return this._input.checked},set:function(t){var e=this;M(this,function(){e._input.checked=t})}},{key:"attributeChangedCallback",value:function(t,e,n){"checked"===t?this.checked=null!==n:p(h(i.prototype),"attributeChangedCallback",this).call(this,t,e,n)}}],[{key:"observedAttributes",get:function(){return[].concat(m(p(h(i),"observedAttributes",this)),["checked"])}}]),i}()),Rn={".checkbox":"checkbox--*",".checkbox__input":"checkbox--*__input",".checkbox__checkmark":"checkbox--*__checkmark"},t=function(){d(e,Bn);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e,[{key:"_scheme",get:function(){return Rn}},{key:"_defaultClassName",get:function(){return"checkbox"}},{key:"type",get:function(){return"checkbox"}
/**
       * @attribute input-id
       * @type {String}
       * @description
       *  [en]Specify the "id" attribute of the inner `<input>` element. This is useful when using `<label for="...">` elements.[/en]
       *  [ja][/ja]
       */
/**
       * @property value
       * @type {String}
       * @description
       *   [en]The current value of the checkbox.[/en]
       *   [ja][/ja]
       */
/**
       * @property checked
       * @type {Boolean}
       * @description
       *   [en]Whether the checkbox is checked or not.[/en]
       *   [ja][/ja]
       */
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the checkbox is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
/**
       * @method focus
       * @signature focus()
       * @description
       *   [en]Focuses the checkbox.[/en]
       *   [ja][/ja]
       */
/**
       * @method blur
       * @signature blur()
       * @description
       *   [en]Removes focus from the checkbox.[/en]
       *   [ja][/ja]
       */}]),e}(),Hn=(i.Checkbox=t,customElements.define("ons-checkbox",t),{".radio-button":"radio-button--*",".radio-button__input":"radio-button--*__input",".radio-button__checkmark":"radio-button--*__checkmark"}),t=function(){d(e,Bn);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e,[{key:"_scheme",get:function(){return Hn}},{key:"_defaultClassName",get:function(){return"radio-button"}},{key:"type",get:function(){return"radio"}
/**
       * @attribute input-id
       * @type {String}
       * @description
       *  [en]Specify the "id" attribute of the inner `<input>` element. This is useful when using `<label for="...">` elements.[/en]
       *  [ja][/ja]
       */
/**
       * @property value
       * @type {String}
       * @description
       *   [en]The current value of the radio button.[/en]
       *   [ja][/ja]
       */
/**
       * @property checked
       * @type {Boolean}
       * @description
       *   [en]Whether the radio button is checked or not.[/en]
       *   [ja][/ja]
       */
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the radio button is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
/**
       * @method focus
       * @signature focus()
       * @description
       *   [en]Focuses the radio button.[/en]
       *   [ja][/ja]
       */
/**
       * @method blur
       * @signature blur()
       * @description
       *   [en]Removes focus from the radio button.[/en]
       *   [ja][/ja]
       */}]),e}(),qn=(i.Radio=t,customElements.define("ons-radio",t),{".search-input":"search-input--*"}),t=function(){d(e,Dn);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e,[{key:"_scheme",get:function(){return qn}},{key:"_template",get:function(){return'\n      <input type="'.concat(this.type,'" class="search-input">\n    ')}},{key:"type",get:function(){return"search"}
/**
       * @attribute input-id
       * @type {String}
       * @description
       *  [en]Specify the "id" attribute of the inner `<input>` element. This is useful when using `<label for="...">` elements.[/en]
       *  [ja][/ja]
       */
/**
       * @property value
       * @type {String}
       * @description
       *   [en]The current value of the input.[/en]
       *   [ja][/ja]
       */
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the input is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
/**
       * @method focus
       * @signature focus()
       * @description
       *   [en]Focuses the input.[/en]
       *   [ja][/ja]
       */
/**
       * @method blur
       * @signature blur()
       * @description
       *   [en]Removes focus from the input.[/en]
       *   [ja][/ja]
       */}]),e}(),zn=(i.SearchInput=t,customElements.define("ons-search-input",t),function(){d(o,Xe);var i=f(o);
/**
     * @param {Object} options
     * @param {String} options.timing
     * @param {Number} options.duration
     * @param {Number} options.delay
     */function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"linear":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.2:t;return l(this,o),i.call(this,{timing:e,delay:n,duration:t})}
/**
     * @param {HTMLElement} modal
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){e()}
/**
       * @param {HTMLElement} modal
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){e()}}]),o}()),Fn={"":"modal--*",modal__content:"modal--*__content"},jn={default:zn,fade:function(){d(o,zn);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"linear":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.3:t;return l(this,o),i.call(this,{timing:e,delay:n,duration:t})}
/**
     * @param {HTMLElement} modal
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){e=e||function(){},C(t,this.def).default({opacity:0},{opacity:1}).queue(function(t){e(),t()}).play()}
/**
       * @param {HTMLElement} modal
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){e=e||function(){},C(t,this.def).default({opacity:1},{opacity:0}).queue(function(t){e(),t()}).play()}}]),o}(),lift:function(){d(o,zn);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"cubic-bezier( .1, .7, .1, 1)":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.4:t;return l(this,o),i.call(this,{timing:e,delay:n,duration:t})}
/**
     * @param {HTMLElement} modal
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){e=e||function(){},C(t,this.def).default({transform:"translate3d(0, 100%, 0)"},{transform:"translate3d(0, 0, 0)"}).queue(function(t){e(),t()}).play()}
/**
       * @param {HTMLElement} modal
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){e=e||function(){},C(t,this.def).default({transform:"translate3d(0, 0, 0)"},{transform:"translate3d(0, 100%, 0)"}).queue(function(t){e(),t()}).play()}}]),o}(),none:zn},t=function(){d(i,Ge);var e=f(i);
/**
     * @event preshow
     * @description
     * [en]Fired just before the modal is displayed.[/en]
     * [ja]モーダルが表示される直前に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.modal
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Execute this function to stop the modal from being shown.[/en]
     *   [ja]この関数を実行すると、ダイアログの表示がキャンセルされます。[/ja]
     */
/**
     * @event postshow
     * @description
     * [en]Fired just after the modal is displayed.[/en]
     * [ja]モーダルが表示された直後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.modal
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     */
/**
     * @event prehide
     * @description
     * [en]Fired just before the modal is hidden.[/en]
     * [ja]モーダルが隠れる直前に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.modal
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Execute this function to stop the modal from being hidden.[/en]
     *   [ja]この関数を実行すると、ダイアログの非表示がキャンセルされます。[/ja]
     */
/**
     * @event posthide
     * @description
     * [en]Fired just after the modal is hidden.[/en]
     * [ja]モーダルが隠れた後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.modal
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     */
/**
     * @attribute animation
     * @type {String}
     * @default default
     * @description
     *  [en]The animation used when showing and hiding the modal. Can be either `"none"`, `"fade"` or `"lift"`.[/en]
     *  [ja]モーダルを表示する際のアニメーション名を指定します。"none"もしくは"fade","lift"を指定できます。[/ja]
     */
/**
     * @attribute animation-options
     * @type {Expression}
     * @description
     *  [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *  [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。e.g. <code>{duration: 0.2, delay: 1, timing: 'ease-in'}</code>[/ja]
     */
/**
     * @property animationOptions
     * @type {Object}
     * @description
     *   [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *   [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。例：{duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
     */
/**
     * @attribute visible
     * @type {Boolean}
     * @description
     *   [en]Whether the modal is visible or not.[/en]
     *   [ja]要素が見える場合に`true`。[/ja]
     */function i(){var t;return l(this,i),(t=e.call(this))._defaultDBB=function(){},M(a(t),function(){return t._compile()}),t}return c(i,[{key:"_scheme",get:function(){return Fn}},{key:"_updateAnimatorFactory",value:function(){return new w({animators:jn,baseClass:zn,baseClassName:"ModalAnimator",defaultAnimation:this.getAttribute("animation")})}
/**
       * @property onDeviceBackButton
       * @type {Object}
       * @description
       *   [en]Back-button handler.[/en]
       *   [ja]バックボタンハンドラ。[/ja]
       */},{key:"_compile",value:function(){if(this.style.display="none",this.style.zIndex=10001,this.classList.add("modal"),!b.findChild(this,".modal__content")){var t=document.createElement("div");for(t.classList.add("modal__content");this.childNodes[0];){var e=this.childNodes[0];this.removeChild(e),t.insertBefore(e,null)}this.appendChild(t)}v.initModifier(this,this._scheme)}},{key:"_toggleStyle",value:function(t){this.style.display=t?"table":"none"}},{key:"connectedCallback",value:function(){p(h(i.prototype),"connectedCallback",this).call(this)}},{key:"disconnectedCallback",value:function(){p(h(i.prototype),"disconnectedCallback",this).call(this)}
/**
       * @property visible
       * @type {Boolean}
       * @description
       *   [en]Whether the element is visible or not.[/en]
       *   [ja]要素が見える場合に`true`。[/ja]
       */
/**
       * @method show
       * @signature show([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name. Available animations are `"none"` and `"fade"`.[/en]
       *   [ja]アニメーション名を指定します。"none", "fade"のいずれかを指定します。[/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. {duration: 0.2, delay: 0.4, timing: 'ease-in'}[/ja]
       * @param {Function} [options.callback]
       *   [en]This function is called after the modal has been revealed.[/en]
       *   [ja]モーダルが表示され終わった後に呼び出される関数オブジェクトを指定します。[/ja]
       * @description
       *   [en]Show modal.[/en]
       *   [ja]モーダルを表示します。[/ja]
       * @return {Promise}
       *   [en]Resolves to the displayed element[/en]
       *   [ja][/ja]
       */
/**
       * @method toggle
       * @signature toggle([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name. Available animations are `"none"` and `"fade"`.[/en]
       *   [ja]アニメーション名を指定します。"none", "fade"のいずれかを指定します。[/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. {duration: 0.2, delay: 0.4, timing: 'ease-in'}[/ja]
       * @param {Function} [options.callback]
       *   [en]This function is called after the modal has been revealed.[/en]
       *   [ja]モーダルが表示され終わった後に呼び出される関数オブジェクトを指定します。[/ja]
       * @description
       *   [en]Toggle modal visibility.[/en]
       *   [ja]モーダルの表示を切り替えます。[/ja]
       */
/**
       * @method hide
       * @signature hide([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name. Available animations are `"none"` and `"fade"`.[/en]
       *   [ja]アニメーション名を指定します。"none", "fade"のいずれかを指定します。[/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. {duration: 0.2, delay: 0.4, timing: 'ease-in'}[/ja]
       * @param {Function} [options.callback]
       *   [en]This function is called after the modal has been revealed.[/en]
       *   [ja]モーダルが表示され終わった後に呼び出される関数オブジェクトを指定します。[/ja]
       * @description
       *   [en]Hide modal.[/en]
       *   [ja]モーダルを非表示にします。[/ja]
       * @return {Promise}
       *   [en]Resolves to the hidden element[/en]
       *   [ja][/ja]
       */},{key:"attributeChangedCallback",value:function(t,e,n){"class"===t?b.restoreClass(this,"modal",Fn):p(h(i.prototype),"attributeChangedCallback",this).call(this,t,e,n)}
/**
       * @param {String} name
       * @param {Function} Animator
       */}],[{key:"observedAttributes",get:function(){return[].concat(m(p(h(i),"observedAttributes",this)),["class"])}},{key:"registerAnimator",value:function(t,e){e.prototype instanceof zn||b.throwAnimator("Modal"),jn[t]=e}},{key:"animators",get:function(){return jn}},{key:"ModalAnimator",get:function(){return zn}}]),i}(),Vn=(i.Modal=t,customElements.define("ons-modal",t),function(){function t(e){var n=this;l(this,t),"element ignoreSwipe isInitialState onDragCallback swipeMax swipeMin swipeMid".split(/\s+/).forEach(function(t){return n[t]=e[t]}),this.elementHandler=e.elementHandler||e.element,this.getThreshold=e.getThreshold||function(){return.5},this.getSide=e.getSide||function(){return"left"},this.handleGesture=this.handleGesture.bind(this),this._shouldFixScroll="ios"===b.globals.actualMobileOS}return c(t,[{key:"update",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.element.hasAttribute("swipeable"),t=(this.gestureDetector||(this.gestureDetector=new A(this.elementHandler,{dragMinDistance:1,passive:!this._shouldFixScroll})),t?"on":"off");this.gestureDetector[t]("drag dragstart dragend",this.handleGesture)}},{key:"handleGesture",value:function(t){t.gesture&&("dragstart"===t.type?this.onDragStart(t):this._ignoreDrag||("dragend"===t.type?this.onDragEnd(t):this.onDrag(t)))}},{key:"onDragStart",value:function(t){var e=this;this._ignoreDrag=t.consumed||!b.isValidGesture(t)||this.ignoreSwipe(t,"left"===e.getSide()?t.gesture.center.clientX:window.innerWidth-t.gesture.center.clientX),this._ignoreDrag||(t.consume&&t.consume(),t.consumed=!0,this._width=(e=this.element.style.width||"100%",e=[parseInt(e,10),/px/.test(e)],t=e[0],e[1]?t:Math.round(document.body.offsetWidth*t/100)),this._startDistance=this._distance=this.isInitialState instanceof Function&&!this.isInitialState()?this._width:0,b.iosPreventScroll(this.gestureDetector))}},{key:"onDrag",value:function(t){t.stopPropagation();t="left"===this.getSide()?t.gesture.deltaX:-t.gesture.deltaX,t=Math.max(0,Math.min(this._width,this._startDistance+t));t!==this._distance&&(this._distance=t,this.swipeMid(this._distance,this._width))}},{key:"onDragEnd",value:function(t){t.stopPropagation();t=t.gesture.interimDirection;this.getSide()!==t&&this._distance>this._width*this.getThreshold()?this.swipeMax():this.swipeMin()}},{key:"dispose",value:function(){this.gestureDetector&&this.gestureDetector.dispose(),this.gestureDetector=this.element=this.elementHandler=null}}]),t}()),Wn=function(){d(n,Xe);var e=f(n);
/**
     * @param {Object} options
     * @param {String} options.timing
     * @param {Number} options.duration
     * @param {Number} options.delay
     */function n(t){return l(this,n),t=b.extend({timing:"linear",duration:"0.4",delay:"0"},t||{}),e.call(this,t)}return c(n,[{key:"push",value:function(t,e,n){n()}},{key:"pop",value:function(t,e,n){n()}},{key:"block",value:function(t){var e=b.createElement('\n      <div style="position: absolute; background-color: transparent; width: 100%; height: 100%; z-index: 100000"></div>\n    ');return t.parentNode.appendChild(e),function(){return e.remove()}}}]),n}(),Xn=["durationRestore","durationSwipe","timingSwipe"],Un=function(){d(a,Wn);var o=f(a);function a(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.durationRestore,e=void 0===e?.1:e,n=t.durationSwipe,n=void 0===n?.15:n,i=t.timingSwipe,i=void 0===i?"linear":i,t=z(t,Xn);return l(this,a),(t=o.call(this,s({},t))).constructor===a&&b.throwAbstract(),t.durationRestore=e,t.durationSwipe=n,t.timingSwipe=i,t.optSwipe={timing:i,duration:n},t.optRestore={timing:i,duration:e},t.swipeShadow=b.createElement('<div style="position: absolute; height: 100%; width: 12px; right: 100%; top: 0; bottom: 0; z-index: -1;background: linear-gradient(to right, transparent 0, rgba(0,0,0,.04) 40%, rgba(0,0,0,.12) 80%, rgba(0,0,0,.16) 100%);"></div>'),t.isDragStart=!0,t}return c(a,[{key:"_decompose",value:function(){b.throwMember()}},{key:"_shouldAnimateToolbar",value:function(){b.throwMember()}},{key:"_calculateDelta",value:function(){b.throwMember()}},{key:"_dragStartSetup",value:function(t,e){this.isDragStart=!1,
// Avoid content clicks
this.unblock=p(h(a.prototype),"block",this).call(this,e),
// Mask
t.parentElement.insertBefore(this.backgroundMask,t),
// Decomposition
this.target={enter:b.findToolbarPage(t)||t,leave:b.findToolbarPage(e)||e},this.decomp={enter:this._decompose(this.target.enter),leave:this._decompose(this.target.leave)},
// Animation values
this.delta=this._calculateDelta(e,this.decomp.leave),this.shouldAnimateToolbar=this._shouldAnimateToolbar(this.target.enter,this.target.leave),
// Shadow && styles
this.shouldAnimateToolbar?(this.swipeShadow.style.top=this.decomp.leave.toolbar.offsetHeight+"px",this.target.leave.appendChild(this.swipeShadow),this._saveStyle(this.target.enter,this.target.leave)):(e.appendChild(this.swipeShadow),this._saveStyle(t,e)),e.classList.add("overflow-visible"),this.overflowElement=e,this.decomp.leave.content.classList.add("content-swiping")}},{key:"translate",value:function(t,e,n,i){this.isSwiping=!0,"none"===n.style.display&&(n.style.display=""),this.isDragStart&&(this.maxWidth=e,this._dragStartSetup(n,i));e=(t-e)/e;this.shouldAnimateToolbar?C.runAll(/* Enter page */
C([this.decomp.enter.content,this.decomp.enter.bottomToolbar,this.decomp.enter.background]).queue({transform:"translate3d(".concat(25*e,"%, 0, 0)"),opacity:1+10*e/100}),C(this.decomp.enter.toolbarCenter).queue({transform:"translate3d(".concat(this.delta.title*e,"px, 0, 0)"),opacity:1+e}),C(this.decomp.enter.backButtonLabel).queue({opacity:1+10*e/100,
// 0.9 -> 1
transform:"translate3d(".concat(this.delta.label*e,"px, 0, 0)")}),C(this.decomp.enter.other).queue({opacity:1+e}),/* Leave page */
C([this.decomp.leave.content,this.decomp.leave.bottomToolbar,this.decomp.leave.background,this.swipeShadow]).queue({transform:"translate3d(".concat(t,"px, 0, 0)")}),C(this.decomp.leave.toolbar).queue({opacity:-1*e}),C(this.decomp.leave.toolbarCenter).queue({transform:"translate3d(".concat(125*(1+e),"%, 0, 0)")}),C(this.decomp.leave.backButtonLabel).queue({opacity:-1*e,
// 1 -> 0
transform:"translate3d(".concat(this.delta.title*(1+e),"px, 0, 0)")}),/* Other */
C(this.swipeShadow).queue({opacity:-1*e})):C.runAll(C(i).queue({transform:"translate3d(".concat(t,"px, 0, 0)")}),C(n).queue({transform:"translate3d(".concat(25*e,"%, 0, 0)"),opacity:1+10*e/100}),C(this.swipeShadow).queue({opacity:-1*e}))}},{key:"restore",value:function(e,n,i){var o=this;this.isDragStart||(this.shouldAnimateToolbar?C.runAll(/* Enter page */
C([this.decomp.enter.content,this.decomp.enter.bottomToolbar,this.decomp.enter.background]).queue({transform:"translate3d(-25%, 0, 0)",opacity:.9},this.optRestore),C(this.decomp.enter.toolbarCenter).queue({transform:"translate3d(-".concat(this.delta.title,"px, 0, 0)"),transition:"opacity ".concat(this.durationRestore,"s linear, transform ").concat(this.durationRestore,"s ").concat(this.timingSwipe),opacity:0}),C(this.decomp.enter.backButtonLabel).queue({transform:"translate3d(-".concat(this.delta.label,"px, 0, 0)")},this.optRestore),C(this.decomp.enter.other).queue({opacity:0},this.optRestore),/* Leave page */
C([this.decomp.leave.content,this.decomp.leave.bottomToolbar,this.decomp.leave.background,this.swipeShadow]).queue({transform:"translate3d(0, 0, 0)"},this.optRestore),C(this.decomp.leave.toolbar).queue({opacity:1},this.optRestore),C(this.decomp.leave.toolbarCenter).queue({transform:"translate3d(0, 0, 0)"},this.optRestore),C(this.decomp.leave.backButtonLabel).queue({opacity:1,transform:"translate3d(0, 0, 0)",transition:"opacity ".concat(this.durationRestore,"s linear, transform ").concat(this.durationRestore,"s ").concat(this.timingSwipe)}),/* Other */
C(this.swipeShadow).queue({opacity:0},this.optRestore).queue(function(t){o._reset(o.target.enter,o.target.leave),e.style.display="none",i&&i(),t()})):C.runAll(C(e).queue({transform:"translate3D(-25%, 0, 0)",opacity:.9},this.optRestore),C(n).queue({transform:"translate3D(0, 0, 0)"},this.optRestore).queue(function(t){o._reset(e,n),e.style.display="none",i&&i(),t()})))}},{key:"popSwipe",value:function(e,n,i){var o=this;this.isDragStart||(this.shouldAnimateToolbar?C.runAll(/* Enter page */
C([this.decomp.enter.content,this.decomp.enter.bottomToolbar,this.decomp.enter.background]).queue({transform:"translate3d(0, 0, 0)",opacity:1},this.optSwipe),C(this.decomp.enter.toolbarCenter).queue({transform:"translate3d(0, 0, 0)",transition:"opacity ".concat(this.durationSwipe,"s linear, transform ").concat(this.durationSwipe,"s ").concat(this.timingSwipe),opacity:1}),C(this.decomp.enter.backButtonLabel).queue({transform:"translate3d(0, 0, 0)"},this.optSwipe),C(this.decomp.enter.other).queue({opacity:1},this.optSwipe),/* Leave page */
C([this.decomp.leave.content,this.decomp.leave.bottomToolbar,this.decomp.leave.background]).queue({transform:"translate3d(100%, 0, 0)"},this.optSwipe),C(this.decomp.leave.toolbar).queue({opacity:0},this.optSwipe),C(this.decomp.leave.toolbarCenter).queue({transform:"translate3d(125%, 0, 0)"},this.optSwipe),C(this.decomp.leave.backButtonLabel).queue({opacity:0,transform:"translate3d(".concat(this.delta.title,"px, 0, 0)"),transition:"opacity ".concat(this.durationSwipe,"s linear, transform ").concat(this.durationSwipe,"s ").concat(this.timingSwipe)}),/* Other */
C(this.swipeShadow).queue({opacity:0,transform:"translate3d(".concat(this.maxWidth,"px, 0, 0)")},this.optSwipe).queue(function(t){o._reset(o.target.enter,o.target.leave),i&&i(),t()})):C.runAll(C(e).queue({transform:"translate3D(0, 0, 0)",opacity:1},this.optSwipe),C(n).queue({transform:"translate3D(100%, 0, 0)"},this.optSwipe).queue(function(t){o._reset(e,n),i&&i(),t()})))}},{key:"_saveStyle",value:function(){for(var n=this,i=(this._savedStyle=new WeakMap,function(t){return n._savedStyle.set(t,t.getAttribute("style"))}),t=arguments.length,e=new Array(t),o=0;o<t;o++)e[o]=arguments[o];e.forEach(i),Object.keys(this.decomp).forEach(function(e){Object.keys(n.decomp[e]).forEach(function(t){(n.decomp[e][t]instanceof Array?n.decomp[e][t]:[n.decomp[e][t]]).forEach(i)})})}},{key:"_restoreStyle",value:function(){for(var n=this,i=function(t){null===n._savedStyle.get(t)?t.removeAttribute("style"):t.setAttribute("style",n._savedStyle.get(t)),n._savedStyle.delete(t)},t=arguments.length,e=new Array(t),o=0;o<t;o++)e[o]=arguments[o];e.forEach(i),Object.keys(this.decomp).forEach(function(e){Object.keys(n.decomp[e]).forEach(function(t){(n.decomp[e][t]instanceof Array?n.decomp[e][t]:[n.decomp[e][t]]).forEach(i)})})}},{key:"_reset",value:function(){this.isSwiping=!1,this._savedStyle&&this._restoreStyle.apply(this,arguments),this.unblock&&this.unblock(),this.swipeShadow.remove(),this.backgroundMask.remove(),this.overflowElement.classList.remove("overflow-visible"),this.decomp.leave.content.classList.remove("content-swiping"),this.decomp=this.target=this.overflowElement=this._savedStyle=null,this.isDragStart=!0}}],[{key:"swipeable",get:function(){return!0}}]),a}(),Yn=["timing","delay","duration"],$n=function(){d(u,Un);var o=f(u);function u(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"cubic-bezier(0.3, .4, 0, .9)":e,n=t.delay,n=void 0===n?0:n,i=t.duration,i=void 0===i?.4:i,t=z(t,Yn);return l(this,u),(e=o.call(this,s({timing:e,delay:n,duration:i},t))).backgroundMask=b.createElement('<div style="position: absolute; width: 100%; height: 100%;background-color: black; z-index: 2"></div>'),e}return c(u,[{key:"_decompose",value:function(t){function e(t){for(var e=[],n=0;n<t.length;n++)"ons-back-button"!==t[n].nodeName.toLowerCase()&&e.push(t[n]);return e}var n=t._getToolbarElement(),i=n._getToolbarLeftItemsElement(),o=n._getToolbarRightItemsElement(),i=[].concat(0===i.children.length?i:e(i.children)).concat(0===o.children.length?o:e(o.children));return{toolbarCenter:n._getToolbarCenterItemsElement(),backButtonIcon:n._getToolbarBackButtonIconElement(),backButtonLabel:n._getToolbarBackButtonLabelElement(),other:i,content:t._getContentElement(),background:t._getBackgroundElement(),toolbar:n,bottomToolbar:t._getBottomToolbarElement()}}},{key:"_shouldAnimateToolbar",value:function(t,e){var n=t._canAnimateToolbar()&&e._canAnimateToolbar(),t=t._getToolbarElement(),e=e._getToolbarElement(),i=t.hasAttribute("static")||e.hasAttribute("static"),o=b.hasModifier(t,"material")||b.hasModifier(e,"material"),t=b.hasModifier(t,"transparent")||b.hasModifier(e,"transparent");return n&&!i&&!o&&!t}},{key:"_calculateDelta",value:function(t,e){var n,i,t=t.getBoundingClientRect();return{title:e.backButtonLabel.classList.contains("back-button__label")?(i=e.backButtonLabel.getBoundingClientRect(),Math.round(t.width/2-i.width/2-i.left)):Math.round(t.width/2*.6),label:n=e.backButtonIcon.classList.contains("back-button__icon")?e.backButtonIcon.getBoundingClientRect().right-2:n}}
/**
       * @param {Object} enterPage
       * @param {Object} leavePage
       * @param {Function} callback
       */},{key:"push",value:function(a,r,s){var l=this,c=(this.backgroundMask.remove(),r.parentNode.insertBefore(this.backgroundMask,r),p(h(u.prototype),"block",this).call(this,a));M(a,function(){var t=b.findToolbarPage(a)||a,e=b.findToolbarPage(r)||r,n=l._decompose(t),i=l._decompose(e),o=l._calculateDelta(r,n);l._shouldAnimateToolbar(t,e)?C.runAll(C([n.content,n.bottomToolbar,n.background],l.def).default({transform:I("100%")},{transform:I()}),C(n.toolbar,l.def).default({opacity:0},{opacity:1}),C(n.toolbarCenter,l.def).default({transform:I("125%"),opacity:1},{transform:I(),opacity:1}),C(n.backButtonLabel,l.def).default({transform:I("".concat(o.title,"px")),opacity:0},{transform:I(),opacity:1,transition:"opacity ".concat(l.duration,"s linear, transform ").concat(l.duration,"s ").concat(l.timing)}),C(n.other,l.def).default({opacity:0},{css:{opacity:1},timing:"linear"}),C([i.content,i.bottomToolbar,i.background],l.def).default({transform:I(),opacity:1},{transform:I("-25%"),opacity:.9}).queue(function(t){l.backgroundMask.remove(),c(),s(),t()}),C(i.toolbarCenter,l.def).default({transform:I(),opacity:1},{transform:I("-".concat(o.title,"px")),opacity:0,transition:"opacity ".concat(l.duration,"s linear, transform ").concat(l.duration,"s ").concat(l.timing)}),C(i.backButtonLabel,l.def).default({transform:I(),opacity:1},{transform:I("-".concat(o.label,"px")),opacity:0}),C(i.other,l.def).default({opacity:1},{css:{opacity:0},timing:"linear"})):C.runAll(C(a,l.def).default({transform:I("100%")},{transform:I()}),C(r,l.def).default({transform:I(),opacity:1},{transform:I("-25%"),opacity:.9}).queue(function(t){l.backgroundMask.remove(),c(),s(),t()}))})}
/**
       * @param {Object} enterPage
       * @param {Object} leavePage
       * @param {Function} callback
       */},{key:"pop",value:function(t,e,n){var i=this;if(this.isSwiping)return this.popSwipe(t,e,n);this.backgroundMask.remove(),t.parentNode.insertBefore(this.backgroundMask,t);var o=p(h(u.prototype),"block",this).call(this,t),a=b.findToolbarPage(t)||t,r=b.findToolbarPage(e)||e,s=this._decompose(a),l=this._decompose(r),c=this._calculateDelta(e,l);this._shouldAnimateToolbar(a,r)?C.runAll(C([s.content,s.bottomToolbar,s.background],this.def).default({transform:I("-25%"),opacity:.9},{transform:I(),opacity:1}),C(s.toolbarCenter,this.def).default({transform:I("-".concat(c.title,"px")),opacity:0},{transform:I(),opacity:1,transition:"opacity ".concat(this.duration,"s linear, transform ").concat(this.duration,"s ").concat(this.timing)}),C(s.backButtonLabel,this.def).default({transform:I("-".concat(c.label,"px"))},{transform:I()}),C(s.other,this.def).default({opacity:0},{css:{opacity:1},timing:"linear"}),C([l.content,l.bottomToolbar,l.background],this.def).default({transform:I()},{transform:I("100%")}).wait(0).queue(function(t){i.backgroundMask.remove(),o(),n(),t()}),C(l.toolbar,this.def).default({opacity:1},{opacity:0}),C(l.toolbarCenter,this.def).default({transform:I()},{transform:I("125%")}),C(l.backButtonLabel,this.def).default({transform:I(),opacity:1},{transform:I("".concat(c.title,"px")),opacity:0,transition:"opacity ".concat(this.duration,"s linear, transform ").concat(this.duration,"s ").concat(this.timing)})):C.runAll(C(t,this.def).default({transform:I("-25%"),opacity:.9},{transform:I(),opacity:1}),C(e,this.def).default({transform:I()},{transform:I("100%")}).queue(function(t){i.backgroundMask.remove(),o(),n(),t()}))}}]),u}(),Gn=function(){d(a,Wn);var i=f(a);function a(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"cubic-bezier(.1, .7, .1, 1)":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.4:t;return l(this,a),(e=i.call(this,{timing:e,delay:n,duration:t})).backgroundMask=b.createElement('<div style="position: absolute; width: 100%; height: 100%;background: linear-gradient(black, white);"></div>'),e}
/**
     * @param {Object} enterPage
     * @param {Object} leavePage
     * @param {Function} callback
     */return c(a,[{key:"push",value:function(t,e,n){var i=this,o=(this.backgroundMask.remove(),e.parentNode.insertBefore(this.backgroundMask,e),p(h(a.prototype),"block",this).call(this,t));C.runAll(C(t,this.def).default({transform:"translate3D(0, 100%, 0)"},{transform:"translate3D(0, 0, 0)"}),C(e,this.def).default({transform:"translate3D(0, 0, 0)",opacity:1},{transform:"translate3D(0, -10%, 0)",opacity:.9}).queue(function(t){i.backgroundMask.remove(),o(),n(),t()}))}
/**
       * @param {Object} enterPage
       * @param {Object} leavePage
       * @param {Function} callback
       */},{key:"pop",value:function(t,e,n){var i=this,o=(this.backgroundMask.remove(),t.parentNode.insertBefore(this.backgroundMask,t),p(h(a.prototype),"block",this).call(this,t));C.runAll(C(t,this.def).default({transform:"translate3D(0, -43px, 0)",opacity:.9},{transform:"translate3D(0, 0, 0)",opacity:1}).queue(function(t){i.backgroundMask.remove(),o(),n(),t()}),C(e,this.def).default({transform:"translate3D(0, 0, 0)"},{transform:"translate3D(0, 100%, 0)"}))}}]),a}(),Kn="translate3d(0, 0, 0)",Jn=function(){d(o,Wn);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"linear":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.4:t;return l(this,o),i.call(this,{timing:e,delay:n,duration:t})}
/**
     * @param {Object} enterPage
     * @param {Object} leavePage
     * @param {Function} callback
     */return c(o,[{key:"push",value:function(t,e,n){var i=p(h(o.prototype),"block",this).call(this,t);C.runAll(C(t,this.def).default({transform:Kn,opacity:0},{transform:Kn,opacity:1}).queue(function(t){i(),n(),t()}))}
/**
       * @param {Object} enterPage
       * @param {Object} leavePage
       * @param {Function} done
       */},{key:"pop",value:function(t,e,n){var i=p(h(o.prototype),"block",this).call(this,t);C.runAll(C(e,this.def).default({transform:Kn,opacity:1},{transform:Kn,opacity:0}).queue(function(t){i(),n(),t()}))}}]),o}(),Qn=function(){d(a,Wn);var i=f(a);function a(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"cubic-bezier(.1, .7, .4, 1)":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.3:t;return l(this,a),(e=i.call(this,{timing:e,delay:n,duration:t})).blackMaskOpacity=.4,e.backgroundMask=b.createElement('<div style="position: absolute; width: 100%; height: 100%; z-index: 2;background-color: black; opacity: 0;"></div>'),e}
/**
     * @param {Object} enterPage
     * @param {Object} leavePage
     * @param {Function} callback
     */return c(a,[{key:"push",value:function(t,e,n){var i=this,o=(this.backgroundMask.remove(),e.parentElement.insertBefore(this.backgroundMask,e.nextSibling),p(h(a.prototype),"block",this).call(this,t));C.runAll(C(this.backgroundMask,this.def).default({transform:"translate3d(0, 0, 0)",opacity:0},{opacity:this.blackMaskOpacity}).queue(function(t){i.backgroundMask.remove(),t()}),C(t,this.def).default({transform:"translate3d(100%, 0, 0)"},{transform:"translate3d(0, 0, 0)"}),C(e,this.def).default({transform:"translate3d(0, 0, 0)"},{transform:"translate3d(-45%, 0, 0)"}).queue(function(t){o(),n(),t()}))}
/**
       * @param {Object} enterPage
       * @param {Object} leavePage
       * @param {Function} callback
       */},{key:"pop",value:function(t,e,n){var i=this,o=(this.backgroundMask.remove(),t.parentNode.insertBefore(this.backgroundMask,t.nextSibling),p(h(a.prototype),"block",this).call(this,t));C.runAll(C(this.backgroundMask,this.def).default({transform:"translate3d(0, 0, 0)",opacity:this.blackMaskOpacity},{opacity:0}).queue(function(t){i.backgroundMask.remove(),t()}),C(t,this.def).default({transform:"translate3d(-45%, 0, 0)",opacity:.9},{transform:"translate3d(0, 0, 0)",opacity:1}),C(e,this.def).default({transform:"translate3d(0, 0, 0)"},{transform:"translate3d(100%, 0, 0)"}).queue(function(t){o(),n(),t()}))}}]),a}(),Zn=function(){d(r,Wn);var i=f(r);function r(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"cubic-bezier(.1, .7, .1, 1)":e,n=t.delay,n=void 0===n?.05:n,t=t.duration,t=void 0===t?.4:t;return l(this,r),(e=i.call(this,{timing:e,delay:n,duration:t})).backgroundMask=b.createElement('<div style="position: absolute; width: 100%; height: 100%;background-color: black;"></div>'),e}
/**
     * @param {Object} enterPage
     * @param {Object} leavePage
     * @param {Function} callback
     */return c(r,[{key:"push",value:function(t,e,n){var i=this,o=(this.backgroundMask.remove(),e.parentNode.insertBefore(this.backgroundMask,e),p(h(r.prototype),"block",this).call(this,t)),a=C(this.backgroundMask).wait(this.delay+this.duration).queue(function(t){i.backgroundMask.remove(),t()});C.runAll(a,C(t,this.def).default({transform:"translate3d(0, 100%, 0)"},{transform:"translate3d(0, 0, 0)"}),C(e,this.def).default({opacity:1},{opacity:.4}).queue(function(t){o(),n(),t()}))}
/**
       * @param {Object} enterPage
       * @param {Object} leavePage
       * @param {Function} callback
       */},{key:"pop",value:function(t,e,n){var i=this,o=(this.backgroundMask.remove(),t.parentNode.insertBefore(this.backgroundMask,t),p(h(r.prototype),"block",this).call(this,t));C.runAll(C(this.backgroundMask).wait(this.delay+this.duration).queue(function(t){i.backgroundMask.remove(),t()}),C(t,this.def).default({opacity:.4},{opacity:1}).queue(function(t){o(),n(),t()}),C(e,this.def).default({transform:"translate3d(0, 0, 0)"},{transform:"translate3d(0, 100%, 0)"}))}}]),r}(),ti=function(){d(a,Wn);var o=f(a);function a(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"cubic-bezier(0.4, 0, 0.2, 1)":e,n=t.timingPop,n=void 0===n?"cubic-bezier(0.4, 0, 1, 1)":n,i=t.delay,i=void 0===i?0:i,t=t.duration,t=void 0===t?.2:t;return l(this,a),(e=o.call(this,{timing:e,delay:i,duration:t})).timingPop=n,e}
/**
     * @param {Object} enterPage
     * @param {Object} leavePage
     * @param {Function} callback
     */return c(a,[{key:"push",value:function(t,e,n){var i=p(h(a.prototype),"block",this).call(this,t);C.runAll(C(t,this.def).default({transform:"translate3D(0, 42px, 0)",opacity:0},{transform:"translate3D(0, 0, 0)",opacity:1}).queue(function(t){i(),n(),t()}))}
/**
       * @param {Object} enterPage
       * @param {Object} leavePage
       * @param {Function} done
       */},{key:"pop",value:function(t,e,n){var i=p(h(a.prototype),"block",this).call(this,t);C.runAll(C(e,this.def).default({transform:"translate3D(0, 0, 0)",opacity:1},{css:{transform:"translate3D(0, 38px, 0)",opacity:0},timing:this.timingPop}).queue(function(t){i(),n(),t()}))}}]),a}(),ei={default:function(){return r.isAndroid()?ti:$n},slide:function(){return r.isAndroid()?Qn:$n},lift:function(){return r.isAndroid()?Zn:Gn},fade:function(){return r.isAndroid()?ti:Jn},"slide-ios":$n,"slide-md":Qn,"lift-ios":Gn,"lift-md":Zn,"fade-ios":Jn,"fade-md":ti,none:function(){d(n,Wn);var e=f(n);function n(t){return l(this,n),e.call(this,t)}return c(n,[{key:"push",value:function(t,e,n){n()}},{key:"pop",value:function(t,e,n){n()}}]),n}()},ni={
/**
     * @param {Element} navigatorSideElement
     * @param {Function} callback
     */
ready:function(t,e){e()}},t=function(){d(n,D);var e=f(n);function n(){var t;return l(this,n),(t=e.call(this))._isRunning=!1,t._initialized=!1,t._pageLoader=Re,t._pageMap=new WeakMap,t._updateAnimatorFactory(),t}
/**
     * @property pageLoader
     * @type {PageLoader}
     * @description
     *   [en]PageLoader instance. It can be overriden to change the way pages are loaded by this element. Useful for lib developers.[/en]
     *   [ja]PageLoaderインスタンスを格納しています。[/ja]
     */return c(n,[{key:"animatorFactory",get:
/**
       * @attribute page
       * @initonly
       * @type {String}
       * @description
       *   [en]First page to show when navigator is initialized.[/en]
       *   [ja]ナビゲーターが初期化された時に表示するページを指定します。[/ja]
       */
/**
       * @attribute swipeable
       * @type {Boolean}
       * @description
       *   [en]Enable iOS "swipe to pop" feature.[/en]
       *   [ja][/ja]
       */
/**
       * @attribute swipe-target-width
       * @type {String}
       * @default 20px
       * @description
       *   [en]The width of swipeable area calculated from the edge (in pixels). Use this to enable swipe only when the finger touch on the screen edge.[/en]
       *   [ja]スワイプの判定領域をピクセル単位で指定します。画面の端から指定した距離に達するとページが表示されます。[/ja]
       */
/**
       * @attribute swipe-threshold
       * @type {Number}
       * @default 0.2
       * @description
       *  [en]Specify how much the page needs to be swiped before popping. A value between `0` and `1`.[/en]
       *  [ja][/ja]
       */
/**
       * @attribute animation
       * @type {String}
       * @default default
       * @description
       *   [en]
       *     Animation name. Available animations are `"slide"`, `"lift"`, `"fade"` and `"none"`.
       *
       *     These are platform based animations. For fixed animations, add `"-ios"` or `"-md"` suffix to the animation name. E.g. `"lift-ios"`, `"lift-md"`. Defaults values are `"slide-ios"` and `"fade-md"` depending on the platform.
       *   [/en]
       *   [ja][/ja]
       */
/**
       * @attribute animation-options
       * @type {Expression}
       * @description
       *  [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`[/en]
       *  [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。e.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`[/ja]
       */
/**
       * @property animationOptions
       * @type {Object}
       * @description
       *  [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`[/en]
       *  [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。e.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`[/ja]
       */
/**
       * @event prepush
       * @description
       *   [en]Fired just before a page is pushed.[/en]
       *   [ja]pageがpushされる直前に発火されます。[/ja]
       * @param {Object} event [en]Event object.[/en]
       * @param {Object} event.navigator
       *   [en]Component object.[/en]
       *   [ja]コンポーネントのオブジェクト。[/ja]
       * @param {Object} event.currentPage
       *   [en]Current page object.[/en]
       *   [ja]現在のpageオブジェクト。[/ja]
       * @param {Function} event.cancel
       *   [en]Call this function to cancel the push.[/en]
       *   [ja]この関数を呼び出すと、push処理がキャンセルされます。[/ja]
       */
/**
       * @event prepop
       * @description
       *   [en]Fired just before a page is popped.[/en]
       *   [ja]pageがpopされる直前に発火されます。[/ja]
       * @param {Object} event [en]Event object.[/en]
       * @param {Object} event.navigator
       *   [en]Component object.[/en]
       *   [ja]コンポーネントのオブジェクト。[/ja]
       * @param {Object} event.currentPage
       *   [en]Current page object.[/en]
       *   [ja]現在のpageオブジェクト。[/ja]
       * @param {Function} event.cancel
       *   [en]Call this function to cancel the pop.[/en]
       *   [ja]この関数を呼び出すと、pageのpopがキャンセルされます。[/ja]
       */
/**
       * @event postpush
       * @description
       *   [en]Fired just after a page is pushed.[/en]
       *   [ja]pageがpushされてアニメーションが終了してから発火されます。[/ja]
       * @param {Object} event [en]Event object.[/en]
       * @param {Object} event.navigator
       *   [en]Component object.[/en]
       *   [ja]コンポーネントのオブジェクト。[/ja]
       * @param {Object} event.enterPage
       *   [en]Object of the next page.[/en]
       *   [ja]pushされたpageオブジェクト。[/ja]
       * @param {Object} event.leavePage
       *   [en]Object of the previous page.[/en]
       *   [ja]以前のpageオブジェクト。[/ja]
       */
/**
       * @event postpop
       * @description
       *   [en]Fired just after a page is popped.[/en]
       *   [ja]pageがpopされてアニメーションが終わった後に発火されます。[/ja]
       * @param {Object} event [en]Event object.[/en]
       * @param {Object} event.navigator
       *   [en]Component object.[/en]
       *   [ja]コンポーネントのオブジェクト。[/ja]
       * @param {Object} event.enterPage
       *   [en]Object of the next page.[/en]
       *   [ja]popされて表示されるページのオブジェクト。[/ja]
       * @param {Object} event.leavePage
       *   [en]Object of the previous page.[/en]
       *   [ja]popされて消えるページのオブジェクト。[/ja]
       * @param {Object} event.swipeToPop
       *   [en]True if the pop was triggered by the user swiping to pop.[/en]
       *   [ja][/ja]
       * @param {Object} event.onsBackButton
       *   [en]True if the pop was caused by pressing an ons-back-button.[/en]
       *   [ja][/ja]
       */
/**
       * @event swipe
       * @description
       *   [en]Fired whenever the user slides the navigator (swipe-to-pop).[/en]
       *   [ja][/ja]
       * @param {Object} event [en]Event object.[/en]
       * @param {Object} event.ratio
       *   [en]Decimal ratio (0-1).[/en]
       *   [ja][/ja]
       * @param {Object} event.animationOptions
       *   [en][/en]
       *   [ja][/ja]
       */
function(){return this._animatorFactory}},{key:"pageLoader",get:function(){return this._pageLoader},set:function(t){t instanceof Be||b.throwPageLoader(),this._pageLoader=t}},{key:"_getPageTarget",value:function(){return this._page||this.getAttribute("page")}
/**
       * @property page
       * @type {*}
       * @description
       *   [en]Specify the page to be loaded during initialization. This value takes precedence over the `page` attribute. Useful for lib developers.[/en]
       *   [ja]初期化時に読み込むページを指定します。`page`属性で指定した値よりも`page`プロパティに指定した値を優先します。[/ja]
       */},{key:"page",get:function(){return this._page},set:function(t){this._page=t}},{key:"connectedCallback",value:function(){var i,o,a=this;this.onDeviceBackButton=this._onDeviceBackButton.bind(this),r.isAndroid()&&"force"!==this.getAttribute("swipeable")||(this._swipe=new Vn({element:this,getThreshold:function(){return Math.max(.2,parseFloat(a.getAttribute("swipe-threshold"))||0)},swipeMax:function(){var t={duration:i.durationSwipe,timing:i.timingSwipe};a._onSwipe&&a._onSwipe(1,t),b.triggerElementEvent(a,"swipe",{ratio:1,animationOptions:t}),a[a.swipeMax?"swipeMax":"popPage"]({animator:i,swipeToPop:!0}),i=null},swipeMid:function(t,e){var n=t/e;a._onSwipe&&a._onSwipe(n),b.triggerElementEvent(a,"swipe",{ratio:n}),i.translate(t,e,a.topPage.previousElementSibling,a.topPage)},swipeMin:function(){var t={duration:i.durationRestore,timing:i.timingSwipe};a._onSwipe&&a._onSwipe(0,t),b.triggerElementEvent(a,"swipe",{ratio:0,animationOptions:t}),i.restore(a.topPage.previousElementSibling,a.topPage),i=null},ignoreSwipe:function(t,e){
// Basic conditions
if(!a._isRunning&&1<a.children.length){
// Area or directional issues
var n=parseInt(a.getAttribute("swipe-target-width")||25,10);if("right"===t.gesture.direction&&e<n){
// Swipes on ons-back-button and its children
e=function(t){return/ons-back-button/i.test(t.tagName)};if(!e(t.target)&&!b.findParent(t.target,e,function(t){return/ons-page/i.test(t.tagName)})){
// Animator is swipeable
n=(a.topPage.pushedOptions||{}).animation||a.animatorFactory._animation,t=ei[n]instanceof Function?ei[n].call():ei[n];if(void 0!==t&&t.swipeable)// Prepare for the swipe
return i=new t,!1}}}return!0;// Ignore swipe
}}),this.attributeChangedCallback("swipeable")),this._initialized||(this._initialized=!0,o=b.defer(),this.loaded=o.promise,ni.ready(this,function(){var t=!b.hasAnyComponentAsParent(a),e={animation:"none",show:t};if(0===a.pages.length&&a._getPageTarget())a.pushPage(a._getPageTarget(),e).then(function(){return o.resolve()});else if(0<a.pages.length){for(var n=0;n<a.pages.length;n++)Fe(a.pages[n]);a.topPage&&M(a.topPage,function(){return setTimeout(function(){o.resolve(),t&&a.topPage._show(),a._updateLastPageBackButton()},0)})}else M(a,function(){0===a.pages.length&&a._getPageTarget()?a.pushPage(a._getPageTarget(),e).then(function(){return o.resolve()}):o.resolve()})}))}},{key:"_updateAnimatorFactory",value:function(){this._animatorFactory=new w({animators:ei,baseClass:Wn,baseClassName:"NavigatorAnimator",defaultAnimation:this.getAttribute("animation")})}},{key:"disconnectedCallback",value:function(){this._backButtonHandler.destroy(),this._backButtonHandler=null,this._swipe&&this._swipe.dispose(),this._swipe=null}},{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"animation":this._updateAnimatorFactory();break;case"swipeable":this._swipe&&this._swipe.update()}}
/**
       * @method popPage
       * @signature popPage([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]
       *     Animation name. Available animations are `"slide"`, `"lift"`, `"fade"` and `"none"`.
       *
       *     These are platform based animations. For fixed animations, add `"-ios"` or `"-md"` suffix to the animation name. E.g. `"lift-ios"`, `"lift-md"`. Defaults values are `"slide-ios"` and `"fade-md"`.
       *   [/en]
       *   [ja][/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. {duration: 0.2, delay: 0.4, timing: 'ease-in'}[/ja]
       * @param {Function} [options.callback]
       *   [en]Function that is called when the transition has ended.[/en]
       *   [ja]このメソッドによる画面遷移が終了した際に呼び出される関数オブジェクトを指定します。[/ja]
       * @param {Object} [options.data]
       *   [en]Custom data that will be stored in the new page element.[/en]
       *   [ja][/ja]
       * @param {Number} [options.times]
       *   [en]Number of pages to be popped. Only one animation will be shown.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en]Promise which resolves to the revealed page.[/en]
       *   [ja]明らかにしたページを解決するPromiseを返します。[/ja]
       * @description
       *   [en]Pops the current page from the page stack. The previous page will be displayed.[/en]
       *   [ja]現在表示中のページをページスタックから取り除きます。一つ前のページに戻ります。[/ja]
       */},{key:"popPage",value:function(){var e=this,t=this._preparePageAndOptions(null,0<arguments.length&&void 0!==arguments[0]?arguments[0]:{}).options;b.isInteger(t.times)&&1<t.times&&this._removePages(t.times);return this._popPage(t,function(){return new Promise(function(t){e._pageLoader.unload(e.pages[e.pages.length-1]),t()})})}},{key:"_popPage",value:function(i){var o,a=this,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:function(){return Promise.resolve()};return this._isRunning?Promise.reject("popPage is already running."):this.pages.length<=1?Promise.reject("ons-navigator's page stack is empty."):this._emitPrePopEvent()?Promise.reject("Canceled in prepop event."):(o=this.pages.length,this._isRunning=!0,this.pages[o-2].updateBackButton(0<o-2),new Promise(function(t){var e=a.pages[o-1],n=a.pages[o-2];(i=b.extend({},a.options||{},i)).data&&(n.data=b.extend({},n.data||{},i.data||{}));e._hide(),n.style.display="",(i.animator||a._animatorFactory.newAnimator(i)).pop(a.pages[o-2],a.pages[o-1],function(){r().then(function(){a._isRunning=!1,n._show(),b.triggerElementEvent(a,"postpop",{leavePage:e,enterPage:n,navigator:a,swipeToPop:!!i.swipeToPop,
// whether the pop was triggered by the user swiping
onsBackButton:!!i.onsBackButton}),i.callback&&i.callback(n),t(n)})})}).catch(function(){return a._isRunning=!1}))}
/**
       * @method pushPage
       * @signature pushPage(page, [options])
       * @param {String} page
       *   [en]Page URL. Can be either a HTML document or a template defined with the `<template>` tag.[/en]
       *   [ja]pageのURLか、もしくは`<template>`で宣言したテンプレートのid属性の値を指定できます。[/ja]
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.page]
       *   [en]Page URL. Only necessary if `page` parameter is null or undefined.[/en]
       *   [ja][/ja]
       * @param {String} [options.pageHTML]
       *   [en]HTML code that will be computed as a new page. Overwrites `page` parameter.[/en]
       *   [ja][/ja]
       * @param {String} [options.animation]
       *   [en]
       *     Animation name. Available animations are `"slide"`, `"lift"`, `"fade"` and `"none"`.
       *
       *     These are platform based animations. For fixed animations, add `"-ios"` or `"-md"` suffix to the animation name. E.g. `"lift-ios"`, `"lift-md"`. Defaults values are `"slide-ios"` and `"fade-md"`.
       *   [/en]
       *   [ja][/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}` [/ja]
       * @param {Function} [options.callback]
       *   [en]Function that is called when the transition has ended.[/en]
       *   [ja]pushPage()による画面遷移が終了した時に呼び出される関数オブジェクトを指定します。[/ja]
       * @param {Object} [options.data]
       *   [en]Custom data that will be stored in the new page element.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en]Promise which resolves to the pushed page.[/en]
       *   [ja]追加したページを解決するPromiseを返します。[/ja]
       * @description
       *   [en]Pushes the specified page into the stack.[/en]
       *   [ja]指定したpageを新しいページスタックに追加します。新しいページが表示されます。[/ja]
       */},{key:"pushPage",value:function(i){function o(t){Fe(t),a._pageMap.set(t,i),(t=b.extend(t,{data:r.data})).style.visibility="hidden"}var a=this,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},t=this._preparePageAndOptions(i,r);i=t.page,r=t.options;return r.pageHTML?this._pushPage(r,function(){return new Promise(function(e){He.load({page:r.pageHTML,parent:a,params:r.data},function(t){o(t),e()})})}):this._pushPage(r,function(){return new Promise(function(e,n){a._pageLoader.load({page:i,parent:a,params:r.data},function(t){o(t),e()},function(t){a._isRunning=!1,n(t)})})})}},{key:"_pushPage",value:function(){var o=this,a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:function(){return Promise.resolve()};if(this._isRunning)return Promise.reject("pushPage is already running.");if(this._emitPrePushEvent())return Promise.reject("Canceled in prepush event.");this._isRunning=!0;var e=this.animationOptions,a=b.extend({},this.options||{},{animationOptions:e},a),r=this._animatorFactory.newAnimator(a);return t().then(function(){var t=o.pages.length,n=o.pages[t-1],i=a.leavePage||o.pages[t-2];return Fe(n),n.updateBackButton(t>(a._replacePage?2:1)),n.pushedOptions=b.extend({},n.pushedOptions||{},a||{}),n.data=b.extend({},n.data||{},a.data||{}),n.unload=n.unload||a.unload,new Promise(function(t){function e(){(o._isRunning=!1)!==a.show&&setImmediate(function(){return n._show()}),b.triggerElementEvent(o,"postpush",{leavePage:i,enterPage:n,navigator:o}),i&&(i.style.display="none"),a.callback&&a.callback(n),t(n)}n.style.visibility="",i?(i._hide(),r.push(n,i,e)):e()})}).catch(function(t){throw o._isRunning=!1,t})}
/**
       * @method replacePage
       * @signature replacePage(page, [options])
       * @return {Promise}
       *   [en]Promise which resolves to the new page.[/en]
       *   [ja]新しいページを解決するPromiseを返します。[/ja]
       * @description
       *   [en]Replaces the current top page with the specified one. Extends `pushPage()` parameters.[/en]
       *   [ja]現在表示中のページをを指定したページに置き換えます。[/ja]
       */},{key:"replacePage",value:function(t){var e=this;return this.pushPage(t,1<arguments.length&&void 0!==arguments[1]?arguments[1]:{}).then(function(t){return 1<e.pages.length&&e._pageLoader.unload(e.pages[e.pages.length-2]),e._updateLastPageBackButton(),Promise.resolve(t)})}
/**
       * @method insertPage
       * @signature insertPage(index, page, [options])
       * @param {Number} index
       *   [en]The index where it should be inserted.[/en]
       *   [ja]スタックに挿入する位置のインデックスを指定します。[/ja]
       * @return {Promise}
       *   [en]Promise which resolves to the inserted page.[/en]
       *   [ja]指定したページを解決するPromiseを返します。[/ja]
       * @description
       *   [en]Insert the specified page into the stack with at a position defined by the `index` argument. Extends `pushPage()` parameters.[/en]
       *   [ja]指定したpageをページスタックのindexで指定した位置に追加します。[/ja]
       */},{key:"insertPage",value:function(n,i){var o=this,a=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},t=this._preparePageAndOptions(i,a);if(i=t.page,a=t.options,(n=this._normalizeIndex(n))>=this.pages.length)return this.pushPage(i,a);i="string"==typeof a.pageHTML?a.pageHTML:i;var r="string"==typeof a.pageHTML?He:this._pageLoader;return new Promise(function(e){r.load({page:i,parent:o},function(t){Fe(t),o._pageMap.set(t,i),t=b.extend(t,{data:a.data,pushedOptions:a}),a.animationOptions=b.extend({},o.animationOptions,a.animationOptions||{}),t.style.display="none",o.insertBefore(t,o.pages[n]),o.topPage.updateBackButton(!0),setTimeout(function(){e(t)},1e3/60)})})}
/**
       * @method removePage
       * @signature removePage(index, [options])
       * @param {Number} index
       *   [en]The index where it should be removed.[/en]
       *   [ja]スタックから削除するページのインデックスを指定します。[/ja]
       * @return {Promise}
       *   [en]Promise which resolves to the revealed page.[/en]
       *   [ja]削除によって表示されたページを解決するPromiseを返します。[/ja]
       * @description
       *   [en]Remove the specified page at a position in the stack defined by the `index` argument. Extends `popPage()` parameters.[/en]
       *   [ja]指定したインデックスにあるページを削除します。[/ja]
       */},{key:"removePage",value:function(i){var o=this,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return(i=this._normalizeIndex(i))<this.pages.length-1?new Promise(function(t){var e=o.pages[i],n=o.topPage;o._pageMap.delete(e),o._pageLoader.unload(e),1===o.pages.length&&
// edge case
o.topPage.updateBackButton(!1),t(n)}):this.popPage(t)}
/**
       * @method resetToPage
       * @signature resetToPage(page, [options])
       * @return {Promise}
       *   [en]Promise which resolves to the new top page.[/en]
       *   [ja]新しいトップページを解決するPromiseを返します。[/ja]
       * @param {Boolean} [options.pop]
       *   [en]Performs 'pop' effect if `true` instead of 'push' or none. This also sets `options.animation` value to `default` instead of `none`.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Clears page stack and adds the specified page to the stack. Extends `pushPage()` parameters.[/en]
       *   [ja]ページスタックをリセットし、指定したページを表示します。[/ja]
       */},{key:"resetToPage",value:function(t){var e,n=this,i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},o=this._preparePageAndOptions(t,i);return t=o.page,(i=o.options).animator||i.animation||i.pop||(i.animation="none"),i.page||i.pageHTML||!this._getPageTarget()||(t=i.page=this._getPageTarget()),i.pop?(this._removePages(),this.insertPage(0,t,{data:i.data}).then(function(){return n.popPage(i)})):(e=i.callback,i.callback=function(t){n._removePages(),t.updateBackButton(!1),e&&e(t)},this.pushPage(t,i));
// Tip: callback runs before resolved promise
}
/**
       * @method bringPageTop
       * @signature bringPageTop(item, [options])
       * @param {String|Number} item
       *   [en]Page URL or index of an existing page in navigator's stack.[/en]
       *   [ja]ページのURLかもしくはons-navigatorのページスタックのインデックス値を指定します。[/ja]
       * @return {Promise}
       *   [en]Promise which resolves to the new top page.[/en]
       *   [ja]新しいトップページを解決するPromiseを返します。[/ja]
       * @description
       *   [en]Brings the given page to the top of the page stack if it already exists or pushes it into the stack if doesn't. Extends `pushPage()` parameters.[/en]
       *   [ja]指定したページをページスタックの一番上に移動します。もし指定したページが無かった場合新しくpushされます。[/ja]
       */},{key:"bringPageTop",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=(-1===["number","string"].indexOf(o(t))&&b.throw("First argument must be a page name or the index of an existing page. You supplied "+t),"number"==typeof t?this._normalizeIndex(t):this._lastIndexOfPage(t)),i=this.pages[n];return n<0?this.pushPage(t,e):(e=this._preparePageAndOptions(i,e).options,n===this.pages.length-1?Promise.resolve(i):(i||b.throw("Failed to find item "+t),this._isRunning?Promise.reject("pushPage is already running."):this._emitPrePushEvent()?Promise.reject("Canceled in prepush event."):(i.style.display="",i.style.visibility="hidden",i.parentNode.appendChild(i),this._pushPage(e))))}},{key:"_preparePageAndOptions",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return"object"!=o(e)&&b.throw("options must be an object. You supplied "+e),{page:t=null==t&&e.page?e.page:t,options:b.extend({},this.options||{},e,{page:t})}}},{key:"_removePages",value:function(t){for(var e=this.pages,n=(n=void 0===t?0:e.length-t)<0?1:n,i=e.length-2;n<=i;i--)this._pageMap.delete(e[i]),this._pageLoader.unload(e[i])}},{key:"_updateLastPageBackButton",value:function(){var t=this.pages.length-1;0<=t&&this.pages[t].updateBackButton(0<t)}},{key:"_normalizeIndex",value:function(t){return 0<=t?t:Math.abs(this.pages.length+t)%this.pages.length}},{key:"_onDeviceBackButton",value:function(t){1<this.pages.length?this.popPage():t.callParentHandler()}},{key:"_lastIndexOfPage",value:function(t){for(var e=this.pages.length-1;0<=e&&t!==this._pageMap.get(this.pages[e]);e--);return e}},{key:"_emitPreEvent",value:function(t){var e=!1;return b.triggerElementEvent(this,"pre"+t,b.extend({navigator:this,currentPage:this.pages[this.pages.length-1],cancel:function(){return e=!0}},1<arguments.length&&void 0!==arguments[1]?arguments[1]:{})),e}},{key:"_emitPrePushEvent",value:function(){return this._emitPreEvent("push")}},{key:"_emitPrePopEvent",value:function(){var t=this.pages.length;return this._emitPreEvent("pop",{leavePage:this.pages[t-1],enterPage:this.pages[t-2]})}
// TODO: 書き直す
},{key:"_createPageElement",value:function(t){t=b.createElement(k.normalizePageHTML(t));return Fe(t),t}
/**
       * @property onDeviceBackButton
       * @type {Object}
       * @description
       *   [en]Back-button handler.[/en]
       *   [ja]バックボタンハンドラ。[/ja]
       */},{key:"onDeviceBackButton",get:function(){return this._backButtonHandler},set:function(t){this._backButtonHandler&&this._backButtonHandler.destroy(),this._backButtonHandler=$t.createHandler(this,t)}
/**
       * @property topPage
       * @readonly
       * @type {HTMLElement}
       * @description
       *   [en]Current top page element. Use this method to access options passed by `pushPage()`-like methods.[/en]
       *   [ja]現在のページを取得します。pushPage()やresetToPage()メソッドの引数を取得できます。[/ja]
       */},{key:"topPage",get:function(){for(var t=this.lastElementChild;t&&"ONS-PAGE"!==t.tagName;)t=t.previousElementSibling;return t}
/**
       * @property pages
       * @readonly
       * @type {Array}
       * @description
       *   [en]Copy of the navigator's page stack.[/en]
       *   [ja][/ja]
       */},{key:"pages",get:function(){return b.arrayFrom(this.children).filter(function(t){return"ONS-PAGE"===t.tagName})}
/**
       * @property onSwipe
       * @type {Function}
       * @description
       *   [en]Hook called whenever the user slides the navigator (swipe-to-pop). It gets a decimal ratio (0-1) and an animationOptions object as arguments.[/en]
       *   [ja][/ja]
       */},{key:"onSwipe",get:function(){return this._onSwipe},set:function(t){!t||t instanceof Function||b.throw('"onSwipe" must be a function'),this._onSwipe=t}
/**
       * @property options
       * @type {Object}
       * @description
       *   [en]Default options object. Attributes have priority over this property.[/en]
       *   [ja][/ja]
       */
/**
       * @property options.animation
       * @type {String}
       * @description
       *   [en]
       *     Animation name. Available animations are `"slide"`, `"lift"`, `"fade"` and `"none"`.
       *     These are platform based animations. For fixed animations, add `"-ios"` or `"-md"` suffix to the animation name. E.g. `"lift-ios"`, `"lift-md"`. Defaults values are `"slide-ios"` and `"fade-md"`.
       *   [/en]
       *   [ja][/ja]
       */
/**
       * @property options.animationOptions
       * @type {String}
       * @description
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}` [/ja]
       */
/**
       * @property options.callback
       * @type {String}
       * @description
       *   [en]Function that is called when the transition has ended.[/en]
       *   [ja]このメソッドによる画面遷移が終了した際に呼び出される関数オブジェクトを指定します。[/ja]
       */},{key:"options",get:function(){return this._options},set:function(t){this._options=t}},{key:"animationOptions",get:function(){return this.hasAttribute("animation-options")?w.parseAnimationOptionsString(this.getAttribute("animation-options")):{}},set:function(t){null==t?this.removeAttribute("animation-options"):this.setAttribute("animation-options",JSON.stringify(t))}},{key:"_isRunning",get:function(){return JSON.parse(this.getAttribute("_is-running"))},set:function(t){this.setAttribute("_is-running",t?"true":"false")}},{key:"_show",value:function(){var t=this;this.loaded.then(function(){return t.topPage&&t.topPage._show()})}},{key:"_hide",value:function(){this.topPage&&this.topPage._hide()}},{key:"_destroy",value:function(){for(var t=this.pages.length-1;0<=t;t--)this._pageLoader.unload(this.pages[t]);this.remove()}
/**
       * @param {String} name
       * @param {Function} Animator
       */}],[{key:"observedAttributes",get:function(){return["animation","swipeable"]}},{key:"registerAnimator",value:function(t,e){e.prototype instanceof Wn||b.throwAnimator("Navigator"),ei[t]=e}},{key:"animators",get:function(){return ei}},{key:"NavigatorAnimator",get:function(){return Wn}},{key:"events",get:function(){return["prepush","postpush","prepop","postpop","swipe"]}},{key:"rewritables",get:function(){return ni}}]),n}(),ii=(i.Navigator=t,customElements.define("ons-navigator",t),"toolbar"),oi={"":"toolbar--*",".toolbar__left":"toolbar--*__left",".toolbar__center":"toolbar--*__center",".toolbar__right":"toolbar--*__right"},t=function(){d(n,D);var e=f(n);
/**
     * @attribute inline
     * @initonly
     * @description
     *   [en]Display the toolbar as an inline element.[/en]
     *   [ja]ツールバーをインラインに置きます。スクロール領域内にそのまま表示されます。[/ja]
     */
/**
     * @attribute static
     * @description
     *   [en]Static toolbars are not animated by `ons-navigator` when pushing or popping pages. This can be useful to improve performance in some situations.[/en]
     *   [ja][/ja]
     */
/**
     * @property static
     * @type {Boolean}
     * @description
     *   [en]Static toolbars are not animated by `ons-navigator` when pushing or popping pages. This can be useful to improve performance in some situations.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute modifier
     * @description
     *   [en]The appearance of the toolbar.[/en]
     *   [ja]ツールバーの表現を指定します。[/ja]
     */
/**
     * @property visible
     * @description
     *   [en]Whether the toolbar is shown or not.[/en]
     *   [ja][/ja]
     */function n(){var t;return l(this,n),(t=e.call(this))._visible=!0,M(a(t),function(){t._compile()}),t}return c(n,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"class":b.restoreClass(this,ii,oi);break;case"modifier":v.onModifierChanged(e,n,this,oi)}}
/**
       * @method setVisibility
       * @signature setVisibility(visible)
       * @param {Boolean} visible
       *   [en]Set to true to show the toolbar, false to hide it[/en]
       *   [ja][/ja]
       * @description
       *   [en]Shows the toolbar if visible is true, otherwise hides it.[/en]
       *   [ja][/ja]
       */},{key:"setVisibility",value:function(e){var n=this;M(this,function(){var t;n._visible=e,n.style.display=e?"":"none",n.parentNode&&((t=b.findChild(n.parentNode,".page__background"))&&(t.style.top=e?null:0),t=b.findChild(n.parentNode,".page__content"))&&(t.style.top=e?null:0)})}
/**
       * @method show
       * @signature show()
       * @description
       *   [en]Show the toolbar.[/en]
       *   [ja][/ja]
       */},{key:"show",value:function(){this.setVisibility(!0)}
/**
       * @method hide
       * @signature hide()
       * @description
       *   [en]Hide the toolbar.[/en]
       *   [ja][/ja]
       */},{key:"hide",value:function(){this.setVisibility(!1)}},{key:"visible",get:function(){return this._visible},set:function(t){this.setVisibility(t)}
/**
       * @return {HTMLElement}
       */},{key:"_getToolbarLeftItemsElement",value:function(){return this.querySelector(".left")||k.nullElement}
/**
       * @return {HTMLElement}
       */},{key:"_getToolbarCenterItemsElement",value:function(){return this.querySelector(".center")||k.nullElement}
/**
       * @return {HTMLElement}
       */},{key:"_getToolbarRightItemsElement",value:function(){return this.querySelector(".right")||k.nullElement}
/**
       * @return {HTMLElement}
       */},{key:"_getToolbarBackButtonLabelElement",value:function(){return this.querySelector("ons-back-button .back-button__label")||k.nullElement}
/**
       * @return {HTMLElement}
       */},{key:"_getToolbarBackButtonIconElement",value:function(){return this.querySelector("ons-back-button .back-button__icon")||k.nullElement}},{key:"_compile",value:function(){g.prepare(this),this.classList.add(ii),this._ensureToolbarItemElements(),v.initModifier(this,oi)}},{key:"_ensureToolbarItemElements",value:function(){for(var t=this.childNodes.length-1;0<=t;t--)
// case of not element
1!=this.childNodes[t].nodeType&&this.removeChild(this.childNodes[t]);var e,n,i=this._ensureToolbarElement("center");i.classList.add("toolbar__title"),1===this.children.length&&this.children[0].classList.contains("center")||(e=this._ensureToolbarElement("left"),n=this._ensureToolbarElement("right"),this.children[0]===e&&this.children[1]===i&&this.children[2]===n)||(this.appendChild(e),this.appendChild(i),this.appendChild(n))}},{key:"_ensureToolbarElement",value:function(t){var e;return b.findChild(this,".toolbar__"+t)?(e=b.findChild(this,".toolbar__"+t)).classList.add(t):(e=b.findChild(this,"."+t)||b.create("."+t)).classList.add("toolbar__"+t),e}}],[{key:"observedAttributes",get:function(){return["modifier","class"]}}]),n}(),ai=(b.defineBooleanProperties(t,["static"]),i.Toolbar=t,customElements.define("ons-toolbar",t),{"":"page--*",".page__content":"page--*__content",".page__background":"page--*__background"}),t=function(){d(n,D);var e=f(n);
/**
     * @event init
     * @description
     *   [en]Fired right after the page is attached.[/en]
     *   [ja]ページがアタッチされた後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     */
/**
     * @event show
     * @description
     *   [en]Fired right after the page is shown.[/en]
     *   [ja]ページが表示された後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     */
/**
     * @event hide
     * @description
     *   [en]Fired right after the page is hidden.[/en]
     *   [ja]ページが隠れた後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     */
/**
     * @event destroy
     * @description
     *   [en]Fired right before the page is destroyed.[/en]
     *   [ja]ページが破棄される前に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     */
/**
     * @attribute modifier
     * @type {String}
     * @description
     *   [en]Specify modifier name to specify custom styles.[/en]
     *   [ja]スタイル定義をカスタマイズするための名前を指定します。[/ja]
     */
/**
     * @attribute on-infinite-scroll
     * @type {String}
     * @description
     *   [en]Path of the function to be executed on infinite scrolling. Example: `app.loadData`. The function receives a done callback that must be called when it's finished.[/en]
     *   [ja][/ja]
     */function n(){var t;return l(this,n),(t=e.call(this))._deriveHooks(),t._defaultClassName="page",t.classList.add("page"),t._initialized=!1,M(a(t),function(){t._compile(),t._isShown=!1,t._contentElement=t._getContentElement(),t._backgroundElement=t._getBackgroundElement()}),t}return c(n,[{key:"_compile",value:function(){var e=this,t=(g.prepare(this),b.findChild(this,"ons-toolbar")),n=b.findChild(this,".page__background")||b.findChild(this,".background")||document.createElement("div"),i=(n.classList.add("page__background"),this.insertBefore(n,!t&&this.firstChild||t&&t.nextSibling),b.findChild(this,".page__content")||b.findChild(this,".content")||document.createElement("div"));i.classList.add("page__content"),i.parentElement||b.arrayFrom(this.childNodes).forEach(function(t){1===t.nodeType&&!e._elementShouldBeMoved(t)||i.appendChild(t)}),this._tryToFillStatusBar(i),// Must run before child pages try to fill status bar.
this.insertBefore(i,n.nextSibling),// Can trigger attached connectedCallbacks
t&&b.hasModifier(t,"transparent")||1!==i.children.length||!b.isPageControl(i.children[0])||(this._defaultClassName+=" page--wrapper",this.attributeChangedCallback("class")),b.findChild(this,"ons-bottom-toolbar")&&(this._defaultClassName+=" page-with-bottom-toolbar",this.attributeChangedCallback("class")),v.initModifier(this,ai)}},{key:"_elementShouldBeMoved",value:function(t){var e;return!t.classList.contains("page__background")&&("ons-fab"===(e=t.tagName.toLowerCase())?!t.hasAttribute("position"):t.hasAttribute("inline")||-1===["script","ons-toolbar","ons-bottom-toolbar","ons-modal","ons-speed-dial","ons-dialog","ons-alert-dialog","ons-popover","ons-action-sheet"].indexOf(e))}},{key:"_tryToFillStatusBar",value:function(){var t=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this._contentElement;k.autoStatusBarFill(function(){b.toggleAttribute(t,"status-bar-fill",!b.findParent(t,function(t){return t.hasAttribute("status-bar-fill")})&&(t._canAnimateToolbar(e)||!b.findChild(e,b.isPageControl)))})}},{key:"_canAnimateToolbar",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this._contentElement;return!!b.findChild(this,"ons-toolbar")||!!b.findChild(t,function(t){return b.match(t,"ons-toolbar")&&!t.hasAttribute("inline")})}},{key:"connectedCallback",value:function(){var t=this;b.isAttached(this)&&M(this,function(){t._tryToFillStatusBar(),// Ensure status bar when the element was compiled before connected
t.hasAttribute("on-infinite-scroll")&&t.attributeChangedCallback("on-infinite-scroll",null,t.getAttribute("on-infinite-scroll")),t._initialized||(t._initialized=!0,setImmediate(function(){t.onInit&&t.onInit(),b.triggerElementEvent(t,"init")}),b.hasAnyComponentAsParent(t))||setImmediate(function(){return t._show()})})}},{key:"updateBackButton",value:function(t){this.backButton&&(t?this.backButton.show():this.backButton.hide())}},{key:"name",get:function(){return this.getAttribute("name")},set:function(t){this.setAttribute("name",t)}},{key:"backButton",get:function(){return this.querySelector("ons-back-button")}
/**
       * @property onInfiniteScroll
       * @description
       *  [en]Function to be executed when scrolling to the bottom of the page. The function receives a done callback as an argument that must be called when it's finished.[/en]
       *  [ja][/ja]
       */},{key:"onInfiniteScroll",get:function(){return this._onInfiniteScroll},set:function(t){var e=this;!t||t instanceof Function||b.throw('"onInfiniteScroll" must be function or null'),M(this,function(){t?e._onInfiniteScroll||(e._infiniteScrollLimit=.9,e._boundOnScroll=e._onScroll.bind(e),setImmediate(function(){return e._contentElement.addEventListener("scroll",e._boundOnScroll)})):e._contentElement.removeEventListener("scroll",e._boundOnScroll),e._onInfiniteScroll=t})}},{key:"_onScroll",value:function(){var t=this,e=this._contentElement,e=(e.scrollTop+e.clientHeight)/e.scrollHeight>=this._infiniteScrollLimit;this._onInfiniteScroll&&!this._loadingContent&&e&&(this._loadingContent=!0,this._onInfiniteScroll(function(){return t._loadingContent=!1}))}
/**
       * @property onDeviceBackButton
       * @type {Object}
       * @description
       *   [en]Back-button handler.[/en]
       *   [ja]バックボタンハンドラ。[/ja]
       */},{key:"onDeviceBackButton",get:function(){return this._backButtonHandler},set:function(t){this._backButtonHandler&&this._backButtonHandler.destroy(),this._backButtonHandler=$t.createHandler(this,t)}},{key:"scrollTop",get:function(){return this._contentElement.scrollTop},set:function(t){this._contentElement.scrollTop=t}},{key:"_getContentElement",value:function(){var t=b.findChild(this,".page__content");if(t)return t;b.throw('Fail to get ".page__content" element')}},{key:"_getBackgroundElement",value:function(){var t=b.findChild(this,".page__background");if(t)return t;b.throw('Fail to get ".page__background" element')}},{key:"_getBottomToolbarElement",value:function(){return b.findChild(this,"ons-bottom-toolbar")||k.nullElement}},{key:"_getToolbarElement",value:function(){return b.findChild(this,"ons-toolbar")||document.createElement("ons-toolbar")}},{key:"attributeChangedCallback",value:function(t,e,n){var i=this;switch(t){case"class":b.restoreClass(this,this._defaultClassName,ai);break;case"modifier":v.onModifierChanged(e,n,this,ai);break;case"on-infinite-scroll":this.onInfiniteScroll=null===n?null:function(t){var e=b.findFromPath(n);(i.onInfiniteScroll=e)(t)}}}},{key:"_show",value:function(){!this._isShown&&b.isAttached(this)&&(this._isShown=!0,this.setAttribute("shown",""),this.onShow&&this.onShow(),b.triggerElementEvent(this,"show"),b.propagateAction(this,"_show"))}},{key:"_hide",value:function(){this._isShown&&(this._isShown=!1,this.removeAttribute("shown"),this.onHide&&this.onHide(),b.triggerElementEvent(this,"hide"),b.propagateAction(this,"_hide"))}},{key:"_destroy",value:function(){this._hide(),this.onDestroy&&this.onDestroy(),b.triggerElementEvent(this,"destroy"),this.onDeviceBackButton&&this.onDeviceBackButton.destroy(),b.propagateAction(this,"_destroy"),this.remove()}},{key:"_deriveHooks",value:function(){var n=this;this.constructor.events.forEach(function(t){var e="on"+t.charAt(0).toUpperCase()+t.slice(1);Object.defineProperty(n,e,{configurable:!0,enumerable:!0,get:function(){return n["_".concat(e)]},set:function(t){t instanceof Function||b.throw('"'.concat(e,'" hook must be a function')),n["_".concat(e)]=t.bind(n)}})})}}],[{key:"observedAttributes",get:function(){return["modifier","on-infinite-scroll","class"]}},{key:"events",get:function(){return["init","show","hide","destroy"]}
/**
       * @property data
       * @type {*}
       * @description
       *   [en]User's custom data passed to `pushPage()`-like methods.[/en]
       *   [ja][/ja]
       */}]),n}(),ri=(i.Page=t,customElements.define("ons-page",t),function(){d(o,Xe);var i=f(o);
/**
     * @param {Object} options
     * @param {String} options.timing
     * @param {Number} options.duration
     * @param {Number} options.delay
     */function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"cubic-bezier(.1, .7, .4, 1)":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.2:t;return l(this,o),i.call(this,{timing:e,delay:n,duration:t})}return c(o,[{key:"show",value:function(t,e){e()}},{key:"hide",value:function(t,e){e()}},{key:"_animate",value:function(t,e){var n=e.from,i=e.to,o=e.options,a=e.callback,r=e.restore,r=void 0!==r&&r,e=e.animation;b.extend({},this.options,o);return e&&(n=e.from,i=e.to),e=C(t),e=(e=r?e.saveStyle():e).queue(n).wait(this.delay).queue({css:i,duration:this.duration,timing:this.timing}),r&&(e=e.restoreStyle()),e=a?e.queue(function(t){a(),t()}):e}},{key:"_animateAll",value:function(e,n){var i=this;Object.keys(n).forEach(function(t){return i._animate(e[t],n[t]).play()})}}]),o}()),si={out:{from:{opacity:1},to:{opacity:0}},in:{from:{opacity:0},to:{opacity:1}}},li=function(){d(e,ri);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e,[{key:"show",value:function(t,e){this._animateAll(t,{_mask:si.in,_popover:{animation:si.in,restore:!0,callback:e}})}},{key:"hide",value:function(t,e){this._animateAll(t,{_mask:si.out,_popover:{animation:si.out,restore:!0,callback:e}})}}]),e}(),ci=function(){d(e,li);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e,[{key:"show",value:function(t,e){this._animateAll(t,{_mask:si.in,_popover:{from:{transform:"scale3d(1.3, 1.3, 1.0)",opacity:0},to:{transform:"scale3d(1.0, 1.0,  1.0)",opacity:1},restore:!0,callback:e}})}}]),e}(),ui={".popover":"popover--*",".popover-mask":"popover-mask--*",".popover__content":"popover--*__content",".popover__arrow":"popover--*__arrow"},di={default:function(){return r.isAndroid()?li:ci},none:ri,"fade-ios":ci,"fade-md":li},hi={up:"bottom",left:"right",down:"top",right:"left"},t=function(){d(i,Ge);var e=f(i);
/**
     * @event preshow
     * @description
     *   [en]Fired just before the popover is displayed.[/en]
     *   [ja]ポップオーバーが表示される直前に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.popover
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Call this function to stop the popover from being shown.[/en]
     *   [ja]この関数を呼び出すと、ポップオーバーの表示がキャンセルされます。[/ja]
     */
/**
     * @event postshow
     * @description
     *   [en]Fired just after the popover is displayed.[/en]
     *   [ja]ポップオーバーが表示された直後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.popover
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     */
/**
     * @event prehide
     * @description
     *   [en]Fired just before the popover is hidden.[/en]
     *   [ja]ポップオーバーが隠れる直前に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.popover
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Call this function to stop the popover from being hidden.[/en]
     *   [ja]この関数を呼び出すと、ポップオーバーが隠れる処理をキャンセルします。[/ja]
     */
/**
     * @event posthide
     * @description
     *   [en]Fired just after the popover is hidden.[/en]
     *   [ja]ポップオーバーが隠れた後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.popover
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     */
/**
     * @event dialogcancel
     * @description
     * [en]Fired when the popover is canceled.[/en]
     * [ja][/ja]
     */
/**
     * @attribute modifier
     * @type {String}
     * @description
     *  [en]The appearance of the popover.[/en]
     *  [ja]ポップオーバーの表現を指定します。[/ja]
     */
/**
     * @attribute direction
     * @type {String}
     * @description
     *  [en]
     *    A space separated list of directions. If more than one direction is specified,
     *    it will be chosen automatically. Valid directions are `"up"`, `"down"`, `"left"` and `"right"`.
     *  [/en]
     *  [ja]
     *    ポップオーバーを表示する方向を空白区切りで複数指定できます。
     *    指定できる方向は、"up", "down", "left", "right"の4つです。空白区切りで複数指定することもできます。
     *    複数指定された場合、対象とする要素に合わせて指定した値から自動的に選択されます。
     *  [/ja]
     */
/**
     * @attribute cancelable
     * @description
     *   [en]If this attribute is set the popover can be closed by tapping the background or by pressing the back button.[/en]
     *   [ja]この属性があると、ポップオーバーが表示された時に、背景やバックボタンをタップした時にをポップオーバー閉じます。[/ja]
     */
/**
     * @attribute cover-target
     * @description
     *   [en]If set the popover will cover the target on the screen.[/en]
     *   [ja][/ja]
     */
/**
     * @property coverTarget
     * @description
     *   [en]If set the popover will cover the target on the screen.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute target
     * @type {String}
     * @description
     *   [en]Specifies the ID of the default element for the popover.[/en]
     *   [ja]ポップオーバーの対象とするデフォルト要素のIDを指定します。[/ja]
     */
/**
     * @property target
     * @type {String}
     * @description
     *   [en]Specifies the ID of the default element for the popover.[/en]
     *   [ja]ポップオーバーの対象とするデフォルト要素のIDを指定します。[/ja]
     */
/**
     * @attribute animation
     * @type {String}
     * @description
     *   [en]The animation used when showing an hiding the popover. Can be either `"none"`, `"default"`, `"fade-ios"` or `"fade-md"`.[/en]
     *   [ja]ポップオーバーを表示する際のアニメーション名を指定します。[/ja]
     */
/**
     * @attribute animation-options
     * @type {Expression}
     * @description
     *  [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *  [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。e.g. {duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
     */
/**
     * @property animationOptions
     * @type {Object}
     * @description
     *   [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *   [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。例：{duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
     */
/**
     * @attribute mask-color
     * @type {Color}
     * @description
     *   [en]Color of the background mask. Default is `"rgba(0, 0, 0, 0.2)"`.[/en]
     *   [ja]背景のマスクの色を指定します。デフォルトは"rgba(0, 0, 0, 0.2)"です。[/ja]
     */
/**
     * @attribute visible
     * @type {Boolean}
     * @description
     *   [en]Whether the popover is visible or not.[/en]
     *   [ja]要素が見える場合に`true`。[/ja]
     */function i(){var t;return l(this,i),(t=e.call(this))._boundOnChange=t._onChange.bind(a(t)),M(a(t),function(){t._compile(),t.style.display="none"}),t}return c(i,[{key:"_scheme",get:function(){return ui}},{key:"_mask",get:function(){return b.findChild(this,".popover-mask")}},{key:"_popover",get:function(){return b.findChild(this,".popover")}},{key:"_content",get:function(){return b.findChild(this._popover,".popover__content")}},{key:"_arrow",get:function(){return b.findChild(this._popover,".popover__arrow")}},{key:"_updateAnimatorFactory",value:function(){return new w({animators:di,baseClass:ri,baseClassName:"PopoverAnimator",defaultAnimation:this.getAttribute("animation")||"default"})}},{key:"_toggleStyle",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};t?(this.style.display="block",!(t=e.target)&&this.target&&(t=document.getElementById(this.target)),this._currentTarget=t,this._positionPopover(t)):(this.style.display="none",this._clearStyles())}},{key:"_positionPopover",value:function(t){var e=this._radius,n=this._content,i=this._margin,o=N.getSafeAreaLengths(),a=N.getSafeAreaDOMRect(),t=t.getBoundingClientRect(),r=b.hasModifier(this,"material"),s=r&&this.hasAttribute("cover-target"),l=(b.findParent(this,"ons-page")||document.body).getBoundingClientRect(),c=Math.max(l.top,a.top),u=Math.max(l.left,a.left),d=Math.min(l.bottom,a.bottom),l=Math.min(l.right,a.right),a={top:t.top-(c+i),left:t.left-(u+i),bottom:d-i-t.bottom,right:l-i-t.right},c={top:t.top+Math.round(t.height/2)-(c+i),left:t.left+Math.round(t.width/2)-(u+i),bottom:d-i-t.bottom+Math.round(t.height/2),right:l-i-t.right+Math.round(t.width/2)},u=this._calculateDirections(a),d=u.vertical,l=u.primary,u=u.secondary,h=(this._currentDirection=l,b.addModifier(this,l),d?"width":"height"),n=(n=window.getComputedStyle(n),{width:parseInt(n.getPropertyValue("width"),10),height:parseInt(n.getPropertyValue("height"),10)}),s=s?0:(d?t.height:t.width)+(r?0:14),d=Math.max(o[l]+i,o[l]+i+a[l]+s),t=Math.max(o[u]+i,o[u]+i+c[u]-n[h]/2);this._popover.style[l]=d+"px",this._popover.style[u]=t+"px",
// Setting .popover__arrow position.
this._arrow.style[u]=Math.max(e,o[u]+i+c[u]-t)+"px"}},{key:"_calculateDirections",value:function(n){var t=(this.getAttribute("direction")||"up down left right").split(/\s+/).map(function(t){return hi[t]}).sort(function(t,e){return n[t]-n[e]})[0],e="top"==t||"bottom"==t,i=e?n.left<n.right?"left":"right":n.top<n.bottom?"top":"bottom";return{vertical:e,primary:t,secondary:i}}},{key:"_clearStyles",value:function(){var e=this;this._currentDirection=null,["top","bottom","left","right"].forEach(function(t){e._arrow.style[t]=e._content.style[t]=e._popover.style[t]="",b.removeModifier(e,t)})}},{key:"_onChange",value:function(){var t=this;setImmediate(function(){t._currentTarget&&t._positionPopover(t._currentTarget)})}},{key:"_compile",value:function(){if(g.prepare(this),!this._popover||!this._mask){if(this._popover&&this._content)this._mask||((t=document.createElement("div")).classList.add("popover-mask"),this.insertBefore(t,this.firstChild)),this._arrow||((t=document.createElement("div")).classList.add("popover__arrow"),this._popover.appendChild(t));else{for(var t=b.createFragment('\n        <div class="popover-mask"></div>\n        <div class="popover">\n          <div class="popover__content"></div>\n          <div class="popover__arrow"></div>\n        </div>\n      '),e=t.querySelector(".popover__content");this.childNodes[0];)e.appendChild(this.childNodes[0]);this.appendChild(t)}
// FIXME!
this.hasAttribute("style")&&(this._popover.setAttribute("style",this.getAttribute("style")),this.removeAttribute("style")),v.initModifier(this,this._scheme)}}
/**
       * @method show
       * @signature show(target, [options])
       * @param {String|Event|HTMLElement} target
       *   [en]Target element. Can be either a CSS selector, an event object or a DOM element. It can be also provided as 'options.target' instead. [/en]
       *   [ja]ポップオーバーのターゲットとなる要素を指定します。CSSセレクタかeventオブジェクトかDOM要素のいずれかを渡せます。[/ja]
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name.  Use one of `"fade-ios"`, `"fade-md"`, `"none"` and `"default"`.[/en]
       *   [ja]アニメーション名を指定します。"fade-ios", "fade-md", "none", "default"のいずれかを指定できます。[/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. {duration: 0.2, delay: 0.4, timing: 'ease-in'}[/ja]
       * @param {Function} [options.callback]
       *   [en]This function is called after the popover has been revealed.[/en]
       *   [ja]ポップオーバーが表示され終わった後に呼び出される関数オブジェクトを指定します。[/ja]
       * @description
       *   [en]Open the popover and point it at a target. The target can be either an event, a CSS selector or a DOM element..[/en]
       *   [ja]対象とする要素にポップオーバーを表示します。target引数には、$eventオブジェクトやDOMエレメントやCSSセレクタを渡すことが出来ます。[/ja]
       * @return {Promise}
       *   [en]Resolves to the displayed element[/en]
       *   [ja][/ja]
       */},{key:"show",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};
// Copy options and include options.target
return"string"==typeof(e=!t||"object"!==o(t)||t instanceof Event||t instanceof HTMLElement?s(s({},e),{},{target:t}):s({},t)).target?e.target=document.querySelector(e.target):e.target instanceof Event&&(e.target=e.target.target),!e.target&&this.target&&(e.target=document.getElementById(this.target)),e.target instanceof HTMLElement||b.throw("Invalid target type or undefined"),p(h(i.prototype),"show",this).call(this,e)}
/**
       * @method hide
       * @signature hide([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name.  Use one of `"fade-ios"`, `"fade-md"`, `"none"` and `"default"`.[/en]
       *   [ja]アニメーション名を指定します。"fade-ios", "fade-md", "none", "default"のいずれかを指定できます。[/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. {duration: 0.2, delay: 0.4, timing: 'ease-in'}[/ja]
       * @param {Function} [options.callback]
       *   [en]This functions is called after the popover has been hidden.[/en]
       *   [ja]ポップオーバーが隠れた後に呼び出される関数オブジェクトを指定します。[/ja]
       * @description
       *   [en]Close the popover.[/en]
       *   [ja]ポップオーバーを閉じます。[/ja]
       * @return {Promise}
       *   [en]Resolves to the hidden element[/en]
       *   [ja][/ja]
       */
/**
       * @property visible
       * @type {Boolean}
       * @description
       *   [en]Whether the element is visible or not.[/en]
       *   [ja]要素が見える場合に`true`。[/ja]
       */
/**
       * @property cancelable
       * @type {Boolean}
       * @description
       *   [en]
       *     A boolean value that specifies whether the popover is cancelable or not.
       *
       *     When the popover is cancelable it can be closed by tapping the background or by pressing the back button on Android devices.
       *   [/en]
       *   [ja][/ja]
       */
/**
       * @property onDeviceBackButton
       * @type {Object}
       * @description
       *   [en]Back-button handler.[/en]
       *   [ja]バックボタンハンドラ。[/ja]
       */
/**
       * @property maskColor
       * @type {String}
       * @default rgba(0, 0, 0, 0.2)
       * @description
       *  [en]Color of the background mask. Default is "rgba(0, 0, 0, 0.2)".[/en]
       *  [ja]背景のマスクの色を指定します。"rgba(0, 0, 0, 0.2)"がデフォルト値です。[/ja]
       */},{key:"connectedCallback",value:function(){var t=this;p(h(i.prototype),"connectedCallback",this).call(this),window.addEventListener("resize",this._boundOnChange,!1),this._margin=this._margin||parseInt(window.getComputedStyle(this).getPropertyValue("top")),this._margin=this._margin||6,// Fix for iframes
M(this,function(){t._radius=parseInt(window.getComputedStyle(t._content).getPropertyValue("border-top-left-radius"))})}},{key:"disconnectedCallback",value:function(){p(h(i.prototype),"disconnectedCallback",this).call(this),window.removeEventListener("resize",this._boundOnChange,!1)}},{key:"attributeChangedCallback",value:function(t,e,n){if("direction"===t)return this._boundOnChange();"modifier"===t&&this._currentDirection&&b.addModifier(this,this._currentDirection),p(h(i.prototype),"attributeChangedCallback",this).call(this,t,e,n)}
/**
       * @param {String} name
       * @param {PopoverAnimator} Animator
       */}],[{key:"observedAttributes",get:function(){return[].concat(m(p(h(i),"observedAttributes",this)),["direction"])}},{key:"registerAnimator",value:function(t,e){e.prototype instanceof ri||b.throwAnimator("Popover"),di[t]=e}},{key:"animators",get:function(){return di}},{key:"PopoverAnimator",get:function(){return ri}}]),i}(),fi=(b.defineBooleanProperties(t,["cover-target"]),b.defineStringProperties(t,["target"]),i.Popover=t,customElements.define("ons-popover",t),{".progress-bar":"progress-bar--*",".progress-bar__primary":"progress-bar--*__primary",".progress-bar__secondary":"progress-bar--*__secondary"}),pi=b.createElement('\n  <div class="progress-bar">\n    <div class="progress-bar__secondary"></div>\n    <div class="progress-bar__primary"></div>\n  </div>\n'),mi="indeterminate",t=function(){d(n,D);var e=f(n);
/**
     * @attribute modifier
     * @type {String}
     * @description
     *   [en]Change the appearance of the progress indicator.[/en]
     *   [ja]プログレスインジケータの見た目を変更します。[/ja]
     */
/**
     * @attribute value
     * @type {Number}
     * @description
     *   [en]Current progress. Should be a value between 0 and 100.[/en]
     *   [ja]現在の進行状況の値を指定します。0から100の間の値を指定して下さい。[/ja]
     */
/**
     * @attribute secondary-value
     * @type {Number}
     * @description
     *   [en]Current secondary progress. Should be a value between 0 and 100.[/en]
     *   [ja]現在の２番目の進行状況の値を指定します。0から100の間の値を指定して下さい。[/ja]
     */
/**
     * @attribute indeterminate
     * @description
     *   [en]If this attribute is set, an infinite looping animation will be shown.[/en]
     *   [ja]この属性が設定された場合、ループするアニメーションが表示されます。[/ja]
     */function n(){var t;return l(this,n),M(a(t=e.call(this)),function(){return t._compile()}),t}return c(n,[{key:"_compile",value:function(){this._isCompiled()?this._template=b.findChild(this,".progress-bar"):this._template=pi.cloneNode(!0),this._primary=b.findChild(this._template,".progress-bar__primary"),this._secondary=b.findChild(this._template,".progress-bar__secondary"),this._updateDeterminate(),this._updateValue(),this.appendChild(this._template),g.prepare(this),v.initModifier(this,fi)}},{key:"_isCompiled",value:function(){var t;return!!b.findChild(this,".progress-bar")&&(t=b.findChild(this,".progress-bar"),!!b.findChild(t,".progress-bar__secondary"))&&!!b.findChild(t,".progress-bar__primary")}},{key:"attributeChangedCallback",value:function(t,e,n){"modifier"===t?(v.onModifierChanged(e,n,this,fi),this.hasAttribute(mi)&&this._updateDeterminate()):"value"===t||"secondary-value"===t?this._updateValue():t===mi&&this._updateDeterminate()}},{key:"_updateDeterminate",value:function(){var t=this;M(this,function(){return b.toggleModifier(t,mi,{force:t.hasAttribute(mi)})})}},{key:"_updateValue",value:function(){var t=this;M(this,function(){t._primary.style.width=t.hasAttribute("value")?t.getAttribute("value")+"%":"0%",t._secondary.style.width=t.hasAttribute("secondary-value")?t.getAttribute("secondary-value")+"%":"0%"})}
/**
       * @property value
       * @type {Number}
       * @description
       *   [en]Current progress. Should be a value between 0 and 100.[/en]
       *   [ja]現在の進行状況の値を指定します。0から100の間の値を指定して下さい。[/ja]
       */},{key:"value",get:function(){return parseInt(this.getAttribute("value")||"0")}
/**
       * @property secondaryValue
       * @type {Number}
       * @description
       *   [en]Current secondary progress. Should be a value between 0 and 100.[/en]
       *   [ja]現在の２番目の進行状況の値を指定します。0から100の間の値を指定して下さい。[/ja]
       */,set:function(t){("number"!=typeof t||t<0||100<t)&&b.throw("Invalid value"),this.setAttribute("value",Math.floor(t))}},{key:"secondaryValue",get:function(){return parseInt(this.getAttribute("secondary-value")||"0")}
/**
       * @property indeterminate
       * @type {Boolean}
       * @description
       *   [en]If this property is `true`, an infinite looping animation will be shown.[/en]
       *   [ja]この属性が設定された場合、ループするアニメーションが表示されます。[/ja]
       */,set:function(t){("number"!=typeof t||t<0||100<t)&&b.throw("Invalid value"),this.setAttribute("secondary-value",Math.floor(t))}},{key:"indeterminate",get:function(){return this.hasAttribute(mi)},set:function(t){t?this.setAttribute(mi,""):this.removeAttribute(mi)}}],[{key:"observedAttributes",get:function(){return["modifier","value","secondary-value",mi]}}]),n}(),gi=(i.ProgressBar=t,customElements.define("ons-progress-bar",t),{".progress-circular":"progress-circular--*",".progress-circular__background":"progress-circular--*__background",".progress-circular__primary":"progress-circular--*__primary",".progress-circular__secondary":"progress-circular--*__secondary"}),vi=b.createElement('\n  <svg class="progress-circular">\n    <circle class="progress-circular__background" />\n    <circle class="progress-circular__secondary" cx="50%" cy="50%" r="40%" />\n    <circle class="progress-circular__primary" cx="50%" cy="50%" r="40%" />\n  </svg>\n'),_i="indeterminate",t=function(){d(n,D);var e=f(n);
/**
     * @attribute modifier
     * @type {String}
     * @description
     *   [en]Change the appearance of the progress indicator.[/en]
     *   [ja]プログレスインジケータの見た目を変更します。[/ja]
     */
/**
     * @attribute value
     * @type {Number}
     * @description
     *   [en]Current progress. Should be a value between 0 and 100.[/en]
     *   [ja]現在の進行状況の値を指定します。0から100の間の値を指定して下さい。[/ja]
     */
/**
     * @attribute secondary-value
     * @type {Number}
     * @description
     *   [en]Current secondary progress. Should be a value between 0 and 100.[/en]
     *   [ja]現在の２番目の進行状況の値を指定します。0から100の間の値を指定して下さい。[/ja]
     */
/**
     * @attribute indeterminate
     * @description
     *   [en]If this attribute is set, an infinite looping animation will be shown.[/en]
     *   [ja]この属性が設定された場合、ループするアニメーションが表示されます。[/ja]
     */function n(){var t;return l(this,n),M(a(t=e.call(this)),function(){return t._compile()}),t}return c(n,[{key:"attributeChangedCallback",value:function(t,e,n){"modifier"===t?(v.onModifierChanged(e,n,this,gi),this.hasAttribute(_i)&&this._updateDeterminate()):"value"===t||"secondary-value"===t?this._updateValue():t===_i&&this._updateDeterminate()}},{key:"_updateDeterminate",value:function(){var t=this;M(this,function(){return b.toggleModifier(t,_i,{force:t.hasAttribute(_i)})})}},{key:"_updateValue",value:function(){var e=this;this.hasAttribute("value")&&M(this,function(){var t=Math.ceil(251.32*e.getAttribute("value")*.01);e._primary.style["stroke-dasharray"]=t+"%, 251.32%"}),this.hasAttribute("secondary-value")?M(this,function(){var t=Math.ceil(251.32*e.getAttribute("secondary-value")*.01);e._secondary.style.display=null,e._secondary.style["stroke-dasharray"]=t+"%, 251.32%"}):M(this,function(){e._secondary.style.display="none"})}
/**
       * @property value
       * @type {Number}
       * @description
       *   [en]Current progress. Should be a value between 0 and 100.[/en]
       *   [ja]現在の進行状況の値を指定します。0から100の間の値を指定して下さい。[/ja]
       */},{key:"value",get:function(){return parseInt(this.getAttribute("value")||"0")}
/**
       * @property secondaryValue
       * @type {Number}
       * @description
       *   [en]Current secondary progress. Should be a value between 0 and 100.[/en]
       *   [ja]現在の２番目の進行状況の値を指定します。0から100の間の値を指定して下さい。[/ja]
       */,set:function(t){("number"!=typeof t||t<0||100<t)&&b.throw("Invalid value"),this.setAttribute("value",Math.floor(t))}},{key:"secondaryValue",get:function(){return parseInt(this.getAttribute("secondary-value")||"0")}
/**
       * @property indeterminate
       * @type {Boolean}
       * @description
       *   [en]If this property is `true`, an infinite looping animation will be shown.[/en]
       *   [ja]この属性が設定された場合、ループするアニメーションが表示されます。[/ja]
       */,set:function(t){("number"!=typeof t||t<0||100<t)&&b.throw("Invalid value"),this.setAttribute("secondary-value",Math.floor(t))}},{key:"indeterminate",get:function(){return this.hasAttribute(_i)},set:function(t){t?this.setAttribute(_i,""):this.removeAttribute(_i)}},{key:"_compile",value:function(){this._isCompiled()?this._template=b.findChild(this,".progress-circular"):this._template=vi.cloneNode(!0),this._primary=b.findChild(this._template,".progress-circular__primary"),this._secondary=b.findChild(this._template,".progress-circular__secondary"),this._updateDeterminate(),this._updateValue(),this.appendChild(this._template),g.prepare(this),v.initModifier(this,gi)}},{key:"_isCompiled",value:function(){var t;return!!b.findChild(this,".progress-circular")&&(t=b.findChild(this,".progress-circular"),!!b.findChild(t,".progress-circular__secondary"))&&!!b.findChild(t,".progress-circular__primary")}}],[{key:"observedAttributes",get:function(){return["modifier","value","secondary-value",_i]}}]),n}(),bi=(i.ProgressCircular=t,customElements.define("ons-progress-circular",t),"initial"),t=function(){d(o,D);var i=f(o);
/**
     * @event changestate
     * @description
     *   [en]Fired when the state is changed. The state can be either "initial", "preaction" or "action".[/en]
     *   [ja]コンポーネントの状態が変わった場合に発火します。状態は、"initial", "preaction", "action"のいずれかです。[/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクト。[/ja]
     * @param {Object} event.pullHook
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     * @param {String} event.state
     *   [en]Current state.[/en]
     *   [ja]現在の状態名を参照できます。[/ja]
     */
/**
     * @event pull
     * @description
     *   [en]Fired when the pull hook is pulled.[/en]
     *   [ja][/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクト。[/ja]
     * @param {Object} event.ratio
     *   [en]The pulled distance ratio (scroll / height).[/en]
     *   [ja][/ja]
     * @param {String} event.animationOptions
     *   [en]The animation options object.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute disabled
     * @description
     *   [en]If this attribute is set the "pull-to-refresh" functionality is disabled.[/en]
     *   [ja]この属性がある時、disabled状態になりアクションが実行されなくなります[/ja]
     */
/**
     * @attribute height
     * @type {String}
     * @description
     *   [en]Specify the height of the component. When pulled down further than this value it will switch to the "preaction" state. The default value is "64px".[/en]
     *   [ja]コンポーネントの高さを指定します。この高さ以上にpull downすると"preaction"状態に移行します。デフォルトの値は"64px"です。[/ja]
     */
/**
     * @attribute threshold-height
     * @type {String}
     * @description
     *   [en]Specify the threshold height. The component automatically switches to the "action" state when pulled further than this value. The default value is "96px". A negative value will disable this property. If this value is lower than the height, it will skip "preaction" state.[/en]
     *   [ja]閾値となる高さを指定します。この値で指定した高さよりもpull downすると、このコンポーネントは自動的に"action"状態に移行します。[/ja]
     */
/**
     * @attribute fixed-content
     * @description
     *   [en]If this attribute is set the content of the page will not move when pulling.[/en]
     *   [ja]この属性がある時、プルフックが引き出されている時にもコンテンツは動きません。[/ja]
     */
/**
     * @property fixedContent
     * @type {Boolean}
     * @description
     *   [en]If this property is set the content of the page will not move when pulling.[/en]
     *   [ja]この属性がある時、プルフックが引き出されている時にもコンテンツは動きません。[/ja]
     */function o(){l(this,o),(t=i.call(this))._onDrag=t._onDrag.bind(a(t)),t._onDragStart=t._onDragStart.bind(a(t)),t._onDragEnd=t._onDragEnd.bind(a(t)),t._onScroll=t._onScroll.bind(a(t)),t._setState(bi,!0),t._hide();var t,e=b.defineListenerProperty(a(t),"pull"),n=e.onConnected,e=e.onDisconnected;return t._connectOnPull=n,t._disconnectOnPull=e,t}return c(o,[{key:"_setStyle",value:function(){var t=this.height+"px";u(this,{height:t,lineHeight:t}),""===this.style.display&&this._show()}},{key:"_onScroll",value:function(t){var e=this._pageElement;e.scrollTop<0&&(e.scrollTop=0)}},{key:"_canConsumeGesture",value:function(t){return"up"===t.direction||"down"===t.direction}},{key:"_onDragStart",value:function(t){var e,n,i,o=this;t.gesture&&!this.disabled&&(e=t.gesture.center.clientY+this._pageElement.scrollTop,n=window.innerHeight,this._ignoreDrag=t.consumed||+n<e,this._ignoreDrag||(i=t.consume,t.consume=function(){i&&i(),o._ignoreDrag=!0,
// This elements resizes .page__content so it is safer
// to hide it when other components are dragged.
o._hide()},this._canConsumeGesture(t.gesture)&&(i&&i(),t.consumed=!0,this._show())),this._startScroll=this._pageElement.scrollTop)}},{key:"_onDrag",value:function(t){var e,n,i=this;t.gesture&&!this.disabled&&!this._ignoreDrag&&this._canConsumeGesture(t.gesture)&&(
// Necessary due to 'dragLockAxis' (25px)
"none"===this.style.display&&this._show(),t.stopPropagation(),t.gesture.center.clientY,this._pageElement.scrollTop,(e=Math.max(t.gesture.deltaY-this._startScroll,0))!==this._currentTranslation)&&(0<(n=this.thresholdHeight)&&n<=e?(t.gesture.stopDetect(),setImmediate(function(){return i._finish()})):e>=this.height?this._setState("preaction"):this._setState(bi),this._translateTo(e))}},{key:"_onDragEnd",value:function(t){!t.gesture||this.disabled||this._ignoreDrag||(t.stopPropagation(),0<this._currentTranslation&&(this._currentTranslation>this.height?this._finish():this._translateTo(0,{animate:!0})))}
/**
       * @property onAction
       * @type {Function}
       * @description
       *   [en]This will be called in the `action` state if it exists. The function will be given a `done` callback as its first argument.[/en]
       *   [ja][/ja]
       */},{key:"onAction",get:function(){return this._onAction},set:function(t){!t||t instanceof Function||je("onAction","function or null"),this._onAction=t}
/**
       * @property onPull
       * @type {Function}
       * @description
       *   [en]Hook called whenever the user pulls the element. It gets the pulled distance ratio (scroll / height) and an animationOptions object as arguments.[/en]
       *   [ja][/ja]
       */},{key:"_finish",value:function(){var t=this;this._setState("action"),this._translateTo(this.height,{animate:!0}),(this.onAction||function(t){return t()})(function(){t._translateTo(0,{animate:!0}),t._setState(bi)})}
/**
       * @property height
       * @type {Number}
       * @description
       *   [en]The height of the pull hook in pixels. The default value is `64px`.[/en]
       *   [ja][/ja]
       */},{key:"height",get:function(){return parseInt(this.getAttribute("height")||"64",10)}
/**
       * @property thresholdHeight
       * @type {Number}
       * @description
       *   [en]The thresholdHeight of the pull hook in pixels. The default value is `96px`.[/en]
       *   [ja][/ja]
       */,set:function(t){b.isInteger(t)||je("height","integer"),this.setAttribute("height","".concat(t,"px"))}},{key:"thresholdHeight",get:function(){return parseInt(this.getAttribute("threshold-height")||"96",10)},set:function(t){b.isInteger(t)||je("thresholdHeight","integer"),this.setAttribute("threshold-height","".concat(t,"px"))}},{key:"_setState",value:function(t,e){var n=this.state;this.setAttribute("state",t),e||n===this.state||b.triggerElementEvent(this,"changestate",{pullHook:this,state:t,lastState:n})}
/**
       * @property state
       * @readonly
       * @type {String}
       * @description
       *   [en]Current state of the element.[/en]
       *   [ja][/ja]
       */},{key:"state",get:function(){return this.getAttribute("state")}
/**
       * @property pullDistance
       * @readonly
       * @type {Number}
       * @description
       *   [en]The current number of pixels the pull hook has moved.[/en]
       *   [ja]現在のプルフックが引き出された距離をピクセル数。[/ja]
       */},{key:"pullDistance",get:function(){return this._currentTranslation}
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the element is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */},{key:"_show",value:function(){var t=this;
// Run asyncrhonously to avoid conflicts with Animit's style clean
setImmediate(function(){t.style.display="",t._pageElement&&(t._pageElement.style.marginTop="-".concat(t.height,"px"))})}},{key:"_hide",value:function(){this.style.display="none",this._pageElement&&(this._pageElement.style.marginTop="")}
/**
       * @param {Number} scroll
       * @param {Object} options
       * @param {Function} [options.callback]
       */},{key:"_translateTo",value:function(t){var e,n,i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};0==this._currentTranslation&&0==t||(this._currentTranslation=t,e=i.animate?{duration:.3,timing:"cubic-bezier(.1, .7, .1, 1)"}:{},b.triggerElementEvent(this,"pull",{ratio:(t/this.height).toFixed(2),animationOptions:e}),n=this.hasAttribute("fixed-content")?this:this._pageElement,C(n).queue({transform:"translate3d(0px, ".concat(t,"px, 0px)")},e).play(function(){0===t&&u.clear(n,"transition transform"),i.callback instanceof Function&&i.callback()}))}},{key:"_disableDragLock",value:function(){
// e2e tests need it
this._dragLockDisabled=!0,this._setupListeners(!0)}},{key:"_setupListeners",value:function(t){function e(t){i._pageElement["".concat(t,"EventListener")]("scroll",i._onScroll,!1)}function n(t){var e={passive:!0};i._gestureDetector[t]("drag",i._onDrag,e),i._gestureDetector[t]("dragstart",i._onDragStart,e),i._gestureDetector[t]("dragend",i._onDragEnd,e)}var i=this;this._gestureDetector&&(n("off"),this._gestureDetector.dispose(),this._gestureDetector=null),e("remove"),t&&(this._gestureDetector=new A(this._pageElement,{dragMinDistance:1,dragDistanceCorrection:!1,dragLockToAxis:!this._dragLockDisabled,passive:!0}),n("on"),e("add"))}},{key:"connectedCallback",value:function(){this._currentTranslation=0,this._pageElement=this.parentNode,this._setupListeners(!0),this._setStyle(),this._connectOnPull()}},{key:"disconnectedCallback",value:function(){this._hide(),this._setupListeners(!1),this._disconnectOnPull()}},{key:"attributeChangedCallback",value:function(t,e,n){"height"===t&&this._pageElement&&this._setStyle()}}],[{key:"observedAttributes",get:function(){return["height"]}},{key:"events",get:function(){return["changestate","pull"]}}]),o}(),yi=(b.defineBooleanProperties(t,["disabled","fixed-content"]),i.PullHook=t,customElements.define("ons-pull-hook",t),{"":"range--*",".range__input":"range--*__input",".range__focus-ring":"range--*__focus-ring"}),ki="range__input--active",t=function(){d(i,Dn);var e=f(i);function i(){var t;return l(this,i),(t=e.call(this))._onMouseDown=t._onMouseDown.bind(a(t)),t._onMouseUp=t._onMouseUp.bind(a(t)),t._onTouchStart=t._onTouchStart.bind(a(t)),t._onTouchEnd=t._onTouchEnd.bind(a(t)),t._onInput=t._update.bind(a(t)),t._onDragstart=t._onDragstart.bind(a(t)),t._onDragend=t._onDragend.bind(a(t)),t}return c(i,[{key:"_compile",value:function(){p(h(i.prototype),"_compile",this).call(this),this._updateDisabled(this.hasAttribute("disabled"))}
/* Inherited props */},{key:"_update",value:function(){var e=this._input,n=this._focusRing;e.style.backgroundSize="".concat(100*this._ratio,"% 2px"),n.value=this.value,
// NOTE: "_zero" attribute is used for CSS styling.
""===e.min&&"0"===e.value||e.min===e.value?e.setAttribute("_zero",""):e.removeAttribute("_zero"),["min","max"].forEach(function(t){return n[t]=e[t]})}},{key:"_scheme",get:function(){return yi}},{key:"_template",get:function(){return'\n      <input type="'.concat(this.type,'" class="').concat(this._defaultClassName,'__input">\n      <input type="range" class="range__focus-ring" tabIndex="-1">\n    ')}},{key:"_defaultClassName",get:function(){return"range"}},{key:"type",get:function(){return"range"}
/* Own props */},{key:"_onMouseDown",value:function(t){var e=this;this._input.classList.add(ki),setImmediate(function(){return e._input.focus()})}},{key:"_onTouchStart",value:function(t){this._onMouseDown()}},{key:"_onMouseUp",value:function(t){this._input.classList.remove(ki)}},{key:"_onTouchEnd",value:function(t){this._onMouseUp(t)}},{key:"_onDragstart",value:function(t){t.consumed=!0,t.gesture.stopPropagation(),this._input.classList.add(ki),this.addEventListener("drag",this._onDrag)}},{key:"_onDrag",value:function(t){t.stopPropagation()}},{key:"_onDragend",value:function(t){this._input.classList.remove(ki),this.removeEventListener("drag",this._onDrag)}},{key:"_focusRing",get:function(){return this.children[1]}},{key:"_ratio",get:function(){
// Returns the current ratio.
var t=""===this._input.min?0:parseInt(this._input.min),e=""===this._input.max?100:parseInt(this._input.max);return(this.value-t)/(e-t)}},{key:"attributeChangedCallback",value:function(t,e,n){"disabled"===t&&this._updateDisabled(n),p(h(i.prototype),"attributeChangedCallback",this).call(this,t,e,n)}
/**
       * @param {boolean} disabled
       */},{key:"_updateDisabled",value:function(t){t?this.classList.add("range--disabled"):this.classList.remove("range--disabled")}},{key:"connectedCallback",value:function(){this._setupListeners(!0)}},{key:"disconnectedCallback",value:function(){this._setupListeners(!1)}},{key:"_setupListeners",value:function(t){t=(t?"add":"remove")+"EventListener";b[t](this,"touchstart",this._onTouchStart,{passive:!0}),this[t]("mousedown",this._onMouseDown),this[t]("mouseup",this._onMouseUp),this[t]("touchend",this._onTouchEnd),this[t]("dragstart",this._onDragstart),this[t]("dragend",this._onDragend),this[t]("input",this._onInput)}
/**
       * @attribute disabled
       * @description
       *   [en]Whether the element is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the element is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
/**
       * @property value
       * @type {Number}
       * @description
       *   [en]Current value.[/en]
       *   [ja][/ja]
       */
/**
       * @method focus
       * @signature focus()
       * @description
       *   [en]Focuses the range.[/en]
       *   [ja][/ja]
       */
/**
       * @method blur
       * @signature blur()
       * @description
       *   [en]Removes focus from the range.[/en]
       *   [ja][/ja]
       */}],[{key:"observedAttributes",get:function(){return["disabled"].concat(m(Dn.observedAttributes))}}]),i}(),t=(i.Range=t,customElements.define("ons-range",t),function(){d(e,D);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e)}()),wi=(i.Row=t,customElements.define("ons-row",t),"segment"),Ei={"":"segment--*",".segment__item":"segment--*__item",".segment__input":"segment--*__input",".segment__button":"segment--*__button"},Ci=(We=0,function(){return"ons-segment-gen-"+We++}),t=function(){d(n,D);var e=f(n);
/**
     * @event postchange
     * @description
     *   [en]Fires after the active button is changed.[/en]
     *   [ja][/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja][/ja]
     * @param {Number} event.index
     *   [en]Tapped button index.[/en]
     *   [ja][/ja]
     * @param {Object} event.segmentItem
     *   [en]Segment item object.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute modifier
     * @type {String}
     * @description
     *  [en]The appearance of the segment.[/en]
     *  [ja][/ja]
     */
/**
     * @attribute tabbar-id
     * @initonly
     * @type {String}
     * @description
     *  [en]ID of the tabbar element to "connect" to the segment. Must be inside the same page.[/en]
     *  [ja][/ja]
     */
/**
     * @attribute active-index
     * @default 0
     * @type {Number}
     * @description
     *  [en]Index of the active button. If a tabbar is connected, this will be set to the tabbar's active index.[/en]
     *  [ja][/ja]
     */
/**
     * @property activeIndex
     * @default 0
     * @type {Number}
     * @description
     *  [en]Index of the active button. If a tabbar is connected, this will be set to the tabbar's active index.[/en]
     *  [ja][/ja]
     */
/**
     * @attribute disabled
     * @description
     *   [en]Specify if segment should be disabled.[/en]
     *   [ja]ボタンを無効化する場合は指定します。[/ja]
     */function n(){var t;return l(this,n),(t=e.call(this))._segmentId=Ci(),t._tabbar=null,t._onChange=t._onChange.bind(a(t)),t._onTabbarPreChange=t._onTabbarPreChange.bind(a(t)),M(a(t),function(){t._compile(),setImmediate(function(){return t._lastActiveIndex=t._tabbar?t._tabbar.getActiveTabIndex():t.getActiveButtonIndex()})}),t}return c(n,[{key:"_compile",value:function(){g.prepare(this),this.classList.add(wi);for(var t=this.children.length-1;0<=t;t--){var e=this.children[t],n=(e.classList.add("segment__item"),b.findChild(e,".segment__input")||b.create("input.segment__input")),i=(n.type="radio",n.value=t,n.name=n.name||this._segmentId,n.checked=!this.hasAttribute("tabbar-id")&&t===(this.activeIndex||0),b.findChild(e,".segment__button")||b.create(".segment__button"));if(i.parentElement!==e)for(;e.firstChild;)i.appendChild(e.firstChild);e.appendChild(n),e.appendChild(i)}v.initModifier(this,Ei)}},{key:"connectedCallback",value:function(){var e=this;M(this,function(){var t;e.hasAttribute("tabbar-id")&&(t=b.findParent(e,"ons-page"),e._tabbar=t&&t.querySelector("#"+e.getAttribute("tabbar-id")),e._tabbar&&"ONS-TABBAR"===e._tabbar.tagName||b.throw("No tabbar with id ".concat(e.getAttribute("tabbar-id")," was found.")),e._tabbar.setAttribute("hide-tabs",""),setImmediate(function(){var t=e._tabbar.getActiveTabIndex();e._setChecked(t),e.activeIndex=t}),e._tabbar.addEventListener("prechange",e._onTabbarPreChange))}),this.addEventListener("change",this._onChange)}},{key:"disconnectedCallback",value:function(){var t=this;M(this,function(){t._tabbar&&(t._tabbar.removeEventListener("prechange",t._onTabbarPreChange),t._tabbar=null)}),this.removeEventListener("change",this._onChange)}},{key:"_setChecked",value:function(t){this.children[t].firstElementChild.checked=!0}
/**
       * @method setActiveButton
       * @signature setActiveButton(index, [options])
       * @param {Number} index
       *   [en]Button index.[/en]
       *   [ja][/ja]
       * @param {Object} [options]
       *   [en]Parameter object, works only if there is a connected tabbar. Supports the same options as `ons-tabbar`'s `setActiveTab` method.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Make button with the specified index active. If there is a connected tabbar it shows the corresponding tab page. In this case animations and their options can be specified by the second parameter.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en]Resolves to the selected index or to the new page element if there is a connected tabbar.[/en]
       *   [ja][/ja]
       */},{key:"setActiveButton",value:function(t,e){return this._tabbar?this._tabbar.setActiveTab(t,e):(this._setChecked(t),this._postChange(t),Promise.resolve(t))}
/**
       * @method getActiveButtonIndex
       * @signature getActiveButtonIndex()
       * @return {Number}
       *   [en]The index of the currently active button.[/en]
       *   [ja][/ja]
       * @description
       *   [en]Returns button index of current active button. If active button is not found, returns -1.[/en]
       *   [ja][/ja]
       */},{key:"getActiveButtonIndex",value:function(){for(var t=this.children.length-1;0<=t;t--)
// Array.findIndex
if(this.children[t].firstElementChild.checked)return t;return-1}},{key:"_onChange",value:function(t){t.stopPropagation(),this._tabbar?this._tabbar.setActiveTab(this.getActiveButtonIndex(),{reject:!1}):this._postChange(this.getActiveButtonIndex())}},{key:"_onTabbarPreChange",value:function(t){var e=this;setImmediate(function(){t.detail.canceled||(e._setChecked(t.index),e._postChange(t.index))})}},{key:"_postChange",value:function(t){b.triggerElementEvent(this,"postchange",{index:t,activeIndex:t,lastActiveIndex:this._lastActiveIndex,segmentItem:this.children[t]}),this._lastActiveIndex=t,this.activeIndex=t}
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the segment is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */},{key:"activeIndex",get:function(){return parseInt(this.getAttribute("active-index"))},set:function(t){null!=t&&this.setAttribute("active-index",t)}},{key:"attributeChangedCallback",value:function(t,e,n){var i=this;switch(t){case"class":b.restoreClass(this,wi,Ei);break;case"modifier":v.onModifierChanged(e,n,this,Ei);break;case"active-index":M(this,function(){i.getActiveButtonIndex()!==i.activeIndex&&i.setActiveButton(i.activeIndex)})}}}],[{key:"observedAttributes",get:function(){return["class","modifier","active-index"]}},{key:"events",get:function(){return["postchange"]}}]),n}(),Ai=(b.defineBooleanProperties(t,["disabled"]),i.Segment=t,customElements.define("ons-segment",t),{"":"select-* select--*",".select-input":"select-input--*"}),Si=["autofocus","disabled","form","multiple","name","required","size"],t=function(){d(n,D);var e=f(n);
/**
     * @attribute autofocus
     * @type {Boolean}
     * @default false
     * @description
     *  [en]Element automatically gains focus on page load.[/en]
     *  [ja]ページロード時にこのセレクトボックスにフォーカスが移るようにします。[/ja]
     */
/**
     * @attribute disabled
     * @type {Boolean}
     * @default false
     * @description
     *   [en]Specify if select input should be disabled.[/en]
     *   [ja]このセレクトボックスを無効化する場合に指定します。[/ja]
     */
/**
     * @attribute form
     * @type {String}
     * @description
     *   [en]Associate a select element to an existing form on the page, even if not nested.[/en]
     *   [ja]このセレクトボックスを、指定した `form` 要素に紐付けます。セレクトボックスを `form` 要素の外側に配置する際に使用します。[/ja]
     */
/**
     * @attribute multiple
     * @type {Boolean}
     * @default false
     * @description
     *  [en]If this attribute is defined, multiple options can be selected at once.[/en]
     *  [ja]選択肢の複数選択を有効にします。[/ja]
     */
/**
     * @attribute name
     * @type {String}
     * @description
     *   [en]Name the select element, useful for instance if it is part of a form.[/en]
     *   [ja]このセレクトボックスの名前を指定します。通常 `form` 要素と共に使用します。[/ja]
     */
/**
     * @attribute required
     * @type {Boolean}
     * @description
     *   [en]Make the select input required for submitting the form it is part of.[/en]
     *   [ja]このセレクトボックスを入力必須にする場合に指定します。通常 `form` 要素と共に使用します。[/ja]
     */
/**
     * @attribute select-id
     * @type {String}
     * @description
     *   [en]ID given to the inner select, useful for dynamic manipulation.[/en]
     *   [ja]このセレクトボックスが内部に持つ select 要素に与える ID を指定します。セレクトボックスの内容を動的に変更する必要がある場合に使用します。[/ja]
     */
/**
     * @attribute size
     * @type {Number}
     * @default 1
     * @description
     *   [en]How many options are displayed; if there are more than the size then a scroll appears to navigate them.[/en]
     *   [ja]一度に表示する選択肢の個数を指定します。選択肢がこの属性で指定した個数よりも多い場合、スクロールが有効になります。[/ja]
     */function n(){var t;return l(this,n),M(a(t=e.call(this)),function(){return t._compile()}),t._deriveGetters(),t}return c(n,[{key:"attributeChangedCallback",value:function(t,e,n){var i=this;switch(t){case"class":b.restoreClass(this,"select",Ai);break;case"modifier":v.onModifierChanged(e,n,this,Ai)}0<=Si.indexOf(t)&&M(this,function(){return i._updateBoundAttributes()})}},{key:"_select",get:function(){return this.querySelector("select")}},{key:"_updateBoundAttributes",value:function(){var e=this;Si.forEach(function(t){e.hasAttribute(t)?e._select.setAttribute(t,e.getAttribute(t)):e._select.removeAttribute(t)})}
/**
       * @property length
       * @description
       *   [en]Number of options in the select box.[/en]
       *   [ja]このセレクトボックスに含まれる選択肢の個数を返します。 `select` 要素[/ja]
       */
/**
       * @property options
       * @description
       *   [en]Several options for handling the select DOM object.[/en]
       *   [ja]このセレクトボックスに含まれる `option` 要素の配列を返します。[/ja]
       */
/**
       * @property selectedIndex
       * @description
       *   [en]Index of the currently selected option.[/en]
       *   [ja]現在選択されている選択肢のインデックスを返します。[/ja]
       */
/**
       * @property value
       * @description
       *   [en]Value of the currently selected option.[/en]
       *   [ja]現在選択されている選択肢の値を返します。[/ja]
       */},{key:"_compile",value:function(){g.prepare(this),this.classList.add("select");var e=this._select||document.createElement("select");!e.id&&this.hasAttribute("select-id")&&(e.id=this.getAttribute("select-id")),e.classList.add("select-input"),this._select||(b.arrayFrom(this.childNodes).forEach(function(t){return e.appendChild(t)}),this.appendChild(e)),v.initModifier(this,Ai)}},{key:"_deriveGetters",value:function(){var n=this;["disabled","length","multiple","name","options","selectedIndex","size","value","form","type"].forEach(function(e){Object.defineProperty(n,e,{configurable:!0,enumerable:!0,get:function(){return n._select[e]},set:-1===["form","type"].indexOf(e)?function(t){return M(n,function(){return n._select[e]=t})}:void 0})})}},{key:"add",value:function(t){this._select.add(t,1<arguments.length&&void 0!==arguments[1]?arguments[1]:null)}
// If called with an index argument, removes the option element with the given index.
// If called with no arguments, removes this.
// This behaviour might sound crazy but it is the same as <select>'s `remove` method.
// https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/remove
},{key:"remove",value:function(t){void 0===t?Element.prototype.remove.call(this):this._select.remove(t)}}],[{key:"observedAttributes",get:function(){return["modifier","class"].concat(Si)}}]),n}(),xi=(i.Select=t,customElements.define("ons-select",t),"fab fab--mini speed-dial__item"),Pi={"":"fab--* speed-dial__item--*"},t=function(){d(n,D);var e=f(n);
/**
     * @attribute modifier
     * @type {String}
     * @description
     *   [en]The appearance of the component.[/en]
     *   [ja]このコンポーネントの表現を指定します。[/ja]
     */
/**
     * @attribute ripple
     * @description
     *  [en]If this attribute is defined, the button will have a ripple effect when tapped.[/en]
     *  [ja][/ja]
     */
/**
     * @property ripple
     * @type {Boolean}
     * @description
     *  [en]If this property is defined, the button will have a ripple effect when tapped.[/en]
     *  [ja][/ja]
     */function n(){var t;return l(this,n),(t=e.call(this))._compile(),t._boundOnClick=t._onClick.bind(a(t)),t}return c(n,[{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"class":b.restoreClass(this,xi,Pi);break;case"modifier":v.onModifierChanged(e,n,this,Pi),b.addModifier(this,"mini");break;case"ripple":this._updateRipple()}}},{key:"connectedCallback",value:function(){this.addEventListener("click",this._boundOnClick,!1)}},{key:"disconnectedCallback",value:function(){this.removeEventListener("click",this._boundOnClick,!1)}},{key:"_updateRipple",value:function(){b.updateRipple(this)}},{key:"_onClick",value:function(t){t.stopPropagation()}},{key:"_compile",value:function(){var e=this;g.prepare(this),xi.split(/\s+/).forEach(function(t){return e.classList.add(t)}),b.addModifier(this,"mini"),this._updateRipple(),v.initModifier(this,Pi)}}],[{key:"observedAttributes",get:function(){return["modifier","ripple","class"]}}]),n}(),Li=(b.defineBooleanProperties(t,["ripple"]),i.SpeedDialItem=t,customElements.define("ons-speed-dial-item",t),"speed-dial"),Oi={"":"speed-dial--*"},t=function(){d(o,D);var i=f(o);
/**
     * @event open
     * @description
     *   [en]Fired when the menu items are shown.[/en]
     *   [ja][/ja]
     */
/**
     * @event close
     * @description
     *   [en]Fired when the menu items are hidden.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute modifier
     * @type {String}
     * @description
     *   [en]The appearance of the component.[/en]
     *   [ja]このコンポーネントの表現を指定します。[/ja]
     */
/**
     * @attribute ripple
     * @description
     *  [en]If this attribute is defined, the button will have a ripple effect when tapped.[/en]
     *  [ja][/ja]
     */
/**
     * @property ripple
     * @type {Boolean}
     * @description
     *  [en]If this property is defined, the button will have a ripple effect when tapped.[/en]
     *  [ja][/ja]
     */
/**
     * @attribute position
     * @type {String}
     * @description
     *   [en]
     *     Specify the vertical and horizontal position of the component.
     *     I.e. to display it in the top right corner specify "right top".
     *     Choose from "right", "left", "top" and "bottom".
     *   [/en]
     *   [ja]
     *     この要素を表示する左右と上下の位置を指定します。
     *     例えば、右上に表示する場合には"right top"を指定します。
     *     左右と上下の位置の指定には、rightとleft、topとbottomがそれぞれ指定できます。
     *   [/ja]
     */
/**
     * @attribute direction
     * @type {String}
     * @description
     *   [en]Specify the direction the items are displayed. Possible values are "up", "down", "left" and "right".[/en]
     *   [ja]
     *     要素が表示する方向を指定します。up, down, left, rightが指定できます。
     *   [/ja]
     */
/**
     * @attribute disabled
     * @description
     *   [en]Specify if button should be disabled.[/en]
     *   [ja]無効化する場合に指定します。[/ja]
     */function o(){l(this,o),M(a(t=i.call(this)),function(){t._compile()}),t._boundOnClick=t._onClick.bind(a(t));var t,e=b.defineListenerProperty(a(t),"click"),n=e.onConnected,e=e.onDisconnected;return t._connectOnClick=n,t._disconnectOnClick=e,t}return c(o,[{key:"_compile",value:function(){this.classList.add(Li),g.prepare(this),this._updateRipple(),v.initModifier(this,Oi),this.hasAttribute("direction")?this._updateDirection(this.getAttribute("direction")):this._updateDirection("up"),this._updatePosition()}},{key:"attributeChangedCallback",value:function(t,e,n){var i=this;switch(t){case"class":b.restoreClass(this,Li,Oi);break;case"modifier":v.onModifierChanged(e,n,this,Oi);break;case"ripple":M(this,function(){return i._updateRipple()});break;case"direction":M(this,function(){return i._updateDirection(n)});break;case"position":M(this,function(){return i._updatePosition()});break;case"open":this._ignoreOpenSideEffect||M(this,function(){return i._updateOpen(e)})}}},{key:"connectedCallback",value:function(){this.addEventListener("click",this._boundOnClick,!1),this._connectOnClick()}},{key:"disconnectedCallback",value:function(){this.removeEventListener("click",this._boundOnClick,!1),this._disconnectOnClick()}},{key:"items",get:function(){return b.arrayFrom(this.querySelectorAll("ons-speed-dial-item"))}},{key:"_fab",get:function(){return b.findChild(this,"ons-fab")}},{key:"_onClick",value:function(t){var e=this;setTimeout(function(){if(!t.defaultPrevented&&!e.disabled&&e.visible)return e.toggleItems()})}},{key:"_show",value:function(){return this.inline?Promise.resolve():this.show()}},{key:"_hide",value:function(){var e=this;return new Promise(function(t){e.inline?t():setImmediate(function(){return e.hide().then(t)})})}},{key:"_updateRipple",value:function(){this._fab&&(this.hasAttribute("ripple")?this._fab.setAttribute("ripple",""):this._fab.removeAttribute("ripple"))}},{key:"_updateDirection",value:function(t){for(var e=this.items,n=0;n<e.length;n++)u(e[n],{transitionDelay:25*n+"ms",bottom:"auto",right:"auto",top:"auto",left:"auto"});switch(t){case"up":for(var i=0;i<e.length;i++)e[i].style.bottom=72+56*i+"px",e[i].style.right="8px";break;case"down":for(var o=0;o<e.length;o++)e[o].style.top=72+56*o+"px",e[o].style.left="8px";break;case"left":for(var a=0;a<e.length;a++)e[a].style.top="8px",e[a].style.right=72+56*a+"px";break;case"right":for(var r=0;r<e.length;r++)e[r].style.top="8px",e[r].style.left=72+56*r+"px";break;default:b.throw("Argument must be one of up, down, left or right.")}}},{key:"_updatePosition",value:function(){var t=this.getAttribute("position");switch(this.classList.remove("fab--top__left","fab--bottom__right","fab--bottom__left","fab--top__right","fab--top__center","fab--bottom__center"),t){case"top right":case"right top":this.classList.add("fab--top__right");break;case"top left":case"left top":this.classList.add("fab--top__left");break;case"bottom right":case"right bottom":this.classList.add("fab--bottom__right");break;case"bottom left":case"left bottom":this.classList.add("fab--bottom__left");break;case"center top":case"top center":this.classList.add("fab--top__center");break;case"center bottom":case"bottom center":this.classList.add("fab--bottom__center")}}},{key:"_getTranslate",value:function(){return 0<=(this.getAttribute("position")||"").indexOf("bottom")?"translate3d(0px, -".concat(b.globals.fabOffset||0,"px, 0px) "):""}
/**
       * @method show
       * @signature show()
       * @description
       *   [en]Show the speed dial.[/en]
       *   [ja]Speed dialを表示します。[/ja]
       */},{key:"show",value:function(){return this._fab.show(),u(this,{transform:this._getTranslate}),Promise.resolve()}
/**
       * @method hide
       * @signature hide()
       * @description
       *   [en]Hide the speed dial.[/en]
       *   [ja]Speed dialを非表示にします。[/ja]
       */},{key:"hide",value:function(){var t=this;return this.hideItems().then(function(){return t._fab.hide()})}
/**
       * @method showItems
       * @signature showItems()
       * @description
       *   [en]Show the speed dial items.[/en]
       *   [ja]Speed dialの子要素を表示します。[/ja]
       */},{key:"showItems",value:function(){var t=this.open;return this._ignoreOpenSideEffect=!0,this.open=!0,this._ignoreOpenSideEffect=!1,this._updateOpen(t)}
/**
       * @method hideItems
       * @signature hideItems()
       * @description
       *   [en]Hide the speed dial items.[/en]
       *   [ja]Speed dialの子要素を非表示にします。[/ja]
       */},{key:"hideItems",value:function(){var t=this.open;return this._ignoreOpenSideEffect=!0,this.open=!1,this._ignoreOpenSideEffect=!1,this._updateOpen(t)}},{key:"_updateOpen",value:function(t){
// update direction
this.open&&(this.hasAttribute("direction")?this._updateDirection(this.getAttribute("direction")):this._updateDirection("up"));var e=0;if(t!==this.open){for(
// do nothing if already open/closed
var n=this.items,i=0;i<n.length;i++){var o=25*(this.open?i:n.length-i);e+=o,u(n[i],{transform:"scale(".concat(this.open?1:0,")"),transitionDelay:o+"ms"})}e+=50,b.triggerElementEvent(this,this.open?"open":"close")}t=b.defer();return setTimeout(t.resolve,e),t.promise}
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the element is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */},{key:"disabled",get:function(){return this.hasAttribute("disabled")}
/**
       * @property inline
       * @readonly
       * @type {Boolean}
       * @description
       *   [en]Whether the element is inline or not.[/en]
       *   [ja]インライン要素の場合に`true`。[/ja]
       */,set:function(e){e&&this.hideItems(),b.arrayFrom(this.children).forEach(function(t){b.match(t,".fab")&&b.toggleAttribute(t,"disabled",e)}),b.toggleAttribute(this,"disabled",e)}},{key:"inline",get:function(){return this.hasAttribute("inline")}
/**
       * @property visible
       * @readonly
       * @type {Boolean}
       * @description
       *   [en]Whether the element is visible or not.[/en]
       *   [ja]要素が見える場合に`true`。[/ja]
       */},{key:"visible",get:function(){return this._fab&&this._fab.visible&&"none"!==this.style.display}
/**
       * @method isOpen
       * @signature isOpen()
       * @description
       *   [en]Returns whether the menu is open or not.[/en]
       *   [ja][/ja]
       */},{key:"isOpen",value:function(){return this.open}
/**
       * @attribute open
       * @type {Boolean}
       * @description
       *   [en]Returns whether the menu is open or not.[/en]
       *   [ja][/ja]
       */
/**
       * @property open
       * @type {Boolean}
       * @description
       *   [en]Returns whether the menu is open or not.[/en]
       *   [ja][/ja]
       */
/**
       * @method toggle
       * @signature toggle()
       * @description
       *   [en]Toggle visibility.[/en]
       *   [ja]Speed dialの表示非表示を切り替えます。[/ja]
       */},{key:"toggle",value:function(){return this.visible?this.hide():this.show()}
/**
       * @method toggleItems
       * @signature toggleItems()
       * @description
       *   [en]Toggle item visibility.[/en]
       *   [ja]Speed dialの子要素の表示非表示を切り替えます。[/ja]
       */},{key:"toggleItems",value:function(){return this.open?this.hideItems():this.showItems()}}],[{key:"observedAttributes",get:function(){return["class","modifier","ripple","direction","position","open"]}},{key:"events",get:function(){return["open","close"]}}]),o}(),Mi=(b.defineBooleanProperties(t,["open","ripple"]),i.SpeedDial=t,customElements.define("ons-speed-dial",t),{
/**
     * @param {Element} element
     * @param {Function} callback
     */
ready:function(t,e){setImmediate(e)}}),t=function(){d(n,D);var t=f(n);
/**
     * @attribute page
     * @type {String}
     * @description
     *   [en]
     *     The url of the content page. If this attribute is used the content will be loaded from a `<template>` tag or a remote file.
     *
     *     It is also possible to put `<ons-page>` element as a child of the element.
     *   [/en]
     *   [ja]ons-splitter-content要素に表示するページのURLを指定します。[/ja]
     */function n(){var e;return l(this,n),(e=t.call(this))._page=null,e._pageLoader=Re,M(a(e),function(){Mi.ready(a(e),function(){var t=e._getPageTarget();t&&e.load(t)})}),e}return c(n,[{key:"connectedCallback",value:function(){b.match(this.parentNode,"ons-splitter")||b.throw('"ons-splitter-content" must have "ons-splitter" as parent')}},{key:"_getPageTarget",value:function(){return this._page||this.getAttribute("page")}},{key:"disconnectedCallback",value:function(){}},{key:"attributeChangedCallback",value:function(t,e,n){}
/**
       * @property page
       * @type {HTMLElement}
       * @description
       *   [en]The page to load in the splitter content.[/en]
       *   [ja]この要素内に表示するページを指定します。[/ja]
       */},{key:"page",get:function(){return this._page}
/**
       * @param {*} page
       */,set:function(t){this._page=t}},{key:"_content",get:function(){return this.children[0]}
/**
       * @property pageLoader
       * @type {Function}
       * @description
       *   [en]Page element loaded in the splitter content.[/en]
       *   [ja]この要素内に表示するページを指定します。[/ja]
       */},{key:"pageLoader",get:function(){return this._pageLoader},set:function(t){t instanceof Be||b.throwPageLoader(),this._pageLoader=t}
/**
       * @method load
       * @signature load(page, [options])
       * @param {String} page, [options]
       *   [en]Page URL. Can be either an HTML document or an `<template>` id.[/en]
       *   [ja]pageのURLか、`<template>`で宣言したテンプレートのid属性の値を指定します。[/ja]
       * @param {Object} [options]
       * @param {Function} [options.callback]
       * @description
       *   [en]Show the page specified in `page` in the content.[/en]
       *   [ja]指定したURLをメインページを読み込みます。[/ja]
       * @return {Promise}
       *   [en]Resolves to the new `<ons-page>` element[/en]
       *   [ja]`<ons-page>`要素を解決するPromiseオブジェクトを返します。[/ja]
       */},{key:"load",value:function(t){var i=this,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},o=(this._page=t,e.callback||function(){});return new Promise(function(e){var n=i._content||null;i._pageLoader.load({page:t,parent:i},function(t){n&&(i._pageLoader.unload(n),n=null),setImmediate(function(){return i._show()}),o(t),e(t)})})}},{key:"_show",value:function(){this._content&&this._content._show()}},{key:"_hide",value:function(){this._content&&this._content._hide()}},{key:"_destroy",value:function(){this._content&&this._pageLoader.unload(this._content),this.remove()}}],[{key:"observedAttributes",get:function(){return[]}},{key:"rewritables",get:function(){return Mi}}]),n}(),t=(i.SplitterContent=t,customElements.define("ons-splitter-content",t),function(){d(n,D);var e=f(n);function n(){var t;return l(this,n),(t=e.call(this))._boundOnClick=t._onClick.bind(a(t)),M(a(t),function(){t.parentNode._sides.every(function(t){return"split"===t.mode})&&t.setAttribute("style","display: none !important")}),t}return c(n,[{key:"_onClick",value:function(t){this.onClick instanceof Function?this.onClick():b.match(this.parentNode,"ons-splitter")&&this.parentNode._sides.forEach(function(t){return t.close("left").catch(function(){})}),t.stopPropagation()}},{key:"attributeChangedCallback",value:function(t,e,n){}},{key:"connectedCallback",value:function(){this.addEventListener("click",this._boundOnClick)}},{key:"disconnectedCallback",value:function(){this.removeEventListener("click",this._boundOnClick)}}],[{key:"observedAttributes",get:function(){return[]}}]),n}()),Ti=(i.SplitterMask=t,customElements.define("ons-splitter-mask",t),function(){d(o,Xe);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"cubic-bezier(.1, .7, .1, 1)":e,n=t.duration,n=void 0===n?.3:n,t=t.delay,t=void 0===t?0:t;return l(this,o),i.call(this,{timing:e,duration:n,delay:t})}return c(o,[{key:"updateOptions",value:function(){b.extend(this,{timing:this.timing,duration:this.duration,delay:this.delay},0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})}
/**
       * @param {Element} sideElement
       */},{key:"activate",value:function(t){var e=this,n=t.parentNode;M(n,function(){e._side=t,e._oppositeSide=n.right!==t&&n.right||n.left!==t&&n.left,e._content=n.content,e._mask=n.mask})}},{key:"deactivate",value:function(){this.clearTransition(),this._mask&&this.clearMask(),this._content=this._side=this._oppositeSide=this._mask=null}},{key:"minus",get:function(){return"right"===this._side.side?"-":""}},{key:"clearTransition",value:function(){var e=this;"side mask content".split(/\s+/).forEach(function(t){return e["_"+t]&&u.clear(e["_"+t],"transform transition")})}},{key:"clearMask",value:function(){
// Check if the other side needs the mask before clearing
this._oppositeSide&&"split"!==this._oppositeSide.mode&&this._oppositeSide.isOpen||(this._mask.style.opacity="",this._mask.style.display="none")}
/**
       * @param {Number} distance
       */},{key:"translate",value:function(t){}
/**
       * @param {Function} done
       */},{key:"open",value:function(t){t()}
/**
       * @param {Function} done
       */},{key:"close",value:function(t){t()}}]),o}()),t=function(){d(e,Ti);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e,[{key:"translate",value:function(t){this._mask.style.display="block",// Avoid content clicks
C(this._side).queue({transform:"translate3d(".concat(this.minus+t,"px, 0, 0)")}).play()}
/**
       * @param {Function} done
       */},{key:"open",value:function(e){C.runAll(C(this._side).wait(this.delay).queue({transform:"translate3d(".concat(this.minus,"100%, 0, 0)")},this.def).queue(function(t){t(),e&&e()}),C(this._mask).wait(this.delay).queue({display:"block"}).queue({opacity:"1"},{duration:this.duration,timing:"linear"}))}
/**
       * @param {Function} done
       */},{key:"close",value:function(e){C.runAll(C(this._side).wait(this.delay).queue({transform:"translate3d(0, 0, 0)"},this.def).queue(function(t){e&&e(),t()}),C(this._mask).wait(this.delay).queue({opacity:"0"},{duration:this.duration,timing:"linear"}).queue({display:"none"}))}}]),e}(),Ii={default:t,overlay:t,push:function(){d(i,Ti);var t=f(i);function i(){return l(this,i),t.apply(this,arguments)}return c(i,[{key:"_getSlidingElements",value:function(){var t=[this._side,this._content];return this._oppositeSide&&"split"===this._oppositeSide.mode&&t.push(this._oppositeSide),t}},{key:"translate",value:function(t){this._slidingElements||(this._slidingElements=this._getSlidingElements()),this._mask.style.display="block",// Avoid content clicks
C(this._slidingElements).queue({transform:"translate3d(".concat(this.minus+t,"px, 0, 0)")}).play()}
/**
       * @param {Function} done
       */},{key:"open",value:function(e){var n=this,t=this._side.offsetWidth;this._slidingElements=this._getSlidingElements(),C.runAll(C(this._slidingElements).wait(this.delay).queue({transform:"translate3d(".concat(this.minus+t,"px, 0, 0)")},this.def).queue(function(t){n._slidingElements=null,t(),e&&e()}),C(this._mask).wait(this.delay).queue({display:"block"}))}
/**
       * @param {Function} done
       */},{key:"close",value:function(e){var n=this;this._slidingElements=this._getSlidingElements(),C.runAll(C(this._slidingElements).wait(this.delay).queue({transform:"translate3d(0, 0, 0)"},this.def).queue(function(t){n._slidingElements=null,p(h(i.prototype),"clearTransition",n).call(n),e&&e(),t()}),C(this._mask).wait(this.delay).queue({display:"none"}))}}]),i}(),reveal:function(){d(e,Ti);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e,[{key:"_getSlidingElements",value:function(){var t=[this._content,this._mask];return this._oppositeSide&&"split"===this._oppositeSide.mode&&t.push(this._oppositeSide),t}},{key:"activate",value:function(t){p(h(e.prototype),"activate",this).call(this,t),"collapse"===t.mode&&this._setStyles(t)}},{key:"deactivate",value:function(){this._side&&this._unsetStyles(this._side),p(h(e.prototype),"deactivate",this).call(this)}},{key:"_setStyles",value:function(t){u(t,{left:"right"===t.side?"auto":0,right:"right"===t.side?0:"auto",zIndex:0,backgroundColor:"black",transform:this._generateBehindPageStyle(0).container.transform,display:"none"});var e=t.parentElement;M(e,function(){return e.content&&u(e.content,{boxShadow:"0 0 12px 0 rgba(0, 0, 0, 0.2)"})})}},{key:"_unsetStyles",value:function(t){u.clear(t,"left right zIndex backgroundColor display"),t._content&&(t._content.style.opacity=""),
// Check if the other side needs the common styles
this._oppositeSide&&"split"!==this._oppositeSide.mode||t.parentElement.content&&u.clear(t.parentElement.content,"boxShadow")}},{key:"_generateBehindPageStyle",value:function(t){var e=this.maxWidth,t=(t-e)/e*10;return{content:{opacity:1+(t=isNaN(t)?0:Math.max(Math.min(t,0),-10))/100},container:{transform:"translate3d(".concat((this.minus?-1:1)*t,"%, 0, 0)")}}}},{key:"translate",value:function(t){this._side.style.display="",this._side.style.zIndex=1,this.maxWidth=this.maxWidth||this._getMaxWidth();var e=this._generateBehindPageStyle(Math.min(t,this.maxWidth));this._slidingElements||(this._slidingElements=this._getSlidingElements()),this._mask.style.display="block",// Avoid content clicks
C.runAll(C(this._slidingElements).queue({transform:"translate3d(".concat(this.minus+t,"px, 0, 0)")}),C(this._side._content).queue(e.content),C(this._side).queue(e.container))}
/**
       * @param {Function} done
       */},{key:"open",value:function(e){var n=this,t=(this._side.style.display="",this._side.style.zIndex=1,this.maxWidth=this.maxWidth||this._getMaxWidth(),this._generateBehindPageStyle(this.maxWidth));this._slidingElements=this._getSlidingElements(),setTimeout(function(){
// Fix: Time to update previous translate3d after changing style.display
C.runAll(C(n._slidingElements).wait(n.delay).queue({transform:"translate3d(".concat(n.minus+n.maxWidth,"px, 0, 0)")},n.def),C(n._mask).wait(n.delay).queue({display:"block"}),C(n._side._content).wait(n.delay).queue(t.content,n.def),C(n._side).wait(n.delay).queue(t.container,n.def).queue(function(t){n._slidingElements=null,t(),e&&e()}))},1e3/60)}
/**
       * @param {Function} done
       */},{key:"close",value:function(e){var n=this,t=this._generateBehindPageStyle(0);this._slidingElements=this._getSlidingElements(),C.runAll(C(this._slidingElements).wait(this.delay).queue({transform:"translate3d(0, 0, 0)"},this.def),C(this._mask).wait(this.delay).queue({display:"none"}),C(this._side._content).wait(this.delay).queue(t.content,this.def),C(this._side).wait(this.delay).queue(t.container,this.def).queue(function(t){n._slidingElements=null,n._side.style.zIndex=0,n._side.style.display="none",n._side._content.style.opacity="",e&&e(),t()}))}},{key:"_getMaxWidth",value:function(){return this._side.offsetWidth}}]),e}()},Di=function(){d(n,D);var e=f(n);function n(){var t;return l(this,n),(t=e.call(this))._onModeChange=t._onModeChange.bind(a(t)),M(a(t),function(){t.mask||t.appendChild(document.createElement("ons-splitter-mask")),t._layout()}),t}return c(n,[{key:"_getSide",value:function(e){return b.findChild(this,function(t){return b.match(t,"ons-splitter-side")&&t.getAttribute("side")===e})}
/**
       * @property left
       * @readonly
       * @type {HTMLElement}
       * @description
       *   [en]Left `<ons-splitter-side>` element.[/en]
       *   [ja][/ja]
       */},{key:"left",get:function(){return this._getSide("left")}
/**
       * @property right
       * @readonly
       * @type {HTMLElement}
       * @description
       *   [en]Right `<ons-splitter-side>` element.[/en]
       *   [ja][/ja]
       */},{key:"right",get:function(){return this._getSide("right")}
/**
       * @property side
       * @readonly
       * @type {HTMLElement}
       * @description
       *   [en]First `<ons-splitter-side>` element regardless the actual side.[/en]
       *   [ja][/ja]
       */},{key:"side",get:function(){return b.findChild(this,"ons-splitter-side")}},{key:"_sides",get:function(){return[this.left,this.right].filter(function(t){return t})}
/**
       * @property content
       * @readonly
       * @type {HTMLElement}
       * @description
       *   [en]The `<ons-splitter-content>` element.[/en]
       *   [ja][/ja]
       */},{key:"content",get:function(){return b.findChild(this,"ons-splitter-content")}},{key:"topPage",get:function(){return this.content._content}},{key:"mask",get:function(){return b.findChild(this,"ons-splitter-mask")}
/**
       * @property onDeviceBackButton
       * @type {Object}
       * @description
       *   [en]Back-button handler.[/en]
       *   [ja]バックボタンハンドラ。[/ja]
       */},{key:"onDeviceBackButton",get:function(){return this._backButtonHandler},set:function(t){this._backButtonHandler&&this._backButtonHandler.destroy(),this._backButtonHandler=$t.createHandler(this,t)}},{key:"_onDeviceBackButton",value:function(t){this._sides.some(function(t){return!!t.isOpen&&t.close()})||t.callParentHandler()}},{key:"_onModeChange",value:function(t){var e=this;t.target.parentNode&&M(this,function(){e._layout()})}},{key:"_layout",value:function(){var e=this;this._sides.forEach(function(t){e.content&&(e.content.style[t.side]="split"===t.mode?t.style.width:0)})}},{key:"connectedCallback",value:function(){this.onDeviceBackButton=this._onDeviceBackButton.bind(this),this.addEventListener("modechange",this._onModeChange,!1)}},{key:"disconnectedCallback",value:function(){this._backButtonHandler.destroy(),this._backButtonHandler=null,this.removeEventListener("modechange",this._onModeChange,!1)}},{key:"attributeChangedCallback",value:function(t,e,n){}},{key:"_show",value:function(){b.propagateAction(this,"_show")}},{key:"_hide",value:function(){b.propagateAction(this,"_hide")}},{key:"_destroy",value:function(){b.propagateAction(this,"_destroy"),this.remove()}}],[{key:"registerAnimator",value:function(t,e){e instanceof SplitterAnimator||b.throwAnimator("Splitter"),Ii[t]=e}},{key:"SplitterAnimator",get:function(){return SplitterAnimator}},{key:"animators",get:function(){return Ii}}]),n}(),Ni=(i.Splitter=Di,customElements.define("ons-splitter",Di),"split"),Bi="collapse",Ri="closed",Hi="changing",qi={
/**
     * @param {Element} splitterSideElement
     * @param {Function} callback
     */
ready:function(t,e){setImmediate(e)}},zi=function(){function n(t,e){l(this,n),this._element=t,this._onChange=this._onChange.bind(this),e&&this.changeTarget(e)}return c(n,[{key:"changeTarget",value:function(t){this.disable(),(this._target=t)&&(this._orientation=-1!==["portrait","landscape"].indexOf(t),this.activate())}},{key:"_match",value:function(t){return this._orientation?this._target===(t.isPortrait?"portrait":"landscape"):t.matches}},{key:"_onChange",value:function(t){this._element._updateMode(this._match(t)?Bi:Ni)}},{key:"activate",value:function(){this._orientation?(Pe.on("change",this._onChange),this._onChange({isPortrait:Pe.isPortrait()})):(this._queryResult=window.matchMedia(this._target),this._queryResult.addListener(this._onChange),this._onChange(this._queryResult))}},{key:"disable",value:function(){this._orientation?Pe.off("change",this._onChange):this._queryResult&&(this._queryResult.removeListener(this._onChange),this._queryResult=null)}}]),n}(),t=function(){d(n,D);var t=f(n);
/**
     * @event modechange
     * @description
     *   [en]Fired just after the component's mode changes.[/en]
     *   [ja]この要素のモードが変化した際に発火します。[/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクトです。[/ja]
     * @param {Object} event.side
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     * @param {String} event.mode
     *   [en]Returns the current mode. Can be either `"collapse"` or `"split"`.[/en]
     *   [ja]現在のモードを返します。[/ja]
     */
/**
     * @event preopen
     * @description
     *   [en]Fired just before the sliding menu is opened.[/en]
     *   [ja]スライディングメニューが開く前に発火します。[/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクトです。[/ja]
     * @param {Function} event.cancel
     *   [en]Call to cancel opening sliding menu.[/en]
     *   [ja]スライディングメニューが開くのをキャンセルします。[/ja]
     * @param {Object} event.side
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     */
/**
     * @event postopen
     * @description
     *   [en]Fired just after the sliding menu is opened.[/en]
     *   [ja]スライディングメニューが開いた後に発火します。[/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクトです。[/ja]
     * @param {Object} event.side
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     */
/**
     * @event preclose
     * @description
     *   [en]Fired just before the sliding menu is closed.[/en]
     *   [ja]スライディングメニューが閉じる前に発火します。[/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクトです。[/ja]
     * @param {Object} event.side
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Call to cancel opening sliding-menu.[/en]
     *   [ja]スライディングメニューが閉じるのをキャンセルします。[/ja]
     */
/**
     * @event postclose
     * @description
     *   [en]Fired just after the sliding menu is closed.[/en]
     *   [ja]スライディングメニューが閉じた後に発火します。[/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクトです。[/ja]
     * @param {Object} event.side
     *   [en]Component object.[/en]
     *   [ja]コンポーネントのオブジェクト。[/ja]
     */
/**
     * @event swipe
     * @description
     *   [en]Fired whenever the user slides the splitter.[/en]
     *   [ja][/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.ratio
     *   [en]Decimal ratio (0-1).[/en]
     *   [ja][/ja]
     * @param {Object} event.animationOptions
     *   [en][/en]
     *   [ja][/ja]
     */
/**
     * @attribute animation
     * @type {String}
     * @default  default
     * @description
     *  [en]Specify the animation. Use one of `overlay`, `push`, `reveal` or  `default`.[/en]
     *  [ja]アニメーションを指定します。"overlay", "push", "reveal", "default"のいずれかを指定できます。[/ja]
     */
/**
     * @attribute animation-options
     * @type {Expression}
     * @description
     *  [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *  [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。e.g. {duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
     */
/**
     * @property animationOptions
     * @type {Object}
     * @description
     *  [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *  [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。e.g. {duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
     */
/**
     * @attribute open-threshold
     * @type {Number}
     * @default  0.3
     * @description
     *  [en]Specify how much the menu needs to be swiped before opening. A value between `0` and `1`.[/en]
     *  [ja]どのくらいスワイプすればスライディングメニューを開くかどうかの割合を指定します。0から1の間の数値を指定します。スワイプの距離がここで指定した数値掛けるこの要素の幅よりも大きければ、スワイプが終わった時にこの要素を開きます。デフォルトは0.3です。[/ja]
     */
/**
     * @attribute collapse
     * @type {String}
     * @description
     *   [en]
     *     Specify the collapse behavior. Valid values are `"portrait"`, `"landscape"` or a media query.
     *     The string `"portrait"` means the view will collapse when the device is in portrait orientation.
     *     The string `"landscape"` means the view will collapse when the device is in landscape orientation.
     *     If the value is a media query, the view will collapse when the media query resolves to `true`.
     *     If the attribute is set, including as an empty string, the view will always be in `"collapse"` mode.
     *     If the attribute is not set, the view will be in `"split"` mode.
     *   [/en]
     *   [ja]
     *     左側のページを非表示にする条件を指定します。portrait, landscape、width #pxもしくはメディアクエリの指定が可能です。
     *     portraitもしくはlandscapeを指定すると、デバイスの画面が縦向きもしくは横向きになった時に適用されます。
     *     メディアクエリを指定すると、指定したクエリに適合している場合に適用されます。
     *     値に何も指定しない場合には、常にcollapseモードになります。
     *   [/ja]
     */
/**
     * @attribute swipe-target-width
     * @type {String}
     * @description
     *   [en]The width of swipeable area calculated from the edge (in pixels). Use this to enable swipe only when the finger touch on the screen edge.[/en]
     *   [ja]スワイプの判定領域をピクセル単位で指定します。画面の端から指定した距離に達するとページが表示されます。[/ja]
     */
/**
     * @attribute width
     * @type {String}
     * @description
     *   [en]Can be specified in either pixels or as a percentage, e.g. `90%` or `200px`.[/en]
     *   [ja]この要素の横幅を指定します。pxと%での指定が可能です。eg. 90%, 200px[/ja]
     */
/**
     * @attribute side
     * @type {String}
     * @default left
     * @description
     *   [en]Specify which side of the screen the `<ons-splitter-side>` element is located. Possible values are `"left"` and `"right"`.[/en]
     *   [ja]この要素が左か右かを指定します。指定できる値は"left"か"right"のみです。[/ja]
     */
/**
     * @attribute mode
     * @type {String}
     * @description
     *   [en]Current mode. Possible values are `"collapse"` or `"split"`. This attribute is read only.[/en]
     *   [ja]現在のモードが設定されます。"collapse"もしくは"split"が指定されます。この属性は読み込み専用です。[/ja]
     */
/**
     * @attribute page
     * @initonly
     * @type {String}
     * @description
     *   [en]The URL of the menu page.[/en]
     *   [ja]ons-splitter-side要素に表示するページのURLを指定します。[/ja]
     */
/**
     * @attribute swipeable
     * @type {Boolean}
     * @description
     *   [en]Whether to enable swipe interaction on collapse mode.[/en]
     *   [ja]collapseモード時にスワイプ操作を有効にする場合に指定します。[/ja]
     */
/**
     * @property swipeable
     * @type {Boolean}
     * @description
     *   [en]Whether to enable swipe interaction on collapse mode.[/en]
     *   [ja]collapseモード時にスワイプ操作を有効にする場合に指定します。[/ja]
     */function n(){var e;return l(this,n),(e=t.call(this))._page=null,e._state=Ri,e._lock=new Me,e._pageLoader=Re,e._collapseDetection=new zi(a(e)),e._animatorFactory=new w({animators:Di.animators,baseClass:Ti,baseClassName:"SplitterAnimator",defaultAnimation:e.getAttribute("animation")}),M(a(e),function(){
// These attributes are used early by the parent element
e.attributeChangedCallback("width"),e.hasAttribute("side")||e.setAttribute("side","left"),qi.ready(a(e),function(){var t=e._page||e.getAttribute("page");t&&e.load(t)})}),e}return c(n,[{key:"connectedCallback",value:function(){var o=this;b.match(this.parentNode,"ons-splitter")||b.throw("Parent must be an ons-splitter element"),this._swipe||(this._swipe=new Vn({element:this,elementHandler:this.parentElement,swipeMax:function(){o._onSwipe&&o._onSwipe(1,o._animationOpt),b.triggerElementEvent(o,"swipe",{ratio:1,animationOptions:o._animationOpt}),o.open()},swipeMid:function(t,e){e=t/e;o._onSwipe&&o._onSwipe(e),b.triggerElementEvent(o,"swipe",{ratio:e}),o._animator.translate(t)},swipeMin:function(){o._onSwipe&&o._onSwipe(0,o._animationOpt),b.triggerElementEvent(o,"swipe",{ratio:0,animationOptions:o._animationOpt}),o.close()},getThreshold:function(){return Math.max(0,Math.min(1,parseFloat(o.getAttribute("open-threshold"))||.3))},getSide:function(){return o.side},isInitialState:function(){var t=o._state===Ri;return o._state=Hi,t},ignoreSwipe:function(t,e){var n=o.isOpen,i=Math.max(0,parseInt(o.getAttribute("swipe-target-width"),10)||0);return o._mode===Ni||o._lock.isLocked()||o._isOtherSideOpen()||(t=t.gesture.direction,!("left"===o.side?"left"===t&&n||"right"===t&&!n:"left"===t&&!n||"right"===t&&n))||!n&&0!==i&&i<e}}),this.attributeChangedCallback("swipeable")),M(this,function(){o.constructor.observedAttributes.forEach(function(t){return o.attributeChangedCallback(t,null,o.getAttribute(t))})})}},{key:"side",get:function(){return"right"===this.getAttribute("side")?"right":"left"},set:function(t){t?this.setAttribute("side",t):tihs.removeAttribute("side")}},{key:"disconnectedCallback",value:function(){this._swipe&&this._swipe.dispose(),this._animator=this._animationOpt=this._swipe=null}},{key:"attributeChangedCallback",value:function(t,e,n){switch(t){case"swipeable":this._swipe&&this._swipe.update();break;case"width":n=this.getAttribute("width"),// Sometimes undefined. CE bug?
this.style.width=/^\d+(px|%)$/.test(n)?n:"80%";break;case"animation":case"animation-options":this._updateAnimation();break;default:this[b.camelize("_update-".concat(t))](n)}}},{key:"_emitEvent",value:function(t){var e;return"pre"!==t.slice(0,3)?b.triggerElementEvent(this,t,{side:this}):(e=!1,b.triggerElementEvent(this,t,{side:this,cancel:function(){return e=!0}}),e)}},{key:"_isOtherSideOpen",value:function(){var e=this;return!!b.findChild(this.parentElement,function(t){return t instanceof e.constructor&&t!==e&&t._mode===Bi&&t.isOpen})}},{key:"_updateCollapse",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.getAttribute("collapse");return null===t||"split"===t?(this._collapseDetection.disable(),this._updateMode(Ni)):""===t||"collapse"===t?(this._collapseDetection.disable(),this._updateMode(Bi)):void this._collapseDetection.changeTarget(t)}},{key:"_updateMode",value:function(t){t!==this._mode&&(this._mode=t,this.setAttribute("mode",t),// readonly attribute for the users
t===Ni?(this._animator&&this._animator.deactivate(),this._state=Ri):(this._animator&&this._animator.activate(this),"open"===this._state&&this._animator.open()),b.triggerElementEvent(this,"modechange",{side:this,mode:t}))}},{key:"_updateAnimation",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.getAttribute("animation");this.parentNode&&(this._animator&&this._animator.deactivate(),this._animator=this._animatorFactory.newAnimator({animation:t}),this._animator.activate(this),this._animationOpt={timing:this._animator.duration,duration:this._animator.duration},this._animator.updateOptions(this.animationOptions))}
/**
       * @property page
       * @type {*}
       * @description
       *   [en]Page location to load in the splitter side.[/en]
       *   [ja]この要素内に表示するページを指定します。[/ja]
       */},{key:"page",get:function(){return this._page}
/**
       * @param {*} page
       */,set:function(t){this._page=t}},{key:"_content",get:function(){return this.children[0]}
/**
       * @property pageLoader
       * @description
       *   [en][/en]
       *   [ja][/ja]
       */},{key:"pageLoader",get:function(){return this._pageLoader},set:function(t){t instanceof Be||b.throwPageLoader(),this._pageLoader=t}
/**
       * @property mode
       * @readonly
       * @type {String}
       * @description
       *   [en]Current mode. Possible values are "split", "collapse", "closed", "open" or "changing".[/en]
       *   [ja][/ja]
       */},{key:"mode",get:function(){return this._mode}
/**
       * @property onSwipe
       * @type {Function}
       * @description
       *   [en]Hook called whenever the user slides the splitter. It gets a decimal ratio (0-1) and an animationOptions object as arguments.[/en]
       *   [ja][/ja]
       */},{key:"onSwipe",get:function(){return this._onSwipe},set:function(t){!t||t instanceof Function||b.throw('"onSwipe" must be a function'),this._onSwipe=t}},{key:"animationOptions",get:function(){return this.hasAttribute("animation-options")?w.parseAnimationOptionsString(this.getAttribute("animation-options")):{}},set:function(t){null==t?this.removeAttribute("animation-options"):this.setAttribute("animation-options",JSON.stringify(t))}
/**
       * @property isOpen
       * @type {Boolean}
       * @description
       *   [en]Specifies whether the menu is opened.[/en]
       *   [ja][/ja]
       */},{key:"isOpen",get:function(){return this._mode===Bi&&this._state!==Ri},set:function(t){this.toggle({},t)}
/**
       * @method open
       * @signature open([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {Function} [options.callback]
       *   [en]This function will be called after the menu has been opened.[/en]
       *   [ja]メニューが開いた後に呼び出される関数オブジェクトを指定します。[/ja]
       * @description
       *   [en]Open menu in collapse mode.[/en]
       *   [ja]collapseモードになっているons-splitter-side要素を開きます。[/ja]
       * @return {Promise}
       *   [en]Resolves to the splitter side element or false if not in collapse mode[/en]
       *   [ja][/ja]
       */},{key:"open",value:function(t){return this.toggle(t,!0)}
/**
       * @method close
       * @signature close([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {Function} [options.callback]
       *   [en]This function will be called after the menu has been closed.[/en]
       *   [ja]メニューが閉じた後に呼び出される関数オブジェクトを指定します。[/ja]
       * @description
       *   [en]Close menu in collapse mode.[/en]
       *   [ja]collapseモードになっているons-splitter-side要素を閉じます。[/ja]
       * @return {Promise}
       *   [en]Resolves to the splitter side element or false if not in collapse mode[/en]
       *   [ja][/ja]
       */},{key:"close",value:function(t){return this.toggle(t,!1)}
/**
       * @method toggle
       * @signature toggle([options])
       * @param {Object} [options]
       * @description
       *   [en]Opens if it's closed. Closes if it's open.[/en]
       *   [ja]開けている場合は要素を閉じますそして開けている場合は要素を開きます。[/ja]
       * @return {Promise}
       *   [en]Resolves to the splitter side element or false if not in collapse mode[/en]
       *   [ja][/ja]
       */},{key:"toggle",value:function(){var e,n=this,i=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=1<arguments.length?arguments[1]:void 0,o="boolean"==typeof t?t:!this.isOpen,a=o?"open":"close",r=o?"open":Ri;return this._mode===Ni?Promise.resolve(!1):this._state===r?Promise.resolve(this):this._lock.isLocked()?Promise.reject("Another splitter-side action is already running."):o&&this._isOtherSideOpen()?Promise.reject("Another menu is already open."):this._emitEvent("pre".concat(a))?Promise.reject("Canceled in pre".concat(a," event.")):(e=this._lock.lock(),this._state=Hi,i.animation&&this._updateAnimation(i.animation),new Promise(function(t){n._animator[a](function(){b.iosPageScrollFix(o),n._state=r,e(),n._emitEvent("post".concat(a)),i.callback instanceof Function&&i.callback(n),t(n)})}))}
/**
       * @method load
       * @signature load(page, [options])
       * @param {String} page
       *   [en]Page URL. Can be either an HTML document or a `<template>`.[/en]
       *   [ja]pageのURLか、`<template>`で宣言したテンプレートのid属性の値を指定します。[/ja]
       * @param {Object} [options]
       * @param {Function} [options.callback]
       * @description
       *   [en]Show the page specified in pageUrl in the right section[/en]
       *   [ja]指定したURLをメインページを読み込みます。[/ja]
       * @return {Promise}
       *   [en]Resolves to the new page element[/en]
       *   [ja][/ja]
       */},{key:"load",value:function(t){var i=this,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},o=(this._page=t,e.callback||function(){});return new Promise(function(e){var n=i._content||null;i._pageLoader.load({page:t,parent:i},function(t){n&&(i._pageLoader.unload(n),n=null),setImmediate(function(){return i._show()}),o(t),e(t)})})}},{key:"_show",value:function(){this._content&&this._content._show()}},{key:"_hide",value:function(){this._content&&this._content._hide()}},{key:"_destroy",value:function(){this._content&&this._pageLoader.unload(this._content),this.remove()}}],[{key:"observedAttributes",get:function(){return["animation","width","collapse","swipeable","animation-options"]}},{key:"events",get:function(){return["preopen","postopen","preclose","postclose","modechange","swipe"]}},{key:"rewritables",get:function(){return qi}}]),n}(),Fi=(b.defineBooleanProperties(t,["swipeable"]),i.SplitterSide=t,customElements.define("ons-splitter-side",t),{"":"switch--*",".switch__input":"switch--*__input",".switch__handle":"switch--*__handle",".switch__toggle":"switch--*__toggle"}),ji={ios:[1,21],material:[0,16]},t=function(){d(o,Bn);var e=f(o);function o(){var t;return l(this,o),M(a(t=e.call(this)),function(){t.attributeChangedCallback("modifier",null,t.getAttribute("modifier"))}),t._onChange=t._onChange.bind(a(t)),t._onRelease=t._onRelease.bind(a(t)),t._lastTimeStamp=0,t}return c(o,[{key:"_scheme",get:function(){return Fi}},{key:"_defaultClassName",get:function(){return"switch"}},{key:"_template",get:function(){return'\n      <input type="'.concat(this.type,'" class="').concat(this._defaultClassName,'__input">\n      <div class="').concat(this._defaultClassName,'__toggle">\n        <div class="').concat(this._defaultClassName,'__handle">\n          <div class="').concat(this._defaultClassName,'__touch"></div>\n        </div>\n      </div>\n    ')}},{key:"type",get:function(){return"checkbox"}
/* Own props */},{key:"_getPosition",value:function(t){var e=this._locations;return Math.min(e[1],Math.max(e[0],this._startX+t.gesture.deltaX))}},{key:"_emitChangeEvent",value:function(){b.triggerElementEvent(this,"change",{value:this.checked,switch:this,isInteractive:!0})}},{key:"_onChange",value:function(t){t&&t.stopPropagation&&t.stopPropagation(),this._emitChangeEvent()}},{key:"_onClick",value:function(t){(t.target.classList.contains("".concat(this.defaultElementClass,"__touch"))||t.timeStamp-this._lastTimeStamp<50)&&t.preventDefault(),this._lastTimeStamp=t.timeStamp}},{key:"_onHold",value:function(t){this.disabled||(v.addModifier(this,"active"),document.addEventListener("release",this._onRelease))}},{key:"_onDragStart",value:function(t){this.disabled||-1===["left","right"].indexOf(t.gesture.direction)?v.removeModifier(this,"active"):(t.consumed=!0,v.addModifier(this,"active"),this._startX=this._locations[this.checked?1:0],// - e.gesture.deltaX;
this.addEventListener("drag",this._onDrag),document.addEventListener("release",this._onRelease))}},{key:"_onDrag",value:function(t){t.stopPropagation(),this._handle.style.left=this._getPosition(t)+"px"}},{key:"_onRelease",value:function(t){var e=this._locations,t=this._getPosition(t),n=this.checked;this.checked=t>=(e[0]+e[1])/2,this.checked!==n&&this._emitChangeEvent(),this.removeEventListener("drag",this._onDrag),document.removeEventListener("release",this._onRelease),this._handle.style.left="",v.removeModifier(this,"active")}},{key:"click",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};this.disabled||(this.checked=!this.checked,this._emitChangeEvent(),this._lastTimeStamp=t.timeStamp||0)}},{key:"_handle",get:function(){return this.querySelector(".".concat(this._defaultClassName,"__handle"))}},{key:"checkbox",get:function(){return this._input}},{key:"connectedCallback",value:function(){var t=this;M(this,function(){t._input.addEventListener("change",t._onChange)}),this.addEventListener("dragstart",this._onDragStart),this.addEventListener("hold",this._onHold),this.addEventListener("tap",this.click),this.addEventListener("click",this._onClick),this._gestureDetector=new A(this,{dragMinDistance:1,holdTimeout:251,passive:!0})}},{key:"disconnectedCallback",value:function(){var t=this;M(this,function(){t._input.removeEventListener("change",t._onChange)}),this.removeEventListener("dragstart",this._onDragStart),this.removeEventListener("hold",this._onHold),this.removeEventListener("tap",this.click),this.removeEventListener("click",this._onClick),this._gestureDetector&&this._gestureDetector.dispose()}},{key:"attributeChangedCallback",value:function(t,e,n){var i;"modifier"===t&&(i=-1!==(n||"").indexOf("material"),this._locations=ji[i?"material":"ios"]),p(h(o.prototype),"attributeChangedCallback",this).call(this,t,e,n)}
/**
       * @event change
       * @description
       *   [en]Fired when the switch is toggled.[/en]
       *   [ja]ON/OFFが変わった時に発火します。[/ja]
       * @param {Object} event
       *   [en]Event object.[/en]
       *   [ja]イベントオブジェクト。[/ja]
       * @param {Object} event.switch
       *   [en]Switch object.[/en]
       *   [ja]イベントが発火したSwitchオブジェクトを返します。[/ja]
       * @param {Boolean} event.value
       *   [en]Current value.[/en]
       *   [ja]現在の値を返します。[/ja]
       * @param {Boolean} event.isInteractive
       *   [en]True if the change was triggered by the user clicking on the switch.[/en]
       *   [ja]タップやクリックなどのユーザの操作によって変わった場合にはtrueを返します。[/ja]
       */
/**
       * @attribute modifier
       * @type {String}
       * @description
       *  [en]The appearance of the switch.[/en]
       *  [ja]スイッチの表現を指定します。[/ja]
       */
/**
       * @attribute disabled
       * @description
       *   [en]Whether the switch is be disabled.[/en]
       *   [ja]スイッチを無効の状態にする場合に指定します。[/ja]
       */
/**
       * @attribute checked
       * @description
       *   [en]Whether the switch is checked.[/en]
       *   [ja]スイッチがONの状態にするときに指定します。[/ja]
       */
/**
       * @attribute input-id
       * @type {String}
       * @description
       *   [en]Specify the `id` attribute of the inner `<input>` element. This is useful when using `<label for="...">` elements.[/en]
       *   [ja][/ja]
       */
/**
       * @property checked
       * @type {Boolean}
       * @description
       *   [en]This value is `true` if the switch is checked.[/en]
       *   [ja]スイッチがONの場合に`true`。[/ja]
       */
/**
       * @property value
       * @type {String}
       * @description
       *   [en]The current value of the input.[/en]
       *   [ja][/ja]
       */
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the element is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
/**
       * @property checkbox
       * @readonly
       * @type {HTMLElement}
       * @description
       *   [en]The underlying checkbox element.[/en]
       *   [ja]コンポーネント内部のcheckbox要素になります。[/ja]
       */
/**
       * @method focus
       * @signature focus()
       * @description
       *   [en]Focuses the switch.[/en]
       *   [ja][/ja]
       */
/**
       * @method blur
       * @signature blur()
       * @description
       *   [en]Removes focus from the switch.[/en]
       *   [ja][/ja]
       */}],[{key:"observedAttributes",get:function(){return[].concat(m(p(h(o),"observedAttributes",this)),["modifier"])}}]),o}(),Vi=(i.Switch=t,customElements.define("ons-switch",t),{".tabbar__content":"tabbar--*__content",".tabbar__border":"tabbar--*__border",".tabbar":"tabbar--*"}),Wi={
/**
     * @param {Element} tabbarElement
     * @param {Function} callback
     */
ready:function(t,e){e()}},Xi=(k.nullElement,function(){d(o,D);var i=f(o);
/**
     * @event prechange
     * @description
     *   [en]Fires just before the tab is changed.[/en]
     *   [ja]アクティブなタブが変わる前に発火します。[/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクト。[/ja]
     * @param {Number} event.index
     *   [en]Current index.[/en]
     *   [ja]現在アクティブになっているons-tabのインデックスを返します。[/ja]
     * @param {Object} event.tabItem
     *   [en]Tab item object.[/en]
     *   [ja]tabItemオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Call this function to cancel the change event.[/en]
     *   [ja]この関数を呼び出すと、アクティブなタブの変更がキャンセルされます。[/ja]
     */
/**
     * @event postchange
     * @description
     *   [en]Fires just after the tab is changed.[/en]
     *   [ja]アクティブなタブが変わった後に発火します。[/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクト。[/ja]
     * @param {Number} event.index
     *   [en]Current index.[/en]
     *   [ja]現在アクティブになっているons-tabのインデックスを返します。[/ja]
     * @param {Object} event.tabItem
     *   [en]Tab item object.[/en]
     *   [ja]tabItemオブジェクト。[/ja]
     */
/**
     * @event reactive
     * @description
     *   [en]Fires if the already open tab is tapped again.[/en]
     *   [ja]すでにアクティブになっているタブがもう一度タップやクリックされた場合に発火します。[/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクト。[/ja]
     * @param {Number} event.index
     *   [en]Current index.[/en]
     *   [ja]現在アクティブになっているons-tabのインデックスを返します。[/ja]
     * @param {Object} event.tabItem
     *   [en]Tab item object.[/en]
     *   [ja]tabItemオブジェクト。[/ja]
     */
/**
     * @event swipe
     * @description
     *   [en]Fires when the tabbar swipes.[/en]
     *   [ja][/ja]
     * @param {Object} event
     *   [en]Event object.[/en]
     *   [ja]イベントオブジェクト。[/ja]
     * @param {Number} event.index
     *   [en]Current index.[/en]
     *   [ja]現在アクティブになっているons-tabのインデックスを返します。[/ja]
     * @param {Object} event.options
     *   [en]Animation options object.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute animation
     * @type {String}
     * @default none
     * @description
     *   [en]If this attribute is set to `"none"` the transitions will not be animated.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute animation-options
     * @type {Expression}
     * @description
     *  [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *  [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。e.g. {duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
     */
/**
     * @property animationOptions
     * @type {Object}
     * @description
     *  [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *  [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。e.g. {duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
     */
/**
     * @attribute position
     * @initonly
     * @type {String}
     * @default bottom
     * @description
     *   [en]Tabbar's position. Available values are `"bottom"` and `"top"`. Use `"auto"` to choose position depending on platform (bottom for iOS flat design, top for Material Design).[/en]
     *   [ja]タブバーの位置を指定します。"bottom"もしくは"top"を選択できます。デフォルトは"bottom"です。[/ja]
     */
/**
     * @attribute swipeable
     * @description
     *   [en]If this attribute is set the tab bar can be scrolled by drag or swipe.[/en]
     *   [ja]この属性がある時、タブバーをスワイプやドラッグで移動できるようになります。[/ja]
     */
/**
     * @attribute ignore-edge-width
     * @type {Number}
     * @default 20
     * @description
     *   [en]Distance in pixels from both edges. Swiping on these areas will prioritize parent components such as `ons-splitter` or `ons-navigator`.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute active-index
     * @type {Number}
     * @default 0
     * @description
     *   [en]The index of the tab that is currently active.[/en]
     *   [ja][/ja]
     */
/**
     * @property activeIndex
     * @type {Number}
     * @default 0
     * @description
     *   [en]The index of the tab that is currently active.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute hide-tabs
     * @description
     *   [en]Whether to hide the tabs.[/en]
     *   [ja]タブを非表示にする場合に指定します。[/ja]
     */
/**
     * @property hideTabs
     * @description
     *   [en]Whether to hide the tabs.[/en]
     *   [ja]タブを非表示にする場合に指定します。[/ja]
     */
/**
     * @attribute tab-border
     * @description
     *   [en]If this attribute is set the tabs show a dynamic bottom border. Only works for iOS flat design since the border is always visible in Material Design.[/en]
     *   [ja][/ja]
     */
/**
     * @property tabBorder
     * @type {Boolean}
     * @description
     *   [en]If this property is set the tabs show a dynamic bottom border. Only works for iOS flat design since the border is always visible in Material Design.[/en]
     *   [ja][/ja]
     */
/**
     * @attribute modifier
     * @type {String}
     * @description
     *   [en]The appearance of the tabbar.[/en]
     *   [ja]タブバーの表現を指定します。[/ja]
     */function o(){l(this,o),(t=i.call(this))._loadInactive=b.defer(),// Improves #2324
M(a(t),function(){return t._compile()});var t,e=b.defineListenerProperty(a(t),"swipe"),n=e.onConnected,e=e.onDisconnected;return t._connectOnSwipe=n,t._disconnectOnSwipe=e,t}return c(o,[{key:"connectedCallback",value:function(){var t=this;this._swiper||(this._swiper=new pn({getElement:function(){return t._contentElement},getInitialIndex:function(){return t.activeIndex||t.getAttribute("activeIndex")},getAutoScrollRatio:this._getAutoScrollRatio.bind(this),getBubbleWidth:function(){return parseInt(t.getAttribute("ignore-edge-width")||25,10)},isAutoScrollable:function(){return!0},preChangeHook:this._onPreChange.bind(this),postChangeHook:this._onPostChange.bind(this),refreshHook:this._onRefresh.bind(this),scrollHook:this._onScroll.bind(this)}),M(this,function(){t._tabbarBorder=b.findChild(t._tabbarElement,".tabbar__border"),t._swiper.init({swipeable:t.hasAttribute("swipeable")})})),M(this,function(){t._updatePosition(),t._updateVisibility(),b.findParent(t,"ons-page",function(t){return t===document.body})||t._show()}),this._connectOnSwipe()}},{key:"disconnectedCallback",value:function(){this._swiper&&this._swiper.initialized&&(this._swiper.dispose(),this._swiper=null,this._tabbarBorder=null,this._tabsRect=null),this._disconnectOnSwipe()}},{key:"_normalizeEvent",value:function(t){return s(s({},t),{},{index:t.activeIndex,tabItem:this.tabs[t.activeIndex]})}},{key:"_onPostChange",value:function(t){t=this._normalizeEvent(t),b.triggerElementEvent(this,"postchange",t);t=t.tabItem.pageElement;t&&t._show()}},{key:"_onPreChange",value:function(t){var e,n,i;return(t=this._normalizeEvent(t)).cancel=function(){return t.canceled=!0},b.triggerElementEvent(this,"prechange",t),t.canceled||(i=(e=t).activeIndex,e=e.lastActiveIndex,(n=this.tabs)[i].setActive(!0),0<=e&&((i=n[e]).setActive(!1),i.pageElement)&&i.pageElement._hide()),t.canceled}},{key:"_onScroll",value:function(t){var e,n,i,o=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};this._tabbarBorder&&(this._tabbarBorder.style.transition="all ".concat(o.duration||0,"s ").concat(o.timing||""),this._autogrow&&0<this._tabsRect.length?(e=Math.floor(t),n=Math.ceil(t),this._tabbarBorder.style.width=Ve(this._tabsRect[e].width,this._tabsRect[n].width,i=t%1)+"px",this._tabbarBorder.style.transform="translate3d(".concat(Ve(this._tabsRect[e].left,this._tabsRect[n].left,i),"px, 0, 0)")):this._tabbarBorder.style.transform="translate3d(".concat(100*t,"%, 0, 0)")),b.triggerElementEvent(this,"swipe",{index:t,options:o})}},{key:"_onRefresh",value:function(){var t;this._autogrow=b.hasModifier(this,"autogrow"),this._tabsRect=this.tabs.map(function(t){return t.getBoundingClientRect()}),this._tabbarBorder&&(this._tabbarBorder.style.display=this.hasAttribute("tab-border")||b.hasModifier(this,"material")?"block":"none",t=this.getActiveTabIndex(),0<this._tabsRect.length)&&0<=t&&(this._tabbarBorder.style.width=this._tabsRect[t].width+"px")}},{key:"_getAutoScrollRatio",value:function(t,e,n){// Based on screen size
return Math.min(1,Math.max(0,.6+e*(n/300*(t?-1:1))))}},{key:"_tabbarElement",get:function(){return b.findChild(this,".tabbar")}},{key:"_contentElement",get:function(){return b.findChild(this,".tabbar__content")}},{key:"_targetElement",get:function(){var t=this._contentElement;return t&&t.children[0]||null}},{key:"_compile",value:function(){g.prepare(this);var t=this._contentElement||b.create(".tabbar__content"),e=(t.classList.add("ons-tabbar__content"),this._tabbarElement||b.create(".tabbar"));if(e.classList.add("ons-tabbar__footer"),!e.parentNode)for(;this.firstChild;)e.appendChild(this.firstChild);e.children.length>this.activeIndex&&!b.findChild(e,"[active]")&&e.children[this.activeIndex].setAttribute("active",""),this._tabbarBorder=b.findChild(e,".tabbar__border")||b.create(".tabbar__border"),e.appendChild(this._tabbarBorder),e.classList.add("ons-swiper-tabbar"),// Hides material border
t.children[0]||t.appendChild(document.createElement("div")),t.children[1]||t.appendChild(document.createElement("div")),t.appendChild=t.appendChild.bind(t.children[0]),t.insertBefore=t.insertBefore.bind(t.children[0]),this.appendChild(t),this.appendChild(e),// Triggers ons-tab connectedCallback
v.initModifier(this,Vi)}},{key:"_updatePosition",value:function(){var i=this,t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.getAttribute("position"),o=this._top="top"===t||"auto"===t&&b.hasModifier(this,"material"),a=o?b.addModifier:b.removeModifier,r=(a(this,"top"),b.findParent(this,"ons-page"));r&&M(r,function(){var t=0,e=(r.children[0]&&b.match(r.children[0],"ons-toolbar")&&(a(r.children[0],"noshadow"),t=1),r._getContentElement()),n=window.getComputedStyle(r._getContentElement(),null);i.style.top=o?parseInt(n.getPropertyValue("padding-top"),10)-t+"px":"",
// Refresh content top - Fix for iOS 8
e.style.top=n.top,e.style.top=""}),k.autoStatusBarFill(function(){var t=b.findParent(i,function(t){return t.hasAttribute("status-bar-fill")});b.toggleAttribute(i,"status-bar-fill",o&&!t)})}},{key:"topPage",get:function(){var t=this.tabs,e=this.getActiveTabIndex();return t[e]&&(t[e].pageElement||this.pages[0])||null}},{key:"pages",get:function(){return b.arrayFrom(this._targetElement.children)}},{key:"tabs",get:function(){return Array.prototype.filter.call(this._tabbarElement.children,function(t){return"ONS-TAB"===t.tagName})}
/**
       * @method setActiveTab
       * @signature setActiveTab(index, [options])
       * @param {Number} index
       *   [en]Tab index.[/en]
       *   [ja]タブのインデックスを指定します。[/ja]
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {Function} [options.callback]
       *   [en]Function that runs when the new page has loaded.[/en]
       *   [ja][/ja]
       * @param {String} [options.animation]
       *   [en]If this option is "none", the transition won't slide.[/en]
       *   [ja][/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. {duration: 0.2, delay: 0.4, timing: 'ease-in'}[/ja]
       * @description
       *   [en]Show specified tab page. Animations and their options can be specified by the second parameter.[/en]
       *   [ja]指定したインデックスのタブを表示します。アニメーションなどのオプションを指定できます。[/ja]
       * @return {Promise}
       *   [en]A promise that resolves to the new page element.[/en]
       *   [ja][/ja]
       */},{key:"setActiveTab",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=this.activeIndex;return this._activeIndexSkipEffect=!0,this.activeIndex=t,this._updateActiveIndex(t,n,e)}},{key:"_updateActiveIndex",value:function(e,t){var n=this,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},o=this.tabs[t],a=this.tabs[e];return a?e===t?(b.triggerElementEvent(this,"reactive",{index:e,activeIndex:e,tabItem:a}),Promise.resolve(a.pageElement)):((t=a.pageElement)?Promise.resolve(t):a.loaded).then(function(t){return n._swiper.setActiveIndex(e,s(s({reject:!0},i),{},{animation:o&&t?i.animation||n.getAttribute("animation"):"none",animationOptions:b.extend({duration:.3,timing:"cubic-bezier(.4, .7, .5, 1)"},n.animationOptions,i.animationOptions||{})})).then(function(){return i.callback instanceof Function&&i.callback(t),t})}):Promise.reject("Specified index does not match any tab.")}
/**
       * @method setTabbarVisibility
       * @signature setTabbarVisibility(visible)
       * @param {Boolean} visible
       * @description
       *   [en]Used to hide or show the tab bar.[/en]
       *   [ja][/ja]
       */},{key:"setTabbarVisibility",value:function(t){this.hideTabs=!t}},{key:"show",value:function(){this.hideTabs=!1}},{key:"hide",value:function(){this.hideTabs=!0}},{key:"_updateVisibility",value:function(){var e=this;M(this,function(){var t=!e.hideTabs;e._contentElement.style[e._top?"top":"bottom"]=t?"":"0px",e._tabbarElement.style.display=t?"":"none",t&&e._onRefresh()})}
/**
       * @property visible
       * @readonly
       * @type {Boolean}
       * @description
       *   [en]Whether the tabbar is visible or not.[/en]
       *   [ja]タブバーが見える場合に`true`。[/ja]
       */},{key:"visible",get:function(){return"none"!==this._tabbarElement.style.display}
/**
       * @property swipeable
       * @type {Boolean}
       * @description
       *   [en]Enable swipe interaction.[/en]
       *   [ja]swipeableであればtrueを返します。[/ja]
       */
/**
       * @property onSwipe
       * @type {Function}
       * @description
       *   [en]Hook called whenever the user slides the tabbar. It gets a decimal index and an animationOptions object as arguments.[/en]
       *   [ja][/ja]
       */
/**
       * @method getActiveTabIndex
       * @signature getActiveTabIndex()
       * @return {Number}
       *   [en]The index of the currently active tab.[/en]
       *   [ja]現在アクティブになっているタブのインデックスを返します。[/ja]
       * @description
       *   [en]Returns tab index on current active tab. If active tab is not found, returns -1.[/en]
       *   [ja]現在アクティブになっているタブのインデックスを返します。現在アクティブなタブがない場合には-1を返します。[/ja]
       */},{key:"getActiveTabIndex",value:function(){for(var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.tabs,e=0;e<t.length;e++)if(t[e]&&"ONS-TAB"===t[e].tagName&&t[e].isActive())return e;return-1}},{key:"activeIndex",get:function(){return Number(this.getAttribute("active-index"))},set:function(t){null!=t&&this.setAttribute("active-index",t)}},{key:"_show",value:function(){var n=this;this._swiper.show(),setImmediate(function(){var t=n.tabs,e=n.getActiveTabIndex(t);n._loadInactive.resolve(),0<t.length&&0<=e&&t[e].loaded.then(function(t){return t&&setImmediate(function(){return t._show()})})})}},{key:"_hide",value:function(){this._swiper.hide();var t=this.topPage;t&&t._hide()}},{key:"_destroy",value:function(){this.tabs.forEach(function(t){return t.remove()}),this.remove()}},{key:"attributeChangedCallback",value:function(t,e,n){var i,o=this;"modifier"===t?(v.onModifierChanged(e,n,this,Vi),(i=function(t){return/(^|\s+)top($|\s+)/i.test(t)})(e)!==i(n)&&this._updatePosition()):"position"===t?b.isAttached(this)&&this._updatePosition():"swipeable"===t?this._swiper&&this._swiper.updateSwipeable(this.hasAttribute("swipeable")):"hide-tabs"===t?this.isConnected&&this._updateVisibility():"active-index"===t&&(this._activeIndexSkipEffect?this._activeIndexSkipEffect=!1:this.isConnected&&M(this,function(){return o._updateActiveIndex(n,e)}))}},{key:"animationOptions",get:function(){return this.hasAttribute("animation-options")?b.animationOptionsParse(this.getAttribute("animation-options")):{}},set:function(t){null==t?this.removeAttribute("animation-options"):this.setAttribute("animation-options",JSON.stringify(t))}}],[{key:"observedAttributes",get:function(){return["modifier","position","swipeable","tab-border","hide-tabs","active-index"]}},{key:"rewritables",get:function(){return Wi}},{key:"events",get:function(){return["prechange","postchange","reactive","swipe"]}}]),o}()),Ui=(b.defineBooleanProperties(Xi,["hide-tabs","swipeable","tab-border"]),i.Tabbar=Xi,customElements.define("ons-tabbar",Xi),"tabbar__item"),Yi={"":"tabbar--*__item",".tabbar__button":"tabbar--*__button"},t=function(){d(o,D);var i=f(o);
/**
     * @attribute page
     * @initonly
     * @type {String}
     * @description
     *   [en]The page that is displayed when the tab is tapped.[/en]
     *   [ja]ons-tabが参照するページへのURLを指定します。[/ja]
     */
/**
     * @attribute icon
     * @type {String}
     * @description
     *   [en]
     *     The icon name for the tab. Can specify the same icon name as `<ons-icon>`. Check [See also](#seealso) section for more information.
     *   [/en]
     *   [ja]
     *     アイコン名を指定します。ons-iconと同じアイコン名を指定できます。
     *     個別にアイコンをカスタマイズする場合は、background-imageなどのCSSスタイルを用いて指定できます。
     *   [/ja]
     */
/**
     * @attribute active-icon
     * @type {String}
     * @description
     *   [en]The name of the icon when the tab is active.[/en]
     *   [ja]アクティブの際のアイコン名を指定します。[/ja]
     */
/**
     * @attribute label
     * @type {String}
     * @description
     *   [en]The label of the tab item.[/en]
     *   [ja]アイコン下に表示されるラベルを指定します。[/ja]
     */
/**
     * @attribute badge
     * @type {String}
     * @description
     *   [en]Display a notification badge on top of the tab.[/en]
     *   [ja]バッジに表示する内容を指定します。[/ja]
     */
/**
     * @attribute active
     * @description
     *   [en]This attribute should be set to the tab that is active by default.[/en]
     *   [ja][/ja]
     */function o(){l(this,o),t=i.call(this),["label","icon","badge"].some(t.hasAttribute.bind(a(t)))?t._compile():M(a(t),function(){return t._compile()}),t._pageLoader=Re,t._onClick=t._onClick.bind(a(t));var t,e=b.defineListenerProperty(a(t),"click"),n=e.onConnected,e=e.onDisconnected;return t._connectOnClick=n,t._disconnectOnClick=e,t}return c(o,[{key:"pageLoader",get:function(){return this._pageLoader},set:function(t){t instanceof Be||b.throwPageLoader(),this._pageLoader=t}},{key:"_compile",value:function(){if(g.prepare(this),this.classList.add(Ui),!this._button){for(var t=b.create("button.tabbar__button");this.childNodes[0];)t.appendChild(this.childNodes[0]);var e=b.create("input",{display:"none"});e.type="radio",this.appendChild(e),this.appendChild(t),this._updateButtonContent(),v.initModifier(this,Yi),this._updateRipple()}}},{key:"_updateRipple",value:function(){this._button&&b.updateRipple(this._button,this.hasAttribute("ripple"))}},{key:"_updateButtonContent",value:function(){var t,e,n,i=this,o=this._button,a=this._icon;this.hasAttribute("icon")?(t=(a=a||b.createElement('<div class="tabbar__icon"><ons-icon></ons-icon></div>')).children[0],n=t.getAttribute("icon"),e=function(){return t.attributeChangedCallback("icon",n,i.getAttribute("icon"))},this.hasAttribute("icon")&&this.hasAttribute("active-icon")?t.setAttribute("icon",this.getAttribute(this.isActive()?"active-icon":"icon")):this.hasAttribute("icon")&&t.setAttribute("icon",this.getAttribute("icon")),a.parentElement!==o&&o.insertBefore(a,o.firstChild),
// dirty fix for https://github.com/OnsenUI/OnsenUI/issues/1654
t.attributeChangedCallback instanceof Function?e():setImmediate(function(){return t.attributeChangedCallback instanceof Function&&e()})):a&&a.remove(),["label","badge"].forEach(function(t,e){var n=i.querySelector(".tabbar__".concat(t));i.hasAttribute(t)?((n=n||b.create(".tabbar__".concat(t)+("badge"===t?" notification":""))).textContent=i.getAttribute(t),n.parentElement!==o&&o.appendChild(n)):n&&n.remove()})}},{key:"_input",get:function(){return b.findChild(this,"input")}},{key:"_button",get:function(){return b.findChild(this,".tabbar__button")}},{key:"_icon",get:function(){return this.querySelector(".tabbar__icon")}},{key:"_tabbar",get:function(){return b.findParent(this,"ons-tabbar")}},{key:"index",get:function(){return Array.prototype.indexOf.call(this.parentElement.children,this)}},{key:"_onClick",value:function(t){var e=this;setTimeout(function(){t.defaultPrevented||e._tabbar.setActiveTab(e.index,{reject:!1})})}},{key:"setActive",value:function(){var t=this,e=!(0<arguments.length&&void 0!==arguments[0])||arguments[0];M(this,function(){t._input.checked=e,t.classList.toggle("active",e),b.toggleAttribute(t,"active",e),t.hasAttribute("icon")&&t.hasAttribute("active-icon")&&t._icon.children[0].setAttribute("icon",t.getAttribute(e?"active-icon":"icon"))})}},{key:"_loadPageElement",value:function(n,t){var i=this;return this._hasLoaded=!0,new Promise(function(e){i._pageLoader.load({parent:n,page:t},function(t){n.replaceChild(t,n.children[i.index]),// Ensure position
i._loadedPage=t,e(t)})})}},{key:"pageElement",get:function(){
// It has been loaded by ons-tab
var t;
// Manually attached to DOM, 1 per tab
return this._loadedPage||((t=this._tabbar).pages.length===t.tabs.length?t.pages[this.index]:null)}
/**
       * @return {Boolean}
       */},{key:"isActive",value:function(){return this.classList.contains("active")}},{key:"disconnectedCallback",value:function(){this.removeEventListener("click",this._onClick,!1),this._loadedPage&&(this._hasLoaded=!1,this.loaded=null),this._disconnectOnClick()}},{key:"connectedCallback",value:function(){var a,r=this;this.addEventListener("click",this._onClick,!1),b.isAttached(this)&&!this.loaded&&(a=b.defer(),this.loaded=a.promise,M(this,function(){var i=r.index,o=r._tabbar;o||b.throw("Tab elements must be children of Tabbar"),o.hasAttribute("modifier")&&b.addModifier(r,o.getAttribute("modifier")),r._hasLoaded||(r.hasAttribute("active")&&(r.setActive(!0),o.activeIndex=i),i===o.tabs.length-1&&(o._onRefresh(),setImmediate(function(){return o._onRefresh()})),Xi.rewritables.ready(o,function(){var t,e,n=r.page||r.getAttribute("page");return!r.pageElement&&n?(t=o._targetElement,e=b.create("div",{height:"100%",width:"100%",visibility:"hidden"}),t.insertBefore(e,t.children[i]),e=function(){return r._loadPageElement(t,n).then(a.resolve)},r.isActive()?e():o._loadInactive.promise.then(e)):a.resolve(r.pageElement)}))}),this._connectOnClick())}},{key:"attributeChangedCallback",value:function(t,e,n){var i=this;switch(t){case"class":b.restoreClass(this,Ui,Yi);break;case"modifier":M(this,function(){return v.onModifierChanged(e,n,i,Yi)});break;case"ripple":M(this,function(){return i._updateRipple()});break;case"icon":case"label":case"badge":M(this,function(){return i._updateButtonContent()});break;case"page":this.page=n||""}}}],[{key:"observedAttributes",get:function(){return["modifier","ripple","icon","label","page","badge","class"]}}]),o}(),$i=(i.Tab=t,customElements.define("ons-tab",t),function(){d(o,Xe);var i=f(o);
/**
     * @param {Object} options
     * @param {String} options.timing
     * @param {Number} options.duration
     * @param {Number} options.delay
     */function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"linear":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.2:t;return l(this,o),i.call(this,{timing:e,delay:n,duration:t})}
/**
     * @param {HTMLElement} modal
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){e()}
/**
       * @param {HTMLElement} modal
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){e()}}]),o}()),t=function(){d(o,$i);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"linear":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.3:t;return l(this,o),i.call(this,{timing:e,delay:n,duration:t})}
/**
     * @param {HTMLElement} toast
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){e=e||function(){},C(t,this.def).default({opacity:0},{opacity:1}).queue(function(t){e(),t()}).play()}
/**
       * @param {HTMLElement} toast
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){e=e||function(){},C(t,this.def).default({opacity:1},{opacity:0}).queue(function(t){e(),t()}).play()}}]),o}(),Gi=function(){d(o,$i);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"ease":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.25:t;return l(this,o),(e=i.call(this,{timing:e,delay:n,duration:t})).messageDelay=.4*e.duration+e.delay,// Delay message opacity change
r.isAndroid()?e.ascension=48:N.isIPhoneXPortraitPatchActive()?e.ascension=98:N.isIPhoneXLandscapePatchActive()?e.ascension=85:e.ascension=64,e}
/**
     * @param {HTMLElement} toast
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){t=t._toast,b.globals.fabOffset=this.ascension,C.runAll(C(t,this.def).default({transform:"translate3d(0, ".concat(this.ascension,"px, 0)")},{transform:"translate3d(0, 0, 0)"}).queue(function(t){e&&e(),t()}),C(this._getFabs()).wait(this.delay).queue({transform:"translate3d(0, -".concat(this.ascension,"px, 0) scale(1)")},this.def),C(b.arrayFrom(t.children),this.def).default({opacity:0},{opacity:1}))}
/**
       * @param {HTMLElement} toast
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){t=t._toast,b.globals.fabOffset=0,C.runAll(C(t,this.def).default({transform:"translate3d(0, 0, 0)"},{transform:"translate3d(0, ".concat(this.ascension,"px, 0)")}).queue(function(t){e&&e(),t()}),C(this._getFabs(),this.def).wait(this.delay).queue({transform:"translate3d(0, 0, 0) scale(1)"},this.def),C(b.arrayFrom(t.children),this.def).default({opacity:1},{opacity:0}))}},{key:"_getFabs",value:function(){return b.arrayFrom(document.querySelectorAll("ons-fab[position~=bottom], ons-speed-dial[position~=bottom]")).filter(function(t){return t.visible})}}]),o}(),Ki=function(){d(o,$i);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"ease":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.35:t;return l(this,o),(e=i.call(this,{timing:e,delay:n,duration:t})).bodyHeight=document.body.clientHeight,// avoid Forced Synchronous Layout
N.isIPhoneXPortraitPatchActive()?e.liftAmount="calc(100% + 34px)":N.isIPhoneXLandscapePatchActive()?e.liftAmount="calc(100% + 21px)":e.liftAmount="100%",e}
/**
     * @param {HTMLElement} toast
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){t=t._toast,C.runAll(C(t,this.def).default({transform:"translate3d(0, ".concat(this.liftAmount,", 0)"),opacity:0},{transform:"translate3d(0, 0, 0)",opacity:1}).queue(function(t){e&&e(),t()}))}
/**
       * @param {HTMLElement} toast
       * @param {Function} callback
       */},{key:"hide",value:function(t,e){t=t._toast,C.runAll(C(t,this.def).default({transform:"translate3d(0, 0, 0)",opacity:1},{transform:"translate3d(0, ".concat(this.liftAmount,", 0)"),opacity:0}).queue(function(t){e&&e(),t()}))}},{key:"_updatePosition",value:function(t){0===parseInt(t.style.top,10)&&(t.style.top=t.style.bottom="")}}]),o}(),Ji=function(){d(o,$i);var i=f(o);function o(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=t.timing,e=void 0===e?"ease":e,n=t.delay,n=void 0===n?0:n,t=t.duration,t=void 0===t?.35:t;return l(this,o),e=i.call(this,{timing:e,delay:n,duration:t}),N.isIPhoneXPortraitPatchActive()?e.fallAmount="calc(-100% - 44px)":e.fallAmount="-100%",e}
/**
     * @param {HTMLElement} toast
     * @param {Function} callback
     */return c(o,[{key:"show",value:function(t,e){t=t._toast,this._updatePosition(t),C.runAll(C(t,this.def).default({transform:"translate3d(0, ".concat(this.fallAmount,", 0)"),opacity:0},{transform:"translate3d(0, 0, 0)",opacity:1}).queue(function(t){e&&e(),t()}))}
/**
       * @param {HTMLElement} toast
       * @param {Function} callback
       */},{key:"hide",value:function(e,n){var i=this;e=e._toast,this._updatePosition(e),C.runAll(C(e,this.def).default({transform:"translate3d(0, 0, 0)",opacity:1},{transform:"translate3d(0, ".concat(this.fallAmount,", 0)"),opacity:0}).queue(function(t){i._updatePosition(e,!0),n&&n(),t()}))}},{key:"_updatePosition",value:function(t,e){var n=N.isIPhoneXPortraitPatchActive()?"44px":"0";t.style.top!==n&&(t.style.top=n,t.style.bottom="initial")}}]),o}(),Qi={".toast":"toast--*",".toast__message":"toast--*__message",".toast__button":"toast--*__button"},Zi="toast",to={default:r.isAndroid()?Gi:Ki,fade:t,ascend:Gi,lift:Ki,fall:Ji,none:$i},t=function(){d(n,Ge);var e=f(n);
/**
     * @event preshow
     * @description
     *   [en]Fired just before the toast is displayed.[/en]
     *   [ja]ダイアログが表示される直前に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.toast
     *   [en]Toast object.[/en]
     *   [ja]ダイアログのオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Execute to stop the toast from showing.[/en]
     *   [ja]この関数を実行すると、ダイアログの表示を止めます。[/ja]
     */
/**
     * @event postshow
     * @description
     *   [en]Fired just after the toast is displayed.[/en]
     *   [ja]ダイアログが表示された直後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.toast
     *   [en]Toast object.[/en]
     *   [ja]ダイアログのオブジェクト。[/ja]
     */
/**
     * @event prehide
     * @description
     *   [en]Fired just before the toast is hidden.[/en]
     *   [ja]ダイアログが隠れる直前に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.toast
     *   [en]Toast object.[/en]
     *   [ja]ダイアログのオブジェクト。[/ja]
     * @param {Function} event.cancel
     *   [en]Execute to stop the toast from hiding.[/en]
     *   [ja]この関数を実行すると、ダイアログが閉じようとするのを止めます。[/ja]
     */
/**
     * @event posthide
     * @description
     * [en]Fired just after the toast is hidden.[/en]
     * [ja]ダイアログが隠れた後に発火します。[/ja]
     * @param {Object} event [en]Event object.[/en]
     * @param {Object} event.toast
     *   [en]Toast object.[/en]
     *   [ja]ダイアログのオブジェクト。[/ja]
     */
/**
     * @attribute animation
     * @type {String}
     * @default default
     * @description
     *  [en]The animation used when showing and hiding the toast. Can be either `"default"`, `"ascend"` (Android), `"lift"` (iOS), `"fall"`, `"fade"` or `"none"`.[/en]
     *  [ja][/ja]
     */
/**
     * @attribute animation-options
     * @type {Expression}
     * @description
     *  [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *  [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。e.g. <code>{duration: 0.2, delay: 1, timing: 'ease-in'}</code>[/ja]
     */
/**
     * @property animationOptions
     * @type {Object}
     * @description
     *   [en]Specify the animation's duration, timing and delay with an object literal. E.g. `{duration: 0.2, delay: 1, timing: 'ease-in'}`.[/en]
     *   [ja]アニメーション時のduration, timing, delayをオブジェクトリテラルで指定します。例：{duration: 0.2, delay: 1, timing: 'ease-in'}[/ja]
     */
/**
     * @attribute visible
     * @type {Boolean}
     * @description
     *   [en]Whether the toast is visible or not.[/en]
     *   [ja]要素が見える場合に`true`。[/ja]
     */function n(){var t;return l(this,n),(t=e.call(this))._defaultDBB=null,M(a(t),function(){return t._compile()}),t}return c(n,[{key:"_scheme",get:function(){return Qi}},{key:"_toast",get:function(){return b.findChild(this,".".concat(Zi))}},{key:"_updateAnimatorFactory",value:function(){
// Reset position style
return this._toast&&(this._toast.style.top=this._toast.style.bottom=""),new w({animators:to,baseClass:$i,baseClassName:"ToastAnimator",defaultAnimation:this.getAttribute("animation")})}
/**
       * @property onDeviceBackButton
       * @type {Object}
       * @description
       *   [en]Back-button handler.[/en]
       *   [ja]バックボタンハンドラ。[/ja]
       */},{key:"_compile",value:function(){g.prepare(this),this.style.display="none",this.style.zIndex=1e4;// Lower than dialogs
var t="toast__message",e="toast__button",n=b.findChild(this,".".concat(Zi));if(!n)for((n=document.createElement("div")).classList.add(Zi);this.childNodes[0];)n.appendChild(this.childNodes[0]);var i=b.findChild(n,".".concat(e));if(i||(i=b.findChild(n,function(t){return b.match(t,".button")||b.match(t,"button")}))&&(i.classList.remove("button"),i.classList.add(e),n.appendChild(i)),!b.findChild(n,".".concat(t))){if(!(o=b.findChild(n,".message")))for(var o=document.createElement("div"),a=n.childNodes.length-1;0<=a;a--)n.childNodes[a]!==i&&o.insertBefore(n.childNodes[a],o.firstChild);o.classList.add(t),n.insertBefore(o,n.firstChild)}n.parentNode!==this&&this.appendChild(n),v.initModifier(this,this._scheme)}
/**
       * @property visible
       * @type {Boolean}
       * @description
       *   [en]Whether the element is visible or not.[/en]
       *   [ja]要素が見える場合に`true`。[/ja]
       */
/**
       * @method show
       * @signature show([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name. Available animations are `"default"`, `"ascend"` (Android), `"lift"` (iOS), `"fall"`, `"fade"` or `"none"`.[/en]
       *   [ja][/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. {duration: 0.2, delay: 0.4, timing: 'ease-in'}[/ja]
       * @description
       *   [en]Show the element.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en]Resolves to the displayed element[/en]
       *   [ja][/ja]
       */
/**
       * @method toggle
       * @signature toggle([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name. Available animations are `"default"`, `"ascend"` (Android), `"lift"` (iOS), `"fall"`, `"fade"` or `"none"`.[/en]
       *   [ja][/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. {duration: 0.2, delay: 0.4, timing: 'ease-in'}[/ja]
       * @description
       *   [en]Toggle toast visibility.[/en]
       *   [ja][/ja]
       */
/**
       * @method hide
       * @signature hide([options])
       * @param {Object} [options]
       *   [en]Parameter object.[/en]
       *   [ja]オプションを指定するオブジェクト。[/ja]
       * @param {String} [options.animation]
       *   [en]Animation name. Available animations are `"default"`, `"ascend"` (Android), `"lift"` (iOS), `"fall"`, `"fade"` or `"none"`.[/en]
       *   [ja][/ja]
       * @param {String} [options.animationOptions]
       *   [en]Specify the animation's duration, delay and timing. E.g. `{duration: 0.2, delay: 0.4, timing: 'ease-in'}`.[/en]
       *   [ja]アニメーション時のduration, delay, timingを指定します。e.g. {duration: 0.2, delay: 0.4, timing: 'ease-in'}[/ja]
       * @description
       *   [en]Hide toast.[/en]
       *   [ja][/ja]
       * @return {Promise}
       *   [en]Resolves to the hidden element[/en]
       *   [ja][/ja]
       */
/**
       * @param {String} name
       * @param {Function} Animator
       */}],[{key:"registerAnimator",value:function(t,e){e.prototype instanceof $i||b.throw('"Animator" param must inherit OnsToastElement.ToastAnimator'),to[t]=e}},{key:"animators",get:function(){return to}},{key:"ToastAnimator",get:function(){return $i}}]),n}(),Gi=(i.Toast=t,customElements.define("ons-toast",t),function(){d(e,tn);var t=f(e);function e(){return l(this,e),t.apply(this,arguments)}return c(e,[{key:"_scheme",get:
/**
       * @attribute modifier
       * @type {String}
       * @description
       *   [en]The appearance of the button.[/en]
       *   [ja]ボタンの表現を指定します。[/ja]
       */
/**
       * @attribute icon
       * @type {String}
       * @description
       *  [en]Creates an `ons-icon` component with this string.[/en]
       *  [ja]`ons-icon`コンポーネントを悪性します。[/ja]
       */
/**
       * @attribute disabled
       * @description
       *   [en]Specify if button should be disabled.[/en]
       *   [ja]ボタンを無効化する場合は指定してください。[/ja]
       */
/**
       * @property disabled
       * @type {Boolean}
       * @description
       *   [en]Whether the element is disabled or not.[/en]
       *   [ja]無効化されている場合に`true`。[/ja]
       */
function(){return{"":"toolbar-button--*"}}},{key:"_defaultClassName",get:function(){return"toolbar-button"}},{key:"_rippleOpt",get:function(){return[this,void 0,{center:"",size:"contain",background:"transparent"}]}}]),e}());
/**
   * @element ons-if
   * @category conditional
   * @tutorial vanilla/Reference/if
   * @description
   *   [en]
   *     Conditionally display content depending on the platform, device orientation or both.
   *
   *     Sometimes it is useful to conditionally hide or show certain components based on platform. When running on iOS the `<ons-if>` element can be used to hide the `<ons-fab>` element.
   *   [/en]
   *   [ja][/ja]
   * @guide theming.html#cross-platform-styling-autostyling [en]Information about cross platform styling[/en][ja]Information about cross platform styling[/ja]
   * @example
   * <ons-page>
   *   <ons-if orientation="landscape">
   *     Landscape view!
   *   </ons-if>
   *   <ons-if platform="android">
   *     This is Android.
   *   </ons-if>
   *   <ons-if platform="ios other">
   *     This is not Android.
   *   </ons-if>
   * </ons-page>
   */return i.ToolbarButton=Gi,customElements.define("ons-toolbar-button",Gi),e=T,k.waitDOMContentLoaded(function(){function t(t){for(var e=window.document.querySelectorAll(t),n=0;n<e.length;n++)k.templateStore.set(e[n].getAttribute("id"),e[n].textContent||e[n].content)}t('script[type="text/template"]'),t('script[type="text/ng-template"]'),t("template")}),window._onsLoaded&&e._util.warn("Onsen UI is loaded more than once."),window._onsLoaded=!0,e.ready(function(){e.enableDeviceBackButtonHandler(),e._defaultDeviceBackButtonHandler=e._internal.dbbDispatcher.createHandler(window.document.body,function(){Object.hasOwnProperty.call(navigator,"app")?navigator.app.exitApp():console.warn("Could not close the app. Is 'cordova.js' included?\nError: 'window.navigator.app' is undefined.")}),document.body._gestureDetector=new e.GestureDetector(document.body,{passive:!0}),
// Simulate Device Back Button on ESC press
e.platform.isWebView()||document.body.addEventListener("keydown",function(t){27===t.keyCode&&e.fireDeviceBackButtonEvent()}),
// setup loading placeholder
e._setupLoadingPlaceHolders()}),
// viewport.js
Viewport.setup(),// Setup initial listeners
window._superSecretOns=T});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,